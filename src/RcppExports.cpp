// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/torch.h"
#include "../inst/include/torch_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_amp_is_autocast_gpu_enabled
bool cpp_amp_is_autocast_gpu_enabled();
RcppExport SEXP _torch_cpp_amp_is_autocast_gpu_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_amp_is_autocast_gpu_enabled());
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_is_autocast_cpu_enabled
bool cpp_amp_is_autocast_cpu_enabled();
RcppExport SEXP _torch_cpp_amp_is_autocast_cpu_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_amp_is_autocast_cpu_enabled());
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_autocast_set_gpu_enabled
void cpp_amp_autocast_set_gpu_enabled(bool enabled);
RcppExport SEXP _torch_cpp_amp_autocast_set_gpu_enabled(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type enabled(enabledSEXP);
    cpp_amp_autocast_set_gpu_enabled(enabled);
    return R_NilValue;
END_RCPP
}
// cpp_amp_autocast_set_cpu_enabled
void cpp_amp_autocast_set_cpu_enabled(bool enabled);
RcppExport SEXP _torch_cpp_amp_autocast_set_cpu_enabled(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type enabled(enabledSEXP);
    cpp_amp_autocast_set_cpu_enabled(enabled);
    return R_NilValue;
END_RCPP
}
// cpp_amp_autocast_set_gpu_dtype
void cpp_amp_autocast_set_gpu_dtype(torch::Dtype dtype);
RcppExport SEXP _torch_cpp_amp_autocast_set_gpu_dtype(SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Dtype >::type dtype(dtypeSEXP);
    cpp_amp_autocast_set_gpu_dtype(dtype);
    return R_NilValue;
END_RCPP
}
// cpp_amp_autocast_set_cpu_dtype
void cpp_amp_autocast_set_cpu_dtype(torch::Dtype dtype);
RcppExport SEXP _torch_cpp_amp_autocast_set_cpu_dtype(SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Dtype >::type dtype(dtypeSEXP);
    cpp_amp_autocast_set_cpu_dtype(dtype);
    return R_NilValue;
END_RCPP
}
// cpp_amp_autocast_set_cache_enabled
void cpp_amp_autocast_set_cache_enabled(bool enabled);
RcppExport SEXP _torch_cpp_amp_autocast_set_cache_enabled(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type enabled(enabledSEXP);
    cpp_amp_autocast_set_cache_enabled(enabled);
    return R_NilValue;
END_RCPP
}
// cpp_amp_autocast_is_cache_enabled
bool cpp_amp_autocast_is_cache_enabled();
RcppExport SEXP _torch_cpp_amp_autocast_is_cache_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_amp_autocast_is_cache_enabled());
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_autocast_get_gpu_dtype
torch::Dtype cpp_amp_autocast_get_gpu_dtype();
RcppExport SEXP _torch_cpp_amp_autocast_get_gpu_dtype() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_amp_autocast_get_gpu_dtype());
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_autocast_get_cpu_dtype
torch::Dtype cpp_amp_autocast_get_cpu_dtype();
RcppExport SEXP _torch_cpp_amp_autocast_get_cpu_dtype() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_amp_autocast_get_cpu_dtype());
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_autocast_increment_nesting
void cpp_amp_autocast_increment_nesting();
RcppExport SEXP _torch_cpp_amp_autocast_increment_nesting() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cpp_amp_autocast_increment_nesting();
    return R_NilValue;
END_RCPP
}
// cpp_amp_autocast_decrease_nesting
int cpp_amp_autocast_decrease_nesting();
RcppExport SEXP _torch_cpp_amp_autocast_decrease_nesting() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_amp_autocast_decrease_nesting());
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_autocast_clear_cache
void cpp_amp_autocast_clear_cache();
RcppExport SEXP _torch_cpp_amp_autocast_clear_cache() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cpp_amp_autocast_clear_cache();
    return R_NilValue;
END_RCPP
}
// cpp_amp_foreach_non_finite_check_and_unscale
int cpp_amp_foreach_non_finite_check_and_unscale(torch::TensorList params, torch::Tensor found_inf, torch::Tensor inv_scale);
RcppExport SEXP _torch_cpp_amp_foreach_non_finite_check_and_unscale(SEXP paramsSEXP, SEXP found_infSEXP, SEXP inv_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::TensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< torch::Tensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< torch::Tensor >::type inv_scale(inv_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_amp_foreach_non_finite_check_and_unscale(params, found_inf, inv_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_amp_update_scale_
void cpp_amp_update_scale_(torch::Tensor scale, torch::Tensor growth_tracker, torch::Tensor found_inf, double scale_growth_factor, double scale_backoff_factor, torch::int64_t growth_interval);
RcppExport SEXP _torch_cpp_amp_update_scale_(SEXP scaleSEXP, SEXP growth_trackerSEXP, SEXP found_infSEXP, SEXP scale_growth_factorSEXP, SEXP scale_backoff_factorSEXP, SEXP growth_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< torch::Tensor >::type growth_tracker(growth_trackerSEXP);
    Rcpp::traits::input_parameter< torch::Tensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< double >::type scale_growth_factor(scale_growth_factorSEXP);
    Rcpp::traits::input_parameter< double >::type scale_backoff_factor(scale_backoff_factorSEXP);
    Rcpp::traits::input_parameter< torch::int64_t >::type growth_interval(growth_intervalSEXP);
    cpp_amp_update_scale_(scale, growth_tracker, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_set_grad_mode
void cpp_autograd_set_grad_mode(bool enabled);
RcppExport SEXP _torch_cpp_autograd_set_grad_mode(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type enabled(enabledSEXP);
    cpp_autograd_set_grad_mode(enabled);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_is_enabled
bool cpp_autograd_is_enabled();
RcppExport SEXP _torch_cpp_autograd_is_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_is_enabled());
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_set_detect_anomaly
void cpp_autograd_set_detect_anomaly(bool enabled);
RcppExport SEXP _torch_cpp_autograd_set_detect_anomaly(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type enabled(enabledSEXP);
    cpp_autograd_set_detect_anomaly(enabled);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_detect_anomaly_is_enabled
bool cpp_autograd_detect_anomaly_is_enabled();
RcppExport SEXP _torch_cpp_autograd_detect_anomaly_is_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_detect_anomaly_is_enabled());
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_grad
torch::Tensor cpp_tensor_grad(torch::Tensor self);
RcppExport SEXP _torch_cpp_tensor_grad(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_grad(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_set_grad_
void cpp_tensor_set_grad_(torch::Tensor self, torch::Tensor new_grad);
RcppExport SEXP _torch_cpp_tensor_set_grad_(SEXP selfSEXP, SEXP new_gradSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< torch::Tensor >::type new_grad(new_gradSEXP);
    cpp_tensor_set_grad_(self, new_grad);
    return R_NilValue;
END_RCPP
}
// cpp_tensor_requires_grad
bool cpp_tensor_requires_grad(torch::Tensor self);
RcppExport SEXP _torch_cpp_tensor_requires_grad(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_requires_grad(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__backward_self_Tensor_inputs_TensorList
void cpp_torch_method__backward_self_Tensor_inputs_TensorList(torch::Tensor self, torch::TensorList inputs, torch::optional::Tensor gradient, torch::optional::bool_t retain_graph, torch::bool_t create_graph);
RcppExport SEXP _torch_cpp_torch_method__backward_self_Tensor_inputs_TensorList(SEXP selfSEXP, SEXP inputsSEXP, SEXP gradientSEXP, SEXP retain_graphSEXP, SEXP create_graphSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< torch::TensorList >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< torch::optional::Tensor >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< torch::optional::bool_t >::type retain_graph(retain_graphSEXP);
    Rcpp::traits::input_parameter< torch::bool_t >::type create_graph(create_graphSEXP);
    cpp_torch_method__backward_self_Tensor_inputs_TensorList(self, inputs, gradient, retain_graph, create_graph);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_backward
void cpp_autograd_backward(Rcpp::XPtr<XPtrTorchvariable_list> tensors, Rcpp::XPtr<XPtrTorchvariable_list> grad_tensors, bool retain_graph, bool create_graph);
RcppExport SEXP _torch_cpp_autograd_backward(SEXP tensorsSEXP, SEXP grad_tensorsSEXP, SEXP retain_graphSEXP, SEXP create_graphSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchvariable_list> >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchvariable_list> >::type grad_tensors(grad_tensorsSEXP);
    Rcpp::traits::input_parameter< bool >::type retain_graph(retain_graphSEXP);
    Rcpp::traits::input_parameter< bool >::type create_graph(create_graphSEXP);
    cpp_autograd_backward(tensors, grad_tensors, retain_graph, create_graph);
    return R_NilValue;
END_RCPP
}
// cpp_tensor_register_hook
unsigned int cpp_tensor_register_hook(Rcpp::XPtr<XPtrTorchTensor> self, Rcpp::Function f);
RcppExport SEXP _torch_cpp_tensor_register_hook(SEXP selfSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_register_hook(self, f));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_remove_hook
void cpp_tensor_remove_hook(Rcpp::XPtr<XPtrTorchTensor> self, unsigned int pos);
RcppExport SEXP _torch_cpp_tensor_remove_hook(SEXP selfSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pos(posSEXP);
    cpp_tensor_remove_hook(self, pos);
    return R_NilValue;
END_RCPP
}
// register_lambda_function_deleter
void register_lambda_function_deleter();
RcppExport SEXP _torch_register_lambda_function_deleter() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    register_lambda_function_deleter();
    return R_NilValue;
END_RCPP
}
// cpp_Function_lambda
Rcpp::XPtr<XPtrTorch> cpp_Function_lambda(Rcpp::Function f);
RcppExport SEXP _torch_cpp_Function_lambda(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_Function_lambda(f));
    return rcpp_result_gen;
END_RCPP
}
// cpp_Function_apply
torch::variable_list cpp_Function_apply(torch::variable_list inputs, Rcpp::XPtr<XPtrTorch> forward, Rcpp::XPtr<XPtrTorch> backward);
RcppExport SEXP _torch_cpp_Function_apply(SEXP inputsSEXP, SEXP forwardSEXP, SEXP backwardSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::variable_list >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type forward(forwardSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type backward(backwardSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_Function_apply(inputs, forward, backward));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_context_save_for_backward
void cpp_autograd_context_save_for_backward(Rcpp::XPtr<XPtrTorch> self, torch::variable_list vars);
RcppExport SEXP _torch_cpp_autograd_context_save_for_backward(SEXP selfSEXP, SEXP varsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< torch::variable_list >::type vars(varsSEXP);
    cpp_autograd_context_save_for_backward(self, vars);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_context_get_saved_variables
torch::variable_list cpp_autograd_context_get_saved_variables(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_context_get_saved_variables(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_context_get_saved_variables(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_context_set_arguments
void cpp_autograd_context_set_arguments(Rcpp::XPtr<XPtrTorch> self, torch::vector::string names, torch::vector::bool_t needs_grad);
RcppExport SEXP _torch_cpp_autograd_context_set_arguments(SEXP selfSEXP, SEXP namesSEXP, SEXP needs_gradSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< torch::vector::string >::type names(namesSEXP);
    Rcpp::traits::input_parameter< torch::vector::bool_t >::type needs_grad(needs_gradSEXP);
    cpp_autograd_context_set_arguments(self, names, needs_grad);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_context_get_argument_names
torch::vector::string cpp_autograd_context_get_argument_names(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_context_get_argument_names(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_context_get_argument_names(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_context_get_argument_needs_grad
torch::vector::bool_t cpp_autograd_context_get_argument_needs_grad(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_context_get_argument_needs_grad(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_context_get_argument_needs_grad(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_context_set_saved_variables_names
void cpp_autograd_context_set_saved_variables_names(Rcpp::XPtr<XPtrTorch> self, torch::vector::string names);
RcppExport SEXP _torch_cpp_autograd_context_set_saved_variables_names(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< torch::vector::string >::type names(namesSEXP);
    cpp_autograd_context_set_saved_variables_names(self, names);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_context_get_saved_variables_names
torch::vector::string cpp_autograd_context_get_saved_variables_names(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_context_get_saved_variables_names(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_context_get_saved_variables_names(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_context_mark_dirty
void cpp_autograd_context_mark_dirty(Rcpp::XPtr<XPtrTorch> self, Rcpp::XPtr<XPtrTorchvariable_list> inputs);
RcppExport SEXP _torch_cpp_autograd_context_mark_dirty(SEXP selfSEXP, SEXP inputsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchvariable_list> >::type inputs(inputsSEXP);
    cpp_autograd_context_mark_dirty(self, inputs);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_context_mark_non_differentiable
void cpp_autograd_context_mark_non_differentiable(Rcpp::XPtr<XPtrTorch> self, Rcpp::XPtr<XPtrTorchvariable_list> outputs);
RcppExport SEXP _torch_cpp_autograd_context_mark_non_differentiable(SEXP selfSEXP, SEXP outputsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchvariable_list> >::type outputs(outputsSEXP);
    cpp_autograd_context_mark_non_differentiable(self, outputs);
    return R_NilValue;
END_RCPP
}
// cpp_tensor_grad_fn
Rcpp::XPtr<XPtrTorch> cpp_tensor_grad_fn(Rcpp::XPtr<XPtrTorchTensor> self);
RcppExport SEXP _torch_cpp_tensor_grad_fn(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_grad_fn(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pointer_is_null
bool cpp_pointer_is_null(Rcpp::XPtr<XPtrTorchTensor> x);
RcppExport SEXP _torch_cpp_pointer_is_null(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pointer_is_null(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_node_name
std::string cpp_autograd_node_name(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_node_name(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_node_name(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_node_next_edges
Rcpp::List cpp_autograd_node_next_edges(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_node_next_edges(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_node_next_edges(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_edge_function
Rcpp::XPtr<XPtrTorch> cpp_autograd_edge_function(Rcpp::XPtr<XPtrTorch> self);
RcppExport SEXP _torch_cpp_autograd_edge_function(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_edge_function(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_autograd_grad
torch::variable_list cpp_autograd_grad(torch::variable_list outputs, torch::variable_list inputs, torch::variable_list grad_outputs, bool retain_graph, bool create_graph, bool allow_unused);
RcppExport SEXP _torch_cpp_autograd_grad(SEXP outputsSEXP, SEXP inputsSEXP, SEXP grad_outputsSEXP, SEXP retain_graphSEXP, SEXP create_graphSEXP, SEXP allow_unusedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::variable_list >::type outputs(outputsSEXP);
    Rcpp::traits::input_parameter< torch::variable_list >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< torch::variable_list >::type grad_outputs(grad_outputsSEXP);
    Rcpp::traits::input_parameter< bool >::type retain_graph(retain_graphSEXP);
    Rcpp::traits::input_parameter< bool >::type create_graph(create_graphSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_unused(allow_unusedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_autograd_grad(outputs, inputs, grad_outputs, retain_graph, create_graph, allow_unused));
    return rcpp_result_gen;
END_RCPP
}
// cpp_set_lantern_allocator
void cpp_set_lantern_allocator(uint64_t threshold_call_gc);
RcppExport SEXP _torch_cpp_set_lantern_allocator(SEXP threshold_call_gcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type threshold_call_gc(threshold_call_gcSEXP);
    cpp_set_lantern_allocator(threshold_call_gc);
    return R_NilValue;
END_RCPP
}
// cpp_set_cuda_allocator_allocator_thresholds
void cpp_set_cuda_allocator_allocator_thresholds(double reserved_rate, double allocated_rate, double allocated_reserved_rate);
RcppExport SEXP _torch_cpp_set_cuda_allocator_allocator_thresholds(SEXP reserved_rateSEXP, SEXP allocated_rateSEXP, SEXP allocated_reserved_rateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reserved_rate(reserved_rateSEXP);
    Rcpp::traits::input_parameter< double >::type allocated_rate(allocated_rateSEXP);
    Rcpp::traits::input_parameter< double >::type allocated_reserved_rate(allocated_reserved_rateSEXP);
    cpp_set_cuda_allocator_allocator_thresholds(reserved_rate, allocated_rate, allocated_reserved_rate);
    return R_NilValue;
END_RCPP
}
// cpp_autograd_zero_grad
void cpp_autograd_zero_grad(torch::TensorList x);
RcppExport SEXP _torch_cpp_autograd_zero_grad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::TensorList >::type x(xSEXP);
    cpp_autograd_zero_grad(x);
    return R_NilValue;
END_RCPP
}
// cpp_backends_mkldnn_is_available
bool cpp_backends_mkldnn_is_available();
RcppExport SEXP _torch_cpp_backends_mkldnn_is_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_backends_mkldnn_is_available());
    return rcpp_result_gen;
END_RCPP
}
// cpp_backends_mkl_is_available
bool cpp_backends_mkl_is_available();
RcppExport SEXP _torch_cpp_backends_mkl_is_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_backends_mkl_is_available());
    return rcpp_result_gen;
END_RCPP
}
// cpp_backends_openmp_is_available
bool cpp_backends_openmp_is_available();
RcppExport SEXP _torch_cpp_backends_openmp_is_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_backends_openmp_is_available());
    return rcpp_result_gen;
END_RCPP
}
// cpp_backends_mps_is_available
bool cpp_backends_mps_is_available();
RcppExport SEXP _torch_cpp_backends_mps_is_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_backends_mps_is_available());
    return rcpp_result_gen;
END_RCPP
}
// cpp_arg_to_torch_type
std::string cpp_arg_to_torch_type(SEXP obj, const std::vector<std::string>& expected_types, const std::string& arg_name);
RcppExport SEXP _torch_cpp_arg_to_torch_type(SEXP objSEXP, SEXP expected_typesSEXP, SEXP arg_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type expected_types(expected_typesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type arg_name(arg_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_arg_to_torch_type(obj, expected_types, arg_name));
    return rcpp_result_gen;
END_RCPP
}
// cpp_clean_names
std::string cpp_clean_names(const std::string& x, const std::vector<std::string>& r);
RcppExport SEXP _torch_cpp_clean_names(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_clean_names(x, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_function_name
std::string cpp_make_function_name(const std::string& method_name, const std::vector<std::string>& arg_names, const std::vector<std::string>& arg_types, const std::string& type);
RcppExport SEXP _torch_cpp_make_function_name(SEXP method_nameSEXP, SEXP arg_namesSEXP, SEXP arg_typesSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type method_name(method_nameSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type arg_names(arg_namesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type arg_types(arg_typesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_function_name(method_name, arg_names, arg_types, type));
    return rcpp_result_gen;
END_RCPP
}
// create_fn_name
std::string create_fn_name(const std::string& fun_name, const std::string& fun_type, const std::vector<std::string>& nd_args, const Rcpp::List& args, const Rcpp::List& expected_types);
RcppExport SEXP _torch_create_fn_name(SEXP fun_nameSEXP, SEXP fun_typeSEXP, SEXP nd_argsSEXP, SEXP argsSEXP, SEXP expected_typesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fun_name(fun_nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fun_type(fun_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type nd_args(nd_argsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type args(argsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type expected_types(expected_typesSEXP);
    rcpp_result_gen = Rcpp::wrap(create_fn_name(fun_name, fun_type, nd_args, args, expected_types));
    return rcpp_result_gen;
END_RCPP
}
// cpp_contrib_torch_sparsemax
XPtrTorchTensor cpp_contrib_torch_sparsemax(Rcpp::XPtr<XPtrTorchTensor> input, int dim);
RcppExport SEXP _torch_cpp_contrib_torch_sparsemax(SEXP inputSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_contrib_torch_sparsemax(input, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_contrib_torch_sort_vertices
XPtrTorchTensor cpp_contrib_torch_sort_vertices(XPtrTorchTensor vertices, XPtrTorchTensor mask, XPtrTorchTensor num_valid);
RcppExport SEXP _torch_cpp_contrib_torch_sort_vertices(SEXP verticesSEXP, SEXP maskSEXP, SEXP num_validSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type num_valid(num_validSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_contrib_torch_sort_vertices(vertices, mask, num_valid));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_is_available
bool cpp_cuda_is_available();
RcppExport SEXP _torch_cpp_cuda_is_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_cuda_is_available());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_device_count
int cpp_cuda_device_count();
RcppExport SEXP _torch_cpp_cuda_device_count() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_cuda_device_count());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_synchronize
void cpp_cuda_synchronize(int device);
RcppExport SEXP _torch_cpp_cuda_synchronize(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    cpp_cuda_synchronize(device);
    return R_NilValue;
END_RCPP
}
// cpp_cuda_current_device
int64_t cpp_cuda_current_device();
RcppExport SEXP _torch_cpp_cuda_current_device() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_cuda_current_device());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_get_device_capability
XPtrTorchvector_int64_t cpp_cuda_get_device_capability(int64_t device);
RcppExport SEXP _torch_cpp_cuda_get_device_capability(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cuda_get_device_capability(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cudnn_runtime_version
int64_t cpp_cudnn_runtime_version();
RcppExport SEXP _torch_cpp_cudnn_runtime_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_cudnn_runtime_version());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cudnn_is_available
bool cpp_cudnn_is_available();
RcppExport SEXP _torch_cpp_cudnn_is_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_cudnn_is_available());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_memory_stats
torch::vector::int64_t cpp_cuda_memory_stats(int64_t device);
RcppExport SEXP _torch_cpp_cuda_memory_stats(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int64_t >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cuda_memory_stats(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_get_runtime_version
int cpp_cuda_get_runtime_version();
RcppExport SEXP _torch_cpp_cuda_get_runtime_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_cuda_get_runtime_version());
    return rcpp_result_gen;
END_RCPP
}
// cpp_cuda_empty_cache
void cpp_cuda_empty_cache();
RcppExport SEXP _torch_cpp_cuda_empty_cache() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cpp_cuda_empty_cache();
    return R_NilValue;
END_RCPP
}
// cpp_device_type_to_string
std::string cpp_device_type_to_string(Rcpp::XPtr<XPtrTorchDevice> device);
RcppExport SEXP _torch_cpp_device_type_to_string(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchDevice> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_device_type_to_string(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_device_index_to_int
std::int64_t cpp_device_index_to_int(Rcpp::XPtr<XPtrTorchDevice> device);
RcppExport SEXP _torch_cpp_device_index_to_int(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchDevice> >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_device_index_to_int(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_device
XPtrTorchDevice cpp_torch_device(std::string type, Rcpp::Nullable<std::int64_t> index);
RcppExport SEXP _torch_cpp_torch_device(SEXP typeSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::int64_t> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_device(type, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_set_default_device
void cpp_set_default_device(SEXP device);
RcppExport SEXP _torch_cpp_set_default_device(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type device(deviceSEXP);
    cpp_set_default_device(device);
    return R_NilValue;
END_RCPP
}
// cpp_get_current_default_device
SEXP cpp_get_current_default_device();
RcppExport SEXP _torch_cpp_get_current_default_device() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_get_current_default_device());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_dimname
XPtrTorchDimname cpp_torch_dimname(XPtrTorchstring str);
RcppExport SEXP _torch_cpp_torch_dimname(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchstring >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_dimname(str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_dimname_list
XPtrTorchDimnameList cpp_torch_dimname_list(const Rcpp::List& x);
RcppExport SEXP _torch_cpp_torch_dimname_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_dimname_list(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dimname_to_string
std::string cpp_dimname_to_string(XPtrTorchDimname x);
RcppExport SEXP _torch_cpp_dimname_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dimname_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dimname_list_to_string
std::vector<std::string> cpp_dimname_list_to_string(XPtrTorchDimnameList x);
RcppExport SEXP _torch_cpp_dimname_list_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dimname_list_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dtype_to_string
torch::string cpp_dtype_to_string(XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_dtype_to_string(SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dtype_to_string(dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_float32
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_float32();
RcppExport SEXP _torch_cpp_torch_float32() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_float32());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_float64
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_float64();
RcppExport SEXP _torch_cpp_torch_float64() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_float64());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_float16
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_float16();
RcppExport SEXP _torch_cpp_torch_float16() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_float16());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_uint8
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_uint8();
RcppExport SEXP _torch_cpp_torch_uint8() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_uint8());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int8
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_int8();
RcppExport SEXP _torch_cpp_torch_int8() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int8());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int16
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_int16();
RcppExport SEXP _torch_cpp_torch_int16() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int16());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int32
XPtrTorchDtype cpp_torch_int32();
RcppExport SEXP _torch_cpp_torch_int32() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int32());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_int64
XPtrTorchDtype cpp_torch_int64();
RcppExport SEXP _torch_cpp_torch_int64() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_int64());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_bool
XPtrTorchDtype cpp_torch_bool();
RcppExport SEXP _torch_cpp_torch_bool() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_bool());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_quint8
XPtrTorchDtype cpp_torch_quint8();
RcppExport SEXP _torch_cpp_torch_quint8() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_quint8());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_qint8
XPtrTorchDtype cpp_torch_qint8();
RcppExport SEXP _torch_cpp_torch_qint8() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_qint8());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_qint32
XPtrTorchDtype cpp_torch_qint32();
RcppExport SEXP _torch_cpp_torch_qint32() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_qint32());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_chalf
torch::Dtype cpp_torch_chalf();
RcppExport SEXP _torch_cpp_torch_chalf() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_chalf());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_cfloat
torch::Dtype cpp_torch_cfloat();
RcppExport SEXP _torch_cpp_torch_cfloat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_cfloat());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_cdouble
torch::Dtype cpp_torch_cdouble();
RcppExport SEXP _torch_cpp_torch_cdouble() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_cdouble());
    return rcpp_result_gen;
END_RCPP
}
// cpp_set_default_dtype
void cpp_set_default_dtype(XPtrTorchDtype x);
RcppExport SEXP _torch_cpp_set_default_dtype(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type x(xSEXP);
    cpp_set_default_dtype(x);
    return R_NilValue;
END_RCPP
}
// cpp_get_default_dtype
XPtrTorchDtype cpp_get_default_dtype();
RcppExport SEXP _torch_cpp_get_default_dtype() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_get_default_dtype());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set_data_self_Tensor_new_data_Tensor
void cpp_torch_method_set_data_self_Tensor_new_data_Tensor(XPtrTorchTensor self, XPtrTorchTensor new_data);
RcppExport SEXP _torch_cpp_torch_method_set_data_self_Tensor_new_data_Tensor(SEXP selfSEXP, SEXP new_dataSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type new_data(new_dataSEXP);
    cpp_torch_method_set_data_self_Tensor_new_data_Tensor(self, new_data);
    return R_NilValue;
END_RCPP
}
// cpp_torch_method_data_self_Tensor
XPtrTorchTensor cpp_torch_method_data_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_data_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_data_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_leaf_self_Tensor
XPtrTorchbool cpp_torch_method_is_leaf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_leaf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_leaf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_output_nr_self_Tensor
XPtrTorchint64_t cpp_torch_method_output_nr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_output_nr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_output_nr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__version_self_Tensor
XPtrTorchint64_t cpp_torch_method__version_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__version_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__version_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_requires_grad__self_Tensor
XPtrTorchTensor cpp_torch_method_requires_grad__self_Tensor(XPtrTorchTensor self, XPtrTorchbool requires_grad);
RcppExport SEXP _torch_cpp_torch_method_requires_grad__self_Tensor(SEXP selfSEXP, SEXP requires_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type requires_grad(requires_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_requires_grad__self_Tensor(self, requires_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_retain_grad_self_Tensor
void cpp_torch_method_retain_grad_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_retain_grad_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    cpp_torch_method_retain_grad_self_Tensor(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_method_retains_grad_self_Tensor
XPtrTorchbool cpp_torch_method_retains_grad_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_retains_grad_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_retains_grad_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__fw_primal_self_Tensor_level_int64_t
XPtrTorchTensor cpp_torch_method__fw_primal_self_Tensor_level_int64_t(XPtrTorchTensor self, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_method__fw_primal_self_Tensor_level_int64_t(SEXP selfSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__fw_primal_self_Tensor_level_int64_t(self, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rename__self_Tensor_names_DimnameList
XPtrTorchTensor cpp_torch_method_rename__self_Tensor_names_DimnameList(XPtrTorchTensor self, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_method_rename__self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rename__self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rename_self_Tensor_names_DimnameList
XPtrTorchTensor cpp_torch_method_rename_self_Tensor_names_DimnameList(XPtrTorchTensor self, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_method_rename_self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rename_self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_align_to_self_Tensor_names_DimnameList
XPtrTorchTensor cpp_torch_method_align_to_self_Tensor_names_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList names);
RcppExport SEXP _torch_cpp_torch_method_align_to_self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_align_to_self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t
XPtrTorchTensor cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t(XPtrTorchTensor self, XPtrTorchDimnameList order, XPtrTorchint64_t ellipsis_idx);
RcppExport SEXP _torch_cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t(SEXP selfSEXP, SEXP orderSEXP, SEXP ellipsis_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type order(orderSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ellipsis_idx(ellipsis_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t(self, order, ellipsis_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_align_as_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_align_as_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_align_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_align_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_refine_names_self_Tensor_names_DimnameList
XPtrTorchTensor cpp_torch_method_refine_names_self_Tensor_names_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList names);
RcppExport SEXP _torch_cpp_torch_method_refine_names_self_Tensor_names_DimnameList(SEXP selfSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_refine_names_self_Tensor_names_DimnameList(self, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_abs_self_Tensor
XPtrTorchTensor cpp_torch_method_abs_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_abs_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_abs_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_abs__self_Tensor
XPtrTorchTensor cpp_torch_method_abs__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_abs__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_abs__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_absolute_self_Tensor
XPtrTorchTensor cpp_torch_method_absolute_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_absolute_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_absolute_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_absolute__self_Tensor
XPtrTorchTensor cpp_torch_method_absolute__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_absolute__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_absolute__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_angle_self_Tensor
XPtrTorchTensor cpp_torch_method_angle_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_angle_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_angle_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sgn_self_Tensor
XPtrTorchTensor cpp_torch_method_sgn_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sgn_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sgn_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sgn__self_Tensor
XPtrTorchTensor cpp_torch_method_sgn__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sgn__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sgn__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_chalf_self_Tensor
XPtrTorchTensor cpp_torch_method_chalf_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_chalf_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_chalf_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__conj_self_Tensor
XPtrTorchTensor cpp_torch_method__conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_conj_self_Tensor
XPtrTorchTensor cpp_torch_method_conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__conj_physical_self_Tensor
XPtrTorchTensor cpp_torch_method__conj_physical_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__conj_physical_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__conj_physical_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_conj_physical_self_Tensor
XPtrTorchTensor cpp_torch_method_conj_physical_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_conj_physical_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_conj_physical_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_conj_physical__self_Tensor
XPtrTorchTensor cpp_torch_method_conj_physical__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_conj_physical__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_conj_physical__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resolve_conj_self_Tensor
XPtrTorchTensor cpp_torch_method_resolve_conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_resolve_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resolve_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resolve_neg_self_Tensor
XPtrTorchTensor cpp_torch_method_resolve_neg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_resolve_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resolve_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__neg_view_self_Tensor
XPtrTorchTensor cpp_torch_method__neg_view_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__neg_view_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__neg_view_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_acos_self_Tensor
XPtrTorchTensor cpp_torch_method_acos_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_acos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_acos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_acos__self_Tensor
XPtrTorchTensor cpp_torch_method_acos__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_acos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_acos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arccos_self_Tensor
XPtrTorchTensor cpp_torch_method_arccos_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arccos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arccos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arccos__self_Tensor
XPtrTorchTensor cpp_torch_method_arccos__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arccos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arccos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_add_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_add_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_add__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_add__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add__self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_add_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_add_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_add__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_add__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_add__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_add__self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat, XPtrTorchTensor vec, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat(matSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat, XPtrTorchTensor vec, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat(matSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec1, XPtrTorchTensor vec2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec1, XPtrTorchTensor vec2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__is_all_true_self_Tensor
XPtrTorchTensor cpp_torch_method__is_all_true_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__is_all_true_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__is_all_true_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__is_any_true_self_Tensor
XPtrTorchTensor cpp_torch_method__is_any_true_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__is_any_true_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__is_any_true_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_all_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_all_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_all_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_all_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_all_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_all_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_all_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_all_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_allclose_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_method_allclose_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchdouble rtol, XPtrTorchdouble atol, XPtrTorchbool equal_nan);
RcppExport SEXP _torch_cpp_torch_method_allclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_allclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_any_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_any_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_any_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_any_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_any_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_any_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_any_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_any_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argmax_self_Tensor
XPtrTorchTensor cpp_torch_method_argmax_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_argmax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argmax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argmin_self_Tensor
XPtrTorchTensor cpp_torch_method_argmin_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_argmin_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argmin_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_acosh_self_Tensor
XPtrTorchTensor cpp_torch_method_acosh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_acosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_acosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_acosh__self_Tensor
XPtrTorchTensor cpp_torch_method_acosh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_acosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_acosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arccosh_self_Tensor
XPtrTorchTensor cpp_torch_method_arccosh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arccosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arccosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arccosh__self_Tensor
XPtrTorchTensor cpp_torch_method_arccosh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arccosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arccosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_asinh_self_Tensor
XPtrTorchTensor cpp_torch_method_asinh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_asinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_asinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_asinh__self_Tensor
XPtrTorchTensor cpp_torch_method_asinh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_asinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_asinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arcsinh_self_Tensor
XPtrTorchTensor cpp_torch_method_arcsinh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arcsinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arcsinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arcsinh__self_Tensor
XPtrTorchTensor cpp_torch_method_arcsinh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arcsinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arcsinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atanh_self_Tensor
XPtrTorchTensor cpp_torch_method_atanh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_atanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atanh__self_Tensor
XPtrTorchTensor cpp_torch_method_atanh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_atanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arctanh_self_Tensor
XPtrTorchTensor cpp_torch_method_arctanh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arctanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arctanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arctanh__self_Tensor
XPtrTorchTensor cpp_torch_method_arctanh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arctanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arctanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_asin_self_Tensor
XPtrTorchTensor cpp_torch_method_asin_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_asin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_asin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_asin__self_Tensor
XPtrTorchTensor cpp_torch_method_asin__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_asin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_asin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arcsin_self_Tensor
XPtrTorchTensor cpp_torch_method_arcsin_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arcsin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arcsin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arcsin__self_Tensor
XPtrTorchTensor cpp_torch_method_arcsin__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arcsin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arcsin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan_self_Tensor
XPtrTorchTensor cpp_torch_method_atan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_atan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan__self_Tensor
XPtrTorchTensor cpp_torch_method_atan__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_atan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arctan_self_Tensor
XPtrTorchTensor cpp_torch_method_arctan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arctan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arctan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arctan__self_Tensor
XPtrTorchTensor cpp_torch_method_arctan__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_arctan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arctan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli_self_Tensor
XPtrTorchTensor cpp_torch_method_bernoulli_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli__self_Tensor_p_Tensor
XPtrTorchTensor cpp_torch_method_bernoulli__self_Tensor_p_Tensor(XPtrTorchTensor self, XPtrTorchTensor p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli__self_Tensor_p_Tensor(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli__self_Tensor_p_Tensor(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli__self_Tensor_p_double
XPtrTorchTensor cpp_torch_method_bernoulli__self_Tensor_p_double(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli__self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli__self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bernoulli_self_Tensor_p_double
XPtrTorchTensor cpp_torch_method_bernoulli_self_Tensor_p_double(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_bernoulli_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bernoulli_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bincount_self_Tensor
XPtrTorchTensor cpp_torch_method_bincount_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor weights, XPtrTorchint64_t minlength);
RcppExport SEXP _torch_cpp_torch_method_bincount_self_Tensor(SEXP selfSEXP, SEXP weightsSEXP, SEXP minlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type minlength(minlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bincount_self_Tensor(self, weights, minlength));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_not_self_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_not_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_bitwise_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_not__self_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_not__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_bitwise_not__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_not__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_copysign_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_copysign_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_copysign_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_copysign_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_copysign__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_copysign__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_copysign__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_copysign__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_copysign_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_copysign_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_copysign_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_copysign_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_copysign__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_copysign__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_copysign__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_copysign__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_not_self_Tensor
XPtrTorchTensor cpp_torch_method_logical_not_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_logical_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_not__self_Tensor
XPtrTorchTensor cpp_torch_method_logical_not__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_logical_not__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_not__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_xor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logical_xor_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logical_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_xor__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logical_xor__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logical_xor__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_xor__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_and_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logical_and_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logical_and_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_and_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_and__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logical_and__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logical_and__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_and__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_or_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logical_or_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logical_or_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_or_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logical_or__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logical_or__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logical_or__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logical_or__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bmm_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method_bmm_self_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_method_bmm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bmm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_broadcast_to_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_broadcast_to_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_method_broadcast_to_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_broadcast_to_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ceil_self_Tensor
XPtrTorchTensor cpp_torch_method_ceil_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_ceil_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ceil_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ceil__self_Tensor
XPtrTorchTensor cpp_torch_method_ceil__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_ceil__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ceil__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t
XPtrTorchTensorList cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t(XPtrTorchTensor self, XPtrTorchint64_t chunks, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t(SEXP selfSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t(self, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_chunk_self_Tensor_chunks_int64_t
XPtrTorchTensorList cpp_torch_method_chunk_self_Tensor_chunks_int64_t(XPtrTorchTensor self, XPtrTorchint64_t chunks, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_chunk_self_Tensor_chunks_int64_t(SEXP selfSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_chunk_self_Tensor_chunks_int64_t(self, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tensor_split_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_method_tensor_split_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_tensor_split_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tensor_split_self_Tensor_sections_int64_t(self, sections, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tensor_split_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_method_tensor_split_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_tensor_split_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tensor_split_self_Tensor_indices_IntArrayRef(self, indices, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor
XPtrTorchTensorList cpp_torch_method_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor_indices_or_sections, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor(SEXP selfSEXP, SEXP tensor_indices_or_sectionsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor_indices_or_sections(tensor_indices_or_sectionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor(self, tensor_indices_or_sections, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_method_clamp_self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_method_clamp_self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_method_clamp_self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_method_clamp_self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp__self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_method_clamp__self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_method_clamp__self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp__self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp__self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_method_clamp__self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_method_clamp__self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp__self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_max_self_Tensor_max_Scalar
XPtrTorchTensor cpp_torch_method_clamp_max_self_Tensor_max_Scalar(XPtrTorchTensor self, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_method_clamp_max_self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_max_self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_max_self_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_method_clamp_max_self_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchTensor max);
RcppExport SEXP _torch_cpp_torch_method_clamp_max_self_Tensor_max_Tensor(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_max_self_Tensor_max_Tensor(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_max__self_Tensor_max_Scalar
XPtrTorchTensor cpp_torch_method_clamp_max__self_Tensor_max_Scalar(XPtrTorchTensor self, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_method_clamp_max__self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_max__self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_max__self_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_method_clamp_max__self_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchTensor max);
RcppExport SEXP _torch_cpp_torch_method_clamp_max__self_Tensor_max_Tensor(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_max__self_Tensor_max_Tensor(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_min_self_Tensor_min_Scalar
XPtrTorchTensor cpp_torch_method_clamp_min_self_Tensor_min_Scalar(XPtrTorchTensor self, XPtrTorchScalar min);
RcppExport SEXP _torch_cpp_torch_method_clamp_min_self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_min_self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_min_self_Tensor_min_Tensor
XPtrTorchTensor cpp_torch_method_clamp_min_self_Tensor_min_Tensor(XPtrTorchTensor self, XPtrTorchTensor min);
RcppExport SEXP _torch_cpp_torch_method_clamp_min_self_Tensor_min_Tensor(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_min_self_Tensor_min_Tensor(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_min__self_Tensor_min_Scalar
XPtrTorchTensor cpp_torch_method_clamp_min__self_Tensor_min_Scalar(XPtrTorchTensor self, XPtrTorchScalar min);
RcppExport SEXP _torch_cpp_torch_method_clamp_min__self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_min__self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clamp_min__self_Tensor_min_Tensor
XPtrTorchTensor cpp_torch_method_clamp_min__self_Tensor_min_Tensor(XPtrTorchTensor self, XPtrTorchTensor min);
RcppExport SEXP _torch_cpp_torch_method_clamp_min__self_Tensor_min_Tensor(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clamp_min__self_Tensor_min_Tensor(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clip_self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_method_clip_self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_method_clip_self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clip_self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clip_self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_method_clip_self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_method_clip_self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clip_self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clip__self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_method_clip__self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_method_clip__self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clip__self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clip__self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_method_clip__self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_method_clip__self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clip__self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_contiguous_self_Tensor
XPtrTorchTensor cpp_torch_method_contiguous_self_Tensor(XPtrTorchTensor self, XPtrTorchMemoryFormat memory_format);
RcppExport SEXP _torch_cpp_torch_method_contiguous_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchMemoryFormat >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_contiguous_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_copy__self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_copy__self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_method_copy__self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_copy__self_Tensor_src_Tensor(self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cos_self_Tensor
XPtrTorchTensor cpp_torch_method_cos_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_cos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cos__self_Tensor
XPtrTorchTensor cpp_torch_method_cos__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_cos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cosh_self_Tensor
XPtrTorchTensor cpp_torch_method_cosh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_cosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cosh__self_Tensor
XPtrTorchTensor cpp_torch_method_cosh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_cosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_count_nonzero_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_count_nonzero_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_count_nonzero_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_count_nonzero_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cov_self_Tensor
XPtrTorchTensor cpp_torch_method_cov_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t correction, XPtrTorchOptionalTensor fweights, XPtrTorchOptionalTensor aweights);
RcppExport SEXP _torch_cpp_torch_method_cov_self_Tensor(SEXP selfSEXP, SEXP correctionSEXP, SEXP fweightsSEXP, SEXP aweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type correction(correctionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type fweights(fweightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type aweights(aweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cov_self_Tensor(self, correction, fweights, aweights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_corrcoef_self_Tensor
XPtrTorchTensor cpp_torch_method_corrcoef_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_corrcoef_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_corrcoef_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cummax_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_cummax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_cummax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cummax_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cummax_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_cummax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_cummax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cummax_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cummin_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_cummin_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_cummin_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cummin_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cummin_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_cummin_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_cummin_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cummin_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumprod_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_cumprod_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumprod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumprod_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumprod__self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_cumprod__self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumprod__self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumprod__self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumprod_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_cumprod_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumprod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumprod_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumprod__self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_cumprod__self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumprod__self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumprod__self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumsum_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_cumsum_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumsum_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumsum_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumsum__self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_cumsum__self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumsum__self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumsum__self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumsum_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_cumsum_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumsum_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumsum_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cumsum__self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_cumsum__self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_cumsum__self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cumsum__self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diag_embed_self_Tensor
XPtrTorchTensor cpp_torch_method_diag_embed_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_method_diag_embed_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diag_embed_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diagflat_self_Tensor
XPtrTorchTensor cpp_torch_method_diagflat_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t offset);
RcppExport SEXP _torch_cpp_torch_method_diagflat_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diagflat_self_Tensor(self, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t
XPtrTorchTensor cpp_torch_method_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t(XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_method_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname
XPtrTorchTensor cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname(XPtrTorchTensor self, XPtrTorchDimname outdim, XPtrTorchDimname dim1, XPtrTorchDimname dim2, XPtrTorchint64_t offset);
RcppExport SEXP _torch_cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname(SEXP selfSEXP, SEXP outdimSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type outdim(outdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname(self, outdim, dim1, dim2, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar
XPtrTorchTensor cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar fill_value, XPtrTorchbool wrap);
RcppExport SEXP _torch_cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar(SEXP selfSEXP, SEXP fill_valueSEXP, SEXP wrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type wrap(wrapSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar(self, fill_value, wrap));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diff_self_Tensor
XPtrTorchTensor cpp_torch_method_diff_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t n, XPtrTorchindex_int64_t dim, XPtrTorchOptionalTensor prepend, XPtrTorchOptionalTensor append);
RcppExport SEXP _torch_cpp_torch_method_diff_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP prependSEXP, SEXP appendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type prepend(prependSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type append(appendSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diff_self_Tensor(self, n, dim, prepend, append));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_div_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_div_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_div__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_div__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div_self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_div_self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_div_self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div_self_Tensor_other_Tensor_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div__self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_div__self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_div__self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div__self_Tensor_other_Tensor_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_div_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_div_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_div__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_div__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div_self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_div_self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_div_self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div_self_Tensor_other_Scalar_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_div__self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_div__self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_div__self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_div__self_Tensor_other_Scalar_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_divide_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_divide_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_divide__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_divide__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_divide_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_divide_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_divide__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_divide__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide__self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_divide__self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_divide__self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide__self_Tensor_other_Tensor_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_divide__self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_method_divide__self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_method_divide__self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_divide__self_Tensor_other_Scalar_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_true_divide_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_true_divide_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_true_divide_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_true_divide_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_true_divide__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_true_divide__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_true_divide__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_true_divide__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_true_divide_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_true_divide_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_true_divide_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_true_divide_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_true_divide__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_true_divide__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_true_divide__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_true_divide__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dot_self_Tensor_tensor_Tensor
XPtrTorchTensor cpp_torch_method_dot_self_Tensor_tensor_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor);
RcppExport SEXP _torch_cpp_torch_method_dot_self_Tensor_tensor_Tensor(SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dot_self_Tensor_tensor_Tensor(self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_vdot_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_vdot_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_vdot_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_vdot_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef(self, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_empty_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_method_new_empty_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_method_new_empty_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_empty_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar
XPtrTorchTensor cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchScalar fill_value, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar(SEXP selfSEXP, SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar(self, size, fill_value, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef(self, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_new_ones_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_new_ones_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_method_new_ones_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_new_ones_self_Tensor_size_IntArrayRef(self, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resize__self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_resize__self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_resize__self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resize__self_Tensor_size_IntArrayRef(self, size, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erf_self_Tensor
XPtrTorchTensor cpp_torch_method_erf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_erf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erf__self_Tensor
XPtrTorchTensor cpp_torch_method_erf__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_erf__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erf__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfc_self_Tensor
XPtrTorchTensor cpp_torch_method_erfc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_erfc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfc__self_Tensor
XPtrTorchTensor cpp_torch_method_erfc__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_erfc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exp_self_Tensor
XPtrTorchTensor cpp_torch_method_exp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exp__self_Tensor
XPtrTorchTensor cpp_torch_method_exp__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_exp__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exp__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exp2_self_Tensor
XPtrTorchTensor cpp_torch_method_exp2_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_exp2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exp2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exp2__self_Tensor
XPtrTorchTensor cpp_torch_method_exp2__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_exp2__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exp2__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expm1_self_Tensor
XPtrTorchTensor cpp_torch_method_expm1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_expm1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expm1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expm1__self_Tensor
XPtrTorchTensor cpp_torch_method_expm1__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_expm1__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expm1__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expand_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_expand_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchbool implicit);
RcppExport SEXP _torch_cpp_torch_method_expand_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP implicitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type implicit(implicitSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expand_self_Tensor_size_IntArrayRef(self, size, implicit));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_expand_as_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_expand_as_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_expand_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_expand_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t
XPtrTorchTensor cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t start_dim, XPtrTorchindex_int64_t end_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type end_dim(end_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t(self, start_dim, end_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname
XPtrTorchTensor cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(XPtrTorchTensor self, XPtrTorchindex_int64_t start_dim, XPtrTorchindex_int64_t end_dim, XPtrTorchDimname out_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname
XPtrTorchTensor cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname start_dim, XPtrTorchDimname end_dim, XPtrTorchDimname out_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname
XPtrTorchTensor cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimnameList dims, XPtrTorchDimname out_dim);
RcppExport SEXP _torch_cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(SEXP selfSEXP, SEXP dimsSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(self, dims, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef
XPtrTorchTensor cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIntArrayRef sizes);
RcppExport SEXP _torch_cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef(self, dim, sizes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIntArrayRef sizes, XPtrTorchDimnameList names);
RcppExport SEXP _torch_cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP sizesSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(self, dim, sizes, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fill__self_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_fill__self_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_fill__self_Tensor_value_Scalar(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fill__self_Tensor_value_Scalar(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fill__self_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_fill__self_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_fill__self_Tensor_value_Tensor(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fill__self_Tensor_value_Tensor(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor_self_Tensor
XPtrTorchTensor cpp_torch_method_floor_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_floor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor__self_Tensor
XPtrTorchTensor cpp_torch_method_floor__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_floor__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor_divide_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_floor_divide_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_floor_divide_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor_divide_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor_divide__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_floor_divide__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_floor_divide__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor_divide__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor_divide_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_floor_divide_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_floor_divide_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor_divide_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_floor_divide__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_floor_divide__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_floor_divide__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_floor_divide__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_frac_self_Tensor
XPtrTorchTensor cpp_torch_method_frac_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_frac_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_frac_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_frac__self_Tensor
XPtrTorchTensor cpp_torch_method_frac__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_frac__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_frac__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gcd_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_gcd_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_gcd_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gcd_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gcd__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_gcd__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_gcd__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gcd__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lcm_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_lcm_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_lcm_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lcm_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lcm__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_lcm__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_lcm__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lcm__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_self_Tensor_indices_constc10Listc10optionalTensor
XPtrTorchTensor cpp_torch_method_index_self_Tensor_indices_constc10Listc10optionalTensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices);
RcppExport SEXP _torch_cpp_torch_method_index_self_Tensor_indices_constc10Listc10optionalTensor(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_self_Tensor_indices_constc10Listc10optionalTensor(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_method_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_method_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_method_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_method_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isclose_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_isclose_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchdouble rtol, XPtrTorchdouble atol, XPtrTorchbool equal_nan);
RcppExport SEXP _torch_cpp_torch_method_isclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isnan_self_Tensor
XPtrTorchTensor cpp_torch_method_isnan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_isnan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isnan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_distributed_self_Tensor
XPtrTorchbool cpp_torch_method_is_distributed_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_distributed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_distributed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_floating_point_self_Tensor
XPtrTorchbool cpp_torch_method_is_floating_point_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_floating_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_floating_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_complex_self_Tensor
XPtrTorchbool cpp_torch_method_is_complex_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_complex_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_complex_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_conj_self_Tensor
XPtrTorchbool cpp_torch_method_is_conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__is_zerotensor_self_Tensor
XPtrTorchbool cpp_torch_method__is_zerotensor_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__is_zerotensor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__is_zerotensor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_neg_self_Tensor
XPtrTorchbool cpp_torch_method_is_neg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isreal_self_Tensor
XPtrTorchTensor cpp_torch_method_isreal_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_isreal_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isreal_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_nonzero_self_Tensor
XPtrTorchbool cpp_torch_method_is_nonzero_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_same_size_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_method_is_same_size_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_is_same_size_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_same_size_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_signed_self_Tensor
XPtrTorchbool cpp_torch_method_is_signed_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_signed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_signed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_inference_self_Tensor
XPtrTorchbool cpp_torch_method_is_inference_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_inference_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_inference_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_kron_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_kron_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_kron_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_kron_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_int64_t
Rcpp::List cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_int64_t(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_int64_t(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname
Rcpp::List cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nan_to_num_self_Tensor
XPtrTorchTensor cpp_torch_method_nan_to_num_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble nan, XPtrTorchOptionaldouble posinf, XPtrTorchOptionaldouble neginf);
RcppExport SEXP _torch_cpp_torch_method_nan_to_num_self_Tensor(SEXP selfSEXP, SEXP nanSEXP, SEXP posinfSEXP, SEXP neginfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type nan(nanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type posinf(posinfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type neginf(neginfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nan_to_num_self_Tensor(self, nan, posinf, neginf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nan_to_num__self_Tensor
XPtrTorchTensor cpp_torch_method_nan_to_num__self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble nan, XPtrTorchOptionaldouble posinf, XPtrTorchOptionaldouble neginf);
RcppExport SEXP _torch_cpp_torch_method_nan_to_num__self_Tensor(SEXP selfSEXP, SEXP nanSEXP, SEXP posinfSEXP, SEXP neginfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type nan(nanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type posinf(posinfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type neginf(neginfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nan_to_num__self_Tensor(self, nan, posinf, neginf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ldexp_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_ldexp_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_ldexp_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ldexp_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ldexp__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_ldexp__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_ldexp__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ldexp__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_self_Tensor
XPtrTorchTensor cpp_torch_method_log_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log__self_Tensor
XPtrTorchTensor cpp_torch_method_log__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log10_self_Tensor
XPtrTorchTensor cpp_torch_method_log10_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log10_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log10_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log10__self_Tensor
XPtrTorchTensor cpp_torch_method_log10__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log10__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log10__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log1p_self_Tensor
XPtrTorchTensor cpp_torch_method_log1p_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log1p_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log1p_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log1p__self_Tensor
XPtrTorchTensor cpp_torch_method_log1p__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log1p__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log1p__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log2_self_Tensor
XPtrTorchTensor cpp_torch_method_log2_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log2__self_Tensor
XPtrTorchTensor cpp_torch_method_log2__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_log2__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log2__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logaddexp_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logaddexp_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logaddexp_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logaddexp_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logaddexp2_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_logaddexp2_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_logaddexp2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logaddexp2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_xlogy_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_xlogy_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_xlogy_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_xlogy_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_xlogy_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_xlogy_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_xlogy_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_xlogy_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_xlogy__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_xlogy__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_xlogy__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_xlogy__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_xlogy__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_xlogy__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_xlogy__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_xlogy__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_log_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_log_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_softmax_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_log_softmax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_log_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_matmul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_matmul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_matmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_matmul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_matrix_power_self_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_method_matrix_power_self_Tensor_n_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_method_matrix_power_self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_matrix_power_self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_matrix_exp_self_Tensor
XPtrTorchTensor cpp_torch_method_matrix_exp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_matrix_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_matrix_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_aminmax_self_Tensor
Rcpp::List cpp_torch_method_aminmax_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_aminmax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_aminmax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_max_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_max_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_amax_self_Tensor
XPtrTorchTensor cpp_torch_method_amax_self_Tensor(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_amax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_amax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mean_self_Tensor
XPtrTorchTensor cpp_torch_method_mean_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_mean_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mean_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mean_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_mean_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mean_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mean_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_method_mean_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mean_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nanmean_self_Tensor
XPtrTorchTensor cpp_torch_method_nanmean_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_nanmean_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nanmean_self_Tensor(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_median_self_Tensor
XPtrTorchTensor cpp_torch_method_median_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_median_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_median_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_median_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_median_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_median_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_median_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_median_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_median_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_median_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_median_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nanmedian_self_Tensor
XPtrTorchTensor cpp_torch_method_nanmedian_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_nanmedian_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nanmedian_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nanmedian_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_nanmedian_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_nanmedian_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nanmedian_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nanmedian_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_nanmedian_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_nanmedian_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nanmedian_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_min_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_min_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_amin_self_Tensor
XPtrTorchTensor cpp_torch_method_amin_self_Tensor(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_amin_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_amin_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mm_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method_mm_self_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_method_mm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mode_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_mode_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_mode_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mode_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mode_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_mode_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_mode_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mode_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_mul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_mul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_mul__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_mul__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_mul_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_mul_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mul__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_mul__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_mul__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mul__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_multiply_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_multiply_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_multiply_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_multiply_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_multiply__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_multiply__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_multiply__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_multiply__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_multiply_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_multiply_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_multiply_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_multiply_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_multiply__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_multiply__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_multiply__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_multiply__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mv_self_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_method_mv_self_Tensor_vec_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec);
RcppExport SEXP _torch_cpp_torch_method_mv_self_Tensor_vec_Tensor(SEXP selfSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mv_self_Tensor_vec_Tensor(self, vec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mvlgamma_self_Tensor_p_int64_t
XPtrTorchTensor cpp_torch_method_mvlgamma_self_Tensor_p_int64_t(XPtrTorchTensor self, XPtrTorchint64_t p);
RcppExport SEXP _torch_cpp_torch_method_mvlgamma_self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mvlgamma_self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mvlgamma__self_Tensor_p_int64_t
XPtrTorchTensor cpp_torch_method_mvlgamma__self_Tensor_p_int64_t(XPtrTorchTensor self, XPtrTorchint64_t p);
RcppExport SEXP _torch_cpp_torch_method_mvlgamma__self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mvlgamma__self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
XPtrTorchTensor cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
XPtrTorchTensor cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t
XPtrTorchTensor cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchTensor start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_permute_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_method_permute_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_method_permute_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_permute_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef
XPtrTorchTensor cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef source, XPtrTorchIntArrayRef destination);
RcppExport SEXP _torch_cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t
XPtrTorchTensor cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t(XPtrTorchTensor self, XPtrTorchint64_t source, XPtrTorchint64_t destination);
RcppExport SEXP _torch_cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef
XPtrTorchTensor cpp_torch_method_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef source, XPtrTorchIntArrayRef destination);
RcppExport SEXP _torch_cpp_torch_method_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_moveaxis_self_Tensor_source_int64_t_destination_int64_t
XPtrTorchTensor cpp_torch_method_moveaxis_self_Tensor_source_int64_t_destination_int64_t(XPtrTorchTensor self, XPtrTorchint64_t source, XPtrTorchint64_t destination);
RcppExport SEXP _torch_cpp_torch_method_moveaxis_self_Tensor_source_int64_t_destination_int64_t(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_moveaxis_self_Tensor_source_int64_t_destination_int64_t(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_numpy_T_self_Tensor
XPtrTorchTensor cpp_torch_method_numpy_T_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_numpy_T_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_numpy_T_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_matrix_H_self_Tensor
XPtrTorchTensor cpp_torch_method_matrix_H_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_matrix_H_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_matrix_H_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mT_self_Tensor
XPtrTorchTensor cpp_torch_method_mT_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_mT_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mT_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_mH_self_Tensor
XPtrTorchTensor cpp_torch_method_mH_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_mH_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_mH_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_adjoint_self_Tensor
XPtrTorchTensor cpp_torch_method_adjoint_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_adjoint_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_adjoint_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_pinned_self_Tensor
XPtrTorchbool cpp_torch_method_is_pinned_self_Tensor(XPtrTorchTensor self, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_method_is_pinned_self_Tensor(SEXP selfSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_pinned_self_Tensor(self, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pin_memory_self_Tensor
XPtrTorchTensor cpp_torch_method_pin_memory_self_Tensor(XPtrTorchTensor self, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_method_pin_memory_self_Tensor(SEXP selfSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pin_memory_self_Tensor(self, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pinverse_self_Tensor
XPtrTorchTensor cpp_torch_method_pinverse_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble rcond);
RcppExport SEXP _torch_cpp_torch_method_pinverse_self_Tensor(SEXP selfSEXP, SEXP rcondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rcond(rcondSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pinverse_self_Tensor(self, rcond));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rad2deg_self_Tensor
XPtrTorchTensor cpp_torch_method_rad2deg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_rad2deg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rad2deg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rad2deg__self_Tensor
XPtrTorchTensor cpp_torch_method_rad2deg__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_rad2deg__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rad2deg__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_deg2rad_self_Tensor
XPtrTorchTensor cpp_torch_method_deg2rad_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_deg2rad_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_deg2rad_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_deg2rad__self_Tensor
XPtrTorchTensor cpp_torch_method_deg2rad__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_deg2rad__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_deg2rad__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ravel_self_Tensor
XPtrTorchTensor cpp_torch_method_ravel_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_ravel_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ravel_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reciprocal_self_Tensor
XPtrTorchTensor cpp_torch_method_reciprocal_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_reciprocal_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reciprocal_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reciprocal__self_Tensor
XPtrTorchTensor cpp_torch_method_reciprocal__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_reciprocal__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reciprocal__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_neg_self_Tensor
XPtrTorchTensor cpp_torch_method_neg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_neg__self_Tensor
XPtrTorchTensor cpp_torch_method_neg__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_neg__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_neg__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_negative_self_Tensor
XPtrTorchTensor cpp_torch_method_negative_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_negative_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_negative_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_negative__self_Tensor
XPtrTorchTensor cpp_torch_method_negative__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_negative__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_negative__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef
XPtrTorchTensor cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef repeats);
RcppExport SEXP _torch_cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef(SEXP selfSEXP, SEXP repeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type repeats(repeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef(self, repeats));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor
XPtrTorchTensor cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor(XPtrTorchTensor self, XPtrTorchTensor repeats, XPtrTorchoptional_index_int64_t dim, XPtrTorchoptional_int64_t output_size);
RcppExport SEXP _torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor(self, repeats, dim, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t
XPtrTorchTensor cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t(XPtrTorchTensor self, XPtrTorchint64_t repeats, XPtrTorchoptional_index_int64_t dim, XPtrTorchoptional_int64_t output_size);
RcppExport SEXP _torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t(self, repeats, dim, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef
XPtrTorchTensor cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef shape);
RcppExport SEXP _torch_cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_method__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_method__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_reshape_as_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_reshape_as_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_reshape_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_reshape_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_round_self_Tensor
XPtrTorchTensor cpp_torch_method_round_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_round_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_round_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_round__self_Tensor
XPtrTorchTensor cpp_torch_method_round__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_round__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_round__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_round_self_Tensor_decimals_int64_t
XPtrTorchTensor cpp_torch_method_round_self_Tensor_decimals_int64_t(XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_method_round_self_Tensor_decimals_int64_t(SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_round_self_Tensor_decimals_int64_t(self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_round__self_Tensor_decimals_int64_t
XPtrTorchTensor cpp_torch_method_round__self_Tensor_decimals_int64_t(XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_method_round__self_Tensor_decimals_int64_t(SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_round__self_Tensor_decimals_int64_t(self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_relu_self_Tensor
XPtrTorchTensor cpp_torch_method_relu_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_relu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_relu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_relu__self_Tensor
XPtrTorchTensor cpp_torch_method_relu__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_relu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_relu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prelu_self_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_method_prelu_self_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_method_prelu_self_Tensor_weight_Tensor(SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prelu_self_Tensor_weight_Tensor(self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hardshrink_self_Tensor
XPtrTorchTensor cpp_torch_method_hardshrink_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_method_hardshrink_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hardshrink_self_Tensor(self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar
XPtrTorchTensor cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(XPtrTorchTensor grad_out, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(SEXP grad_outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(grad_out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rsqrt_self_Tensor
XPtrTorchTensor cpp_torch_method_rsqrt_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_rsqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rsqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rsqrt__self_Tensor
XPtrTorchTensor cpp_torch_method_rsqrt__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_rsqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rsqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t
XPtrTorchTensor cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sigmoid_self_Tensor
XPtrTorchTensor cpp_torch_method_sigmoid_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sigmoid__self_Tensor
XPtrTorchTensor cpp_torch_method_sigmoid__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sigmoid__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sigmoid__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logit_self_Tensor
XPtrTorchTensor cpp_torch_method_logit_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_method_logit_self_Tensor(SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logit_self_Tensor(self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logit__self_Tensor
XPtrTorchTensor cpp_torch_method_logit__self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_method_logit__self_Tensor(SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logit__self_Tensor(self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sin_self_Tensor
XPtrTorchTensor cpp_torch_method_sin_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sin__self_Tensor
XPtrTorchTensor cpp_torch_method_sin__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sinc_self_Tensor
XPtrTorchTensor cpp_torch_method_sinc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sinc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sinc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sinc__self_Tensor
XPtrTorchTensor cpp_torch_method_sinc__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sinc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sinc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sinh_self_Tensor
XPtrTorchTensor cpp_torch_method_sinh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sinh__self_Tensor
XPtrTorchTensor cpp_torch_method_sinh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_detach_self_Tensor
XPtrTorchTensor cpp_torch_method_detach_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_detach_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_detach_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_detach__self_Tensor
XPtrTorchTensor cpp_torch_method_detach__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_detach__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_detach__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_size_self_Tensor_dim_Dimname
XPtrTorchint64_t cpp_torch_method_size_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_size_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_size_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_slice_self_Tensor
XPtrTorchTensor cpp_torch_method_slice_self_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_method_slice_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_slice_self_Tensor(self, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_slice_scatter_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_slice_scatter_self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_method_slice_scatter_self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_slice_scatter_self_Tensor_src_Tensor(self, src, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_method_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_method_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP srcSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(self, src, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diagonal_scatter_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_diagonal_scatter_self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_method_diagonal_scatter_self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diagonal_scatter_self_Tensor_src_Tensor(self, src, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_method_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_method_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP srcSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(self, src, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_smm_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method_smm_self_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_method_smm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_smm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_softmax_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_softmax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t
XPtrTorchTensorList cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t(XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_split_self_Tensor_split_size_int64_t
XPtrTorchTensorList cpp_torch_method_split_self_Tensor_split_size_int64_t(XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_split_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_split_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_split_self_Tensor_split_size_IntArrayRef
XPtrTorchTensorList cpp_torch_method_split_self_Tensor_split_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_split_self_Tensor_split_size_IntArrayRef(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_split_self_Tensor_split_size_IntArrayRef(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef
XPtrTorchTensorList cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef
XPtrTorchTensorList cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hsplit_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_method_hsplit_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections);
RcppExport SEXP _torch_cpp_torch_method_hsplit_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hsplit_self_Tensor_sections_int64_t(self, sections));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hsplit_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_method_hsplit_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices);
RcppExport SEXP _torch_cpp_torch_method_hsplit_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hsplit_self_Tensor_indices_IntArrayRef(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_vsplit_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_method_vsplit_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections);
RcppExport SEXP _torch_cpp_torch_method_vsplit_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_vsplit_self_Tensor_sections_int64_t(self, sections));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_vsplit_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_method_vsplit_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices);
RcppExport SEXP _torch_cpp_torch_method_vsplit_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_vsplit_self_Tensor_indices_IntArrayRef(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dsplit_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_method_dsplit_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections);
RcppExport SEXP _torch_cpp_torch_method_dsplit_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dsplit_self_Tensor_sections_int64_t(self, sections));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dsplit_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_method_dsplit_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices);
RcppExport SEXP _torch_cpp_torch_method_dsplit_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dsplit_self_Tensor_indices_IntArrayRef(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor
XPtrTorchTensor cpp_torch_method_squeeze_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_squeeze_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_squeeze_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_squeeze_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor
XPtrTorchTensor cpp_torch_method_squeeze__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_squeeze__self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_squeeze__self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_squeeze__self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_squeeze__self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_squeeze__self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_squeeze__self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_stft_self_Tensor_n_fft_int64_t
XPtrTorchTensor cpp_torch_method_stft_self_Tensor_n_fft_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n_fft, XPtrTorchoptional_int64_t hop_length, XPtrTorchoptional_int64_t win_length, XPtrTorchOptionalTensor window, XPtrTorchbool center, XPtrTorchstring_view pad_mode, XPtrTorchbool normalized, XPtrTorchoptional_bool onesided, XPtrTorchoptional_bool return_complex);
RcppExport SEXP _torch_cpp_torch_method_stft_self_Tensor_n_fft_int64_t(SEXP selfSEXP, SEXP n_fftSEXP, SEXP hop_lengthSEXP, SEXP win_lengthSEXP, SEXP windowSEXP, SEXP centerSEXP, SEXP pad_modeSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP return_complexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n_fft(n_fftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type hop_length(hop_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type win_length(win_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type window(windowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type pad_mode(pad_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type return_complex(return_complexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_stft_self_Tensor_n_fft_int64_t(self, n_fft, hop_length, win_length, window, center, pad_mode, normalized, onesided, return_complex));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_istft_self_Tensor_n_fft_int64_t
XPtrTorchTensor cpp_torch_method_istft_self_Tensor_n_fft_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n_fft, XPtrTorchoptional_int64_t hop_length, XPtrTorchoptional_int64_t win_length, XPtrTorchOptionalTensor window, XPtrTorchbool center, XPtrTorchbool normalized, XPtrTorchoptional_bool onesided, XPtrTorchoptional_int64_t length, XPtrTorchbool return_complex);
RcppExport SEXP _torch_cpp_torch_method_istft_self_Tensor_n_fft_int64_t(SEXP selfSEXP, SEXP n_fftSEXP, SEXP hop_lengthSEXP, SEXP win_lengthSEXP, SEXP windowSEXP, SEXP centerSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP lengthSEXP, SEXP return_complexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n_fft(n_fftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type hop_length(hop_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type win_length(win_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type window(windowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_complex(return_complexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_istft_self_Tensor_n_fft_int64_t(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length, return_complex));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_stride_self_Tensor_dim_int64_t
XPtrTorchint64_t cpp_torch_method_stride_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_stride_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_stride_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_stride_self_Tensor_dim_Dimname
XPtrTorchint64_t cpp_torch_method_stride_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_stride_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_stride_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_self_Tensor
XPtrTorchTensor cpp_torch_method_sum_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_sum_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_sum_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_method_sum_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_sum_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nansum_self_Tensor
XPtrTorchTensor cpp_torch_method_nansum_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_nansum_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nansum_self_Tensor(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sqrt_self_Tensor
XPtrTorchTensor cpp_torch_method_sqrt_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sqrt__self_Tensor
XPtrTorchTensor cpp_torch_method_sqrt__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_square_self_Tensor
XPtrTorchTensor cpp_torch_method_square_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_square_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_square_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_square__self_Tensor
XPtrTorchTensor cpp_torch_method_square__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_square__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_square__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_std_self_Tensor
XPtrTorchTensor cpp_torch_method_std_self_Tensor(XPtrTorchTensor self, XPtrTorchbool unbiased);
RcppExport SEXP _torch_cpp_torch_method_std_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_std_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_std_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_std_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_std_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_std_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_std_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_method_std_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_std_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_std_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prod_self_Tensor
XPtrTorchTensor cpp_torch_method_prod_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_prod_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prod_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prod_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_prod_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_prod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prod_self_Tensor_dim_int64_t(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_prod_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_prod_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_prod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_prod_self_Tensor_dim_Dimname(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_t_self_Tensor
XPtrTorchTensor cpp_torch_method_t_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_t_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_t_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_t__self_Tensor
XPtrTorchTensor cpp_torch_method_t__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_t__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_t__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tan_self_Tensor
XPtrTorchTensor cpp_torch_method_tan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_tan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tan__self_Tensor
XPtrTorchTensor cpp_torch_method_tan__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_tan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tanh_self_Tensor
XPtrTorchTensor cpp_torch_method_tanh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_tanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tanh__self_Tensor
XPtrTorchTensor cpp_torch_method_tanh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_tanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tile_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_method_tile_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_method_tile_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tile_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname
XPtrTorchTensor cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim0, XPtrTorchDimname dim1);
RcppExport SEXP _torch_cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flip_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_method_flip_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_method_flip_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flip_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fliplr_self_Tensor
XPtrTorchTensor cpp_torch_method_fliplr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_fliplr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fliplr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_flipud_self_Tensor
XPtrTorchTensor cpp_torch_method_flipud_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_flipud_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_flipud_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef
XPtrTorchTensor cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef shifts, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef(SEXP selfSEXP, SEXP shiftsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shifts(shiftsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef(self, shifts, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_rot90_self_Tensor
XPtrTorchTensor cpp_torch_method_rot90_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_method_rot90_self_Tensor(SEXP selfSEXP, SEXP kSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_rot90_self_Tensor(self, k, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__nested_tensor_size_self_Tensor
XPtrTorchTensor cpp_torch_method__nested_tensor_size_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__nested_tensor_size_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__nested_tensor_size_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__nested_tensor_strides_self_Tensor
XPtrTorchTensor cpp_torch_method__nested_tensor_strides_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__nested_tensor_strides_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__nested_tensor_strides_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__nested_tensor_offsets_self_Tensor
XPtrTorchIntArrayRef cpp_torch_method__nested_tensor_offsets_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__nested_tensor_offsets_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__nested_tensor_offsets_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_trunc_self_Tensor
XPtrTorchTensor cpp_torch_method_trunc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_trunc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_trunc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_trunc__self_Tensor
XPtrTorchTensor cpp_torch_method_trunc__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_trunc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_trunc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fix_self_Tensor
XPtrTorchTensor cpp_torch_method_fix_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_fix_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fix_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fix__self_Tensor
XPtrTorchTensor cpp_torch_method_fix__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_fix__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fix__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_type_as_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_type_as_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_type_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_type_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_var_self_Tensor
XPtrTorchTensor cpp_torch_method_var_self_Tensor(XPtrTorchTensor self, XPtrTorchbool unbiased);
RcppExport SEXP _torch_cpp_torch_method_var_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_var_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_var_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_method_var_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_var_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_var_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_var_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_method_var_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_var_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_var_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_view_as_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_view_as_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_view_as_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_view_as_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor condition, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_where_condition_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_where_condition_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor condition, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Scalar(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_where_condition_Tensor_self_Tensor_other_Scalar(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType
XPtrTorchTensor cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType(self, p, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_method_norm_self_Tensor_p_Scalar(XPtrTorchTensor self, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool
XPtrTorchTensor cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool
XPtrTorchTensor cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDimnameList dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_frexp_self_Tensor
Rcpp::List cpp_torch_method_frexp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_frexp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_frexp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_clone_self_Tensor
XPtrTorchTensor cpp_torch_method_clone_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_clone_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_clone_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_positive_self_Tensor
XPtrTorchTensor cpp_torch_method_positive_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_positive_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_positive_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resize_as__self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_method_resize_as__self_Tensor_the_template_Tensor(XPtrTorchTensor self, XPtrTorchTensor the_template, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_resize_as__self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resize_as__self_Tensor_the_template_Tensor(self, the_template, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_resize_as_sparse__self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_method_resize_as_sparse__self_Tensor_the_template_Tensor(XPtrTorchTensor self, XPtrTorchTensor the_template);
RcppExport SEXP _torch_cpp_torch_method_resize_as_sparse__self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_resize_as_sparse__self_Tensor_the_template_Tensor(self, the_template));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_zero__self_Tensor
XPtrTorchTensor cpp_torch_method_zero__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_zero__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_zero__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_sub_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_sub_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_sub__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_sub__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub__self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_sub_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_sub_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sub__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_sub__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_sub__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sub__self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_subtract_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_subtract_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_subtract_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_subtract_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_subtract__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_subtract__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_subtract__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_subtract__self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_subtract_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_subtract_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_subtract_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_subtract_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_subtract__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_subtract__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_subtract__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_subtract__self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_heaviside_self_Tensor_values_Tensor
XPtrTorchTensor cpp_torch_method_heaviside_self_Tensor_values_Tensor(XPtrTorchTensor self, XPtrTorchTensor values);
RcppExport SEXP _torch_cpp_torch_method_heaviside_self_Tensor_values_Tensor(SEXP selfSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_heaviside_self_Tensor_values_Tensor(self, values));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_heaviside__self_Tensor_values_Tensor
XPtrTorchTensor cpp_torch_method_heaviside__self_Tensor_values_Tensor(XPtrTorchTensor self, XPtrTorchTensor values);
RcppExport SEXP _torch_cpp_torch_method_heaviside__self_Tensor_values_Tensor(SEXP selfSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_heaviside__self_Tensor_values_Tensor(self, values));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_method__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha, XPtrTorchbool use_gelu);
RcppExport SEXP _torch_cpp_torch_method__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP use_geluSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha, use_gelu));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
XPtrTorchTensor cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
XPtrTorchTensor cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor(self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_dense_self_Tensor
XPtrTorchTensor cpp_torch_method_to_dense_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_to_dense_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_dense_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__to_dense_self_Tensor
XPtrTorchTensor cpp_torch_method__to_dense_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method__to_dense_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__to_dense_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sparse_dim_self_Tensor
XPtrTorchint64_t cpp_torch_method_sparse_dim_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sparse_dim_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sparse_dim_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__dimI_self_Tensor
XPtrTorchint64_t cpp_torch_method__dimI_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__dimI_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__dimI_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dense_dim_self_Tensor
XPtrTorchint64_t cpp_torch_method_dense_dim_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_dense_dim_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dense_dim_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__dimV_self_Tensor
XPtrTorchint64_t cpp_torch_method__dimV_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__dimV_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__dimV_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__nnz_self_Tensor
XPtrTorchint64_t cpp_torch_method__nnz_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__nnz_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__nnz_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_coalesce_self_Tensor
XPtrTorchTensor cpp_torch_method_coalesce_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_coalesce_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_coalesce_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_coalesced_self_Tensor
XPtrTorchbool cpp_torch_method_is_coalesced_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_is_coalesced_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_coalesced_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__indices_self_Tensor
XPtrTorchTensor cpp_torch_method__indices_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__values_self_Tensor
XPtrTorchTensor cpp_torch_method__values_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method__values_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__values_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__coalesced__self_Tensor_coalesced_bool
XPtrTorchTensor cpp_torch_method__coalesced__self_Tensor_coalesced_bool(XPtrTorchTensor self, XPtrTorchbool coalesced);
RcppExport SEXP _torch_cpp_torch_method__coalesced__self_Tensor_coalesced_bool(SEXP selfSEXP, SEXP coalescedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type coalesced(coalescedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__coalesced__self_Tensor_coalesced_bool(self, coalesced));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_indices_self_Tensor
XPtrTorchTensor cpp_torch_method_indices_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_values_self_Tensor
XPtrTorchTensor cpp_torch_method_values_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_values_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_values_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_crow_indices_self_Tensor
XPtrTorchTensor cpp_torch_method_crow_indices_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_crow_indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_crow_indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_col_indices_self_Tensor
XPtrTorchTensor cpp_torch_method_col_indices_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_col_indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_col_indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ccol_indices_self_Tensor
XPtrTorchTensor cpp_torch_method_ccol_indices_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_ccol_indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ccol_indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_row_indices_self_Tensor
XPtrTorchTensor cpp_torch_method_row_indices_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_row_indices_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_row_indices_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unbind_self_Tensor_dim_int64_t
XPtrTorchTensorList cpp_torch_method_unbind_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_unbind_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unbind_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unbind_self_Tensor_dim_Dimname
XPtrTorchTensorList cpp_torch_method_unbind_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_method_unbind_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unbind_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t
XPtrTorchTensor cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sparse_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t(SEXP selfSEXP, SEXP sparse_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t(self, sparse_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_self_Tensor
XPtrTorchTensor cpp_torch_method_to_sparse_self_Tensor(XPtrTorchTensor self, XPtrTorchLayout layout, XPtrTorchOptionalIntArrayRef blocksize, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_self_Tensor(SEXP selfSEXP, SEXP layoutSEXP, SEXP blocksizeSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_self_Tensor(self, layout, blocksize, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_csr_self_Tensor
XPtrTorchTensor cpp_torch_method_to_sparse_csr_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_csr_self_Tensor(SEXP selfSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_csr_self_Tensor(self, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_csc_self_Tensor
XPtrTorchTensor cpp_torch_method_to_sparse_csc_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_csc_self_Tensor(SEXP selfSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_csc_self_Tensor(self, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_bsr_self_Tensor_blocksize_IntArrayRef
XPtrTorchTensor cpp_torch_method_to_sparse_bsr_self_Tensor_blocksize_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef blocksize, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_bsr_self_Tensor_blocksize_IntArrayRef(SEXP selfSEXP, SEXP blocksizeSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_bsr_self_Tensor_blocksize_IntArrayRef(self, blocksize, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_sparse_bsc_self_Tensor_blocksize_IntArrayRef
XPtrTorchTensor cpp_torch_method_to_sparse_bsc_self_Tensor_blocksize_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef blocksize, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_method_to_sparse_bsc_self_Tensor_blocksize_IntArrayRef(SEXP selfSEXP, SEXP blocksizeSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_sparse_bsc_self_Tensor_blocksize_IntArrayRef(self, blocksize, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_mkldnn_self_Tensor
XPtrTorchTensor cpp_torch_method_to_mkldnn_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_method_to_mkldnn_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_mkldnn_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dequantize_self_Tensor
XPtrTorchTensor cpp_torch_method_dequantize_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_dequantize_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dequantize_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_scale_self_Tensor
XPtrTorchdouble cpp_torch_method_q_scale_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_q_scale_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_scale_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_zero_point_self_Tensor
XPtrTorchint64_t cpp_torch_method_q_zero_point_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_q_zero_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_zero_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_per_channel_scales_self_Tensor
XPtrTorchTensor cpp_torch_method_q_per_channel_scales_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_q_per_channel_scales_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_per_channel_scales_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_per_channel_zero_points_self_Tensor
XPtrTorchTensor cpp_torch_method_q_per_channel_zero_points_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_q_per_channel_zero_points_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_per_channel_zero_points_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_q_per_channel_axis_self_Tensor
XPtrTorchint64_t cpp_torch_method_q_per_channel_axis_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_q_per_channel_axis_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_q_per_channel_axis_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_int_repr_self_Tensor
XPtrTorchTensor cpp_torch_method_int_repr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_int_repr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_int_repr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_qscheme_self_Tensor
Rcpp::XPtr<XPtrTorchQScheme> cpp_torch_method_qscheme_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_qscheme_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_qscheme_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__autocast_to_reduced_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool_cuda_dtype_ScalarType_cpu_dtype_ScalarType
XPtrTorchTensor cpp_torch_method__autocast_to_reduced_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool_cuda_dtype_ScalarType_cpu_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchbool cuda_enabled, XPtrTorchbool cpu_enabled, XPtrTorchDtype cuda_dtype, XPtrTorchDtype cpu_dtype);
RcppExport SEXP _torch_cpp_torch_method__autocast_to_reduced_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool_cuda_dtype_ScalarType_cpu_dtype_ScalarType(SEXP selfSEXP, SEXP cuda_enabledSEXP, SEXP cpu_enabledSEXP, SEXP cuda_dtypeSEXP, SEXP cpu_dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cuda_enabled(cuda_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cpu_enabled(cpu_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type cuda_dtype(cuda_dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type cpu_dtype(cpu_dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__autocast_to_reduced_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool_cuda_dtype_ScalarType_cpu_dtype_ScalarType(self, cuda_enabled, cpu_enabled, cuda_dtype, cpu_dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method__autocast_to_full_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool
XPtrTorchTensor cpp_torch_method__autocast_to_full_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool(XPtrTorchTensor self, XPtrTorchbool cuda_enabled, XPtrTorchbool cpu_enabled);
RcppExport SEXP _torch_cpp_torch_method__autocast_to_full_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool(SEXP selfSEXP, SEXP cuda_enabledSEXP, SEXP cpu_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cuda_enabled(cuda_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cpu_enabled(cpu_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method__autocast_to_full_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool(self, cuda_enabled, cpu_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor
XPtrTorchTensor cpp_torch_method_to_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchbool non_blocking, XPtrTorchbool copy, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor(self, options, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType
XPtrTorchTensor cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchDevice device, XPtrTorchDtype dtype, XPtrTorchbool non_blocking, XPtrTorchbool copy, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType(SEXP selfSEXP, SEXP deviceSEXP, SEXP dtypeSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType(self, device, dtype, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_method_to_self_Tensor_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchDtype dtype, XPtrTorchbool non_blocking, XPtrTorchbool copy, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP dtypeSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_dtype_ScalarType(self, dtype, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_to_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchbool non_blocking, XPtrTorchbool copy, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_method_to_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP non_blockingSEXP, SEXP copySEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type copy(copySEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_self_Tensor_other_Tensor(self, other, non_blocking, copy, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_item_self_Tensor
XPtrTorchScalar cpp_torch_method_item_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_item_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_item_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Storage
XPtrTorchTensor cpp_torch_method_set__self_Tensor_source_Storage(XPtrTorchTensor self, Rcpp::XPtr<XPtrTorch> source);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Storage(SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Storage(self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(XPtrTorchTensor self, Rcpp::XPtr<XPtrTorch> source, XPtrTorchint64_t storage_offset, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP storage_offsetSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type storage_offset(storage_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(self, source, storage_offset, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Tensor_storage_offset_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_set__self_Tensor_source_Tensor_storage_offset_int64_t_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor source, XPtrTorchint64_t storage_offset, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Tensor_storage_offset_int64_t_size_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP storage_offsetSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type storage_offset(storage_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Tensor_storage_offset_int64_t_size_IntArrayRef(self, source, storage_offset, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_set__self_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor_source_Tensor(SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor_source_Tensor(self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_set__self_Tensor
XPtrTorchTensor cpp_torch_method_set__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_set__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_set__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor
XPtrTorchbool cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor);
RcppExport SEXP _torch_cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor(SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor(self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor(self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_view_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_method_view_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_method_view_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_view_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_view_self_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_method_view_self_Tensor_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_method_view_self_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_view_self_Tensor_dtype_ScalarType(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor(self, index, source, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_put_self_Tensor_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_put_self_Tensor_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_method_put_self_Tensor_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_put_self_Tensor_index_Tensor_source_Tensor(self, index, source, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_reduce__self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_index_reduce__self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_method_index_reduce__self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_reduce__self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(self, dim, index, source, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_method_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(self, dim, index, source, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(self, dim, index, src, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(self, dim, index, src, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(self, dim, index, value, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(self, dim, index, value, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_method_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(self, dim, index, src, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_scatter_reduce__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_method_scatter_reduce__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_method_scatter_reduce__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_scatter_reduce__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(self, dim, index, src, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_eq__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_eq__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_eq__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_eq__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_and_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_and_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_and_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_and_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_and_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_and_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_and_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_and_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_and__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_and__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_and__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_and__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_and__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_and__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_and__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_and__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___and___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___and___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___and___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___and___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___and___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___and___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___and___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___and___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___iand___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___iand___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___iand___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___iand___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___iand___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___iand___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___iand___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___iand___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_or_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_or_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_or_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_or_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_or_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_or_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_or_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_or_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_or__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_or__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_or__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_or__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_or__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_or__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_or__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_or__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___or___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___or___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___or___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___or___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___or___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___or___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___or___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___or___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ior___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___ior___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___ior___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ior___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ior___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___ior___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___ior___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ior___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___xor___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___xor___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___xor___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___xor___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___xor___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___xor___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___xor___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___xor___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ixor___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___ixor___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___ixor___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ixor___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ixor___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___ixor___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___ixor___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ixor___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___lshift___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___lshift___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___lshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___lshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___lshift___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___lshift___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___lshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___lshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ilshift___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___ilshift___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___ilshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ilshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___ilshift___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___ilshift___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___ilshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___ilshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_left_shift_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_left_shift_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_left_shift_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_left_shift_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_left_shift__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_left_shift__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_left_shift__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_left_shift__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_left_shift_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_left_shift_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_left_shift_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_left_shift_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_left_shift__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_left_shift__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_left_shift__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_left_shift__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___rshift___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___rshift___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___rshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___rshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___rshift___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___rshift___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___rshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___rshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___irshift___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method___irshift___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method___irshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___irshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method___irshift___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method___irshift___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method___irshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method___irshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_right_shift_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_right_shift_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_right_shift_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_right_shift_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_right_shift__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_bitwise_right_shift__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_right_shift__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_right_shift__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_right_shift_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_right_shift_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_right_shift_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_right_shift_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_bitwise_right_shift__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_bitwise_right_shift__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_bitwise_right_shift__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_bitwise_right_shift__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tril__self_Tensor
XPtrTorchTensor cpp_torch_method_tril__self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_tril__self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tril__self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_triu__self_Tensor
XPtrTorchTensor cpp_torch_method_triu__self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_triu__self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_triu__self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_digamma__self_Tensor
XPtrTorchTensor cpp_torch_method_digamma__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_digamma__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_digamma__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar
XPtrTorchTensor cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar(XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t
XPtrTorchTensor cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t(XPtrTorchTensor self, XPtrTorchint64_t from, XPtrTorchoptional_int64_t to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t(SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t(self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_random__self_Tensor_to_int64_t
XPtrTorchTensor cpp_torch_method_random__self_Tensor_to_int64_t(XPtrTorchTensor self, XPtrTorchint64_t to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_random__self_Tensor_to_int64_t(SEXP selfSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_random__self_Tensor_to_int64_t(self, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_random__self_Tensor
XPtrTorchTensor cpp_torch_method_random__self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_random__self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_random__self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_uniform__self_Tensor
XPtrTorchTensor cpp_torch_method_uniform__self_Tensor(XPtrTorchTensor self, XPtrTorchdouble from, XPtrTorchdouble to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_uniform__self_Tensor(SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_uniform__self_Tensor(self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cauchy__self_Tensor
XPtrTorchTensor cpp_torch_method_cauchy__self_Tensor(XPtrTorchTensor self, XPtrTorchdouble median, XPtrTorchdouble sigma, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_cauchy__self_Tensor(SEXP selfSEXP, SEXP medianSEXP, SEXP sigmaSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type median(medianSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cauchy__self_Tensor(self, median, sigma, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_log_normal__self_Tensor
XPtrTorchTensor cpp_torch_method_log_normal__self_Tensor(XPtrTorchTensor self, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_log_normal__self_Tensor(SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_log_normal__self_Tensor(self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_exponential__self_Tensor
XPtrTorchTensor cpp_torch_method_exponential__self_Tensor(XPtrTorchTensor self, XPtrTorchdouble lambd, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_exponential__self_Tensor(SEXP selfSEXP, SEXP lambdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lambd(lambdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_exponential__self_Tensor(self, lambd, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_geometric__self_Tensor_p_double
XPtrTorchTensor cpp_torch_method_geometric__self_Tensor_p_double(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_geometric__self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_geometric__self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_diag_self_Tensor
XPtrTorchTensor cpp_torch_method_diag_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_diag_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_diag_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cross_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_cross_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_cross_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cross_self_Tensor_other_Tensor(self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_triu_self_Tensor
XPtrTorchTensor cpp_torch_method_triu_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_triu_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_triu_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_tril_self_Tensor
XPtrTorchTensor cpp_torch_method_tril_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_method_tril_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_tril_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_trace_self_Tensor
XPtrTorchTensor cpp_torch_method_trace_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_trace_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_trace_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_ne_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_ne_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_ne_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_ne_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_ne__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_ne__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ne__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_ne__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_ne__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ne__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_not_equal_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_not_equal_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_not_equal_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_not_equal_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_not_equal_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_not_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_not_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_not_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_not_equal__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_not_equal__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_not_equal__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_not_equal__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_not_equal__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_not_equal__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_not_equal__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_not_equal__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_eq_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_eq_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_eq_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_eq_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_eq_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_eq_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_ge_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_ge_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_ge_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_ge_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_ge__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_ge__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ge__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_ge__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_ge__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ge__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater_equal_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_greater_equal_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_greater_equal_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater_equal_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater_equal_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_greater_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_greater_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater_equal__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_greater_equal__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_greater_equal__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater_equal__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater_equal__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_greater_equal__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_greater_equal__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater_equal__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_le_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_le_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_le_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_le_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_le__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_le__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_le__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_le__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_le__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_le__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less_equal_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_less_equal_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_less_equal_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less_equal_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less_equal_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_less_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_less_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less_equal__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_less_equal__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_less_equal__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less_equal__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less_equal__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_less_equal__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_less_equal__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less_equal__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_gt_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_gt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_gt_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_gt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_gt__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_gt__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gt__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_gt__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_gt__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gt__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_greater_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_greater_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_greater_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_greater_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_greater__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_greater__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_greater__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_greater__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_greater__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_greater__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_lt_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_lt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_lt_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_lt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_lt__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_lt__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lt__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_lt__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_lt__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lt__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_less_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_less_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_less_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_less_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_less__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_less__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_less__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_less__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_less__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_less__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_take_self_Tensor_index_Tensor
XPtrTorchTensor cpp_torch_method_take_self_Tensor_index_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_method_take_self_Tensor_index_Tensor(SEXP selfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_take_self_Tensor_index_Tensor(self, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_take_along_dim_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_method_take_along_dim_self_Tensor_indices_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_method_take_along_dim_self_Tensor_indices_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_take_along_dim_self_Tensor_indices_Tensor(self, indices, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor
XPtrTorchTensor cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_masked_select_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_method_masked_select_self_Tensor_mask_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_method_masked_select_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_masked_select_self_Tensor_mask_Tensor(self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nonzero_self_Tensor
XPtrTorchTensor cpp_torch_method_nonzero_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nonzero_numpy_self_Tensor
XPtrTorchTensorList cpp_torch_method_nonzero_numpy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_nonzero_numpy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nonzero_numpy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argwhere_self_Tensor
XPtrTorchTensor cpp_torch_method_argwhere_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_argwhere_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argwhere_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor
XPtrTorchTensor cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_triangular_solve_self_Tensor_A_Tensor
Rcpp::List cpp_torch_method_triangular_solve_self_Tensor_A_Tensor(XPtrTorchTensor self, XPtrTorchTensor A, XPtrTorchbool upper, XPtrTorchbool transpose, XPtrTorchbool unitriangular);
RcppExport SEXP _torch_cpp_torch_method_triangular_solve_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_triangular_solve_self_Tensor_A_Tensor(self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_svd_self_Tensor
Rcpp::List cpp_torch_method_svd_self_Tensor(XPtrTorchTensor self, XPtrTorchbool some, XPtrTorchbool compute_uv);
RcppExport SEXP _torch_cpp_torch_method_svd_self_Tensor(SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type some(someSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_svd_self_Tensor(self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t
XPtrTorchTensor cpp_torch_method_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t(XPtrTorchTensor self, XPtrTorchint64_t axis0, XPtrTorchint64_t axis1);
RcppExport SEXP _torch_cpp_torch_method_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t(SEXP selfSEXP, SEXP axis0SEXP, SEXP axis1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis0(axis0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis1(axis1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t(self, axis0, axis1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_swapaxes__self_Tensor_axis0_int64_t_axis1_int64_t
XPtrTorchTensor cpp_torch_method_swapaxes__self_Tensor_axis0_int64_t_axis1_int64_t(XPtrTorchTensor self, XPtrTorchint64_t axis0, XPtrTorchint64_t axis1);
RcppExport SEXP _torch_cpp_torch_method_swapaxes__self_Tensor_axis0_int64_t_axis1_int64_t(SEXP selfSEXP, SEXP axis0SEXP, SEXP axis1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis0(axis0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis1(axis1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_swapaxes__self_Tensor_axis0_int64_t_axis1_int64_t(self, axis0, axis1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_method_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_method_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_swapdims__self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_method_swapdims__self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_method_swapdims__self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_swapdims__self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cholesky_self_Tensor
XPtrTorchTensor cpp_torch_method_cholesky_self_Tensor(XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_method_cholesky_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cholesky_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor
XPtrTorchTensor cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor(XPtrTorchTensor self, XPtrTorchTensor input2, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor(self, input2, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_cholesky_inverse_self_Tensor
XPtrTorchTensor cpp_torch_method_cholesky_inverse_self_Tensor(XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_method_cholesky_inverse_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_cholesky_inverse_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_qr_self_Tensor
Rcpp::List cpp_torch_method_qr_self_Tensor(XPtrTorchTensor self, XPtrTorchbool some);
RcppExport SEXP _torch_cpp_torch_method_qr_self_Tensor(SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_qr_self_Tensor(self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_geqrf_self_Tensor
Rcpp::List cpp_torch_method_geqrf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_geqrf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_geqrf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_orgqr_self_Tensor_input2_Tensor
XPtrTorchTensor cpp_torch_method_orgqr_self_Tensor_input2_Tensor(XPtrTorchTensor self, XPtrTorchTensor input2);
RcppExport SEXP _torch_cpp_torch_method_orgqr_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_orgqr_self_Tensor_input2_Tensor(self, input2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor
XPtrTorchTensor cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor(XPtrTorchTensor self, XPtrTorchTensor input2, XPtrTorchTensor input3, XPtrTorchbool left, XPtrTorchbool transpose);
RcppExport SEXP _torch_cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP input3SEXP, SEXP leftSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input3(input3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor(self, input2, input3, left, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
XPtrTorchTensor cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(XPtrTorchTensor self, XPtrTorchTensor LU_data, XPtrTorchTensor LU_pivots);
RcppExport SEXP _torch_cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t
XPtrTorchTensor cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t(XPtrTorchTensor self, XPtrTorchint64_t num_samples, XPtrTorchbool replacement, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t(SEXP selfSEXP, SEXP num_samplesSEXP, SEXP replacementSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t(self, num_samples, replacement, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lgamma__self_Tensor
XPtrTorchTensor cpp_torch_method_lgamma__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_lgamma__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lgamma__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lgamma_self_Tensor
XPtrTorchTensor cpp_torch_method_lgamma_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_lgamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lgamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_digamma_self_Tensor
XPtrTorchTensor cpp_torch_method_digamma_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_digamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_digamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_polygamma__self_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_method_polygamma__self_Tensor_n_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_method_polygamma__self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_polygamma__self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfinv_self_Tensor
XPtrTorchTensor cpp_torch_method_erfinv_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_erfinv_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfinv_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_erfinv__self_Tensor
XPtrTorchTensor cpp_torch_method_erfinv__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_erfinv__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_erfinv__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_i0_self_Tensor
XPtrTorchTensor cpp_torch_method_i0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_i0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_i0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_i0__self_Tensor
XPtrTorchTensor cpp_torch_method_i0__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_i0__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_i0__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sign_self_Tensor
XPtrTorchTensor cpp_torch_method_sign_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sign_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sign_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sign__self_Tensor
XPtrTorchTensor cpp_torch_method_sign__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_sign__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sign__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_signbit_self_Tensor
XPtrTorchTensor cpp_torch_method_signbit_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_signbit_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_signbit_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_dist_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_dist_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_method_dist_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_dist_self_Tensor_other_Tensor(self, other, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan2__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_atan2__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_atan2__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan2__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_atan2_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_atan2_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_atan2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_atan2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arctan2_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_arctan2_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_arctan2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arctan2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_arctan2__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_arctan2__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_arctan2__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_arctan2__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar
XPtrTorchTensor cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar(XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_histc_self_Tensor
XPtrTorchTensor cpp_torch_method_histc_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchScalar min, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_method_histc_self_Tensor(SEXP selfSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_histc_self_Tensor(self, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_histogram_self_Tensor_bins_Tensor
Rcpp::List cpp_torch_method_histogram_self_Tensor_bins_Tensor(XPtrTorchTensor self, XPtrTorchTensor bins, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_method_histogram_self_Tensor_bins_Tensor(SEXP selfSEXP, SEXP binsSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_histogram_self_Tensor_bins_Tensor(self, bins, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_histogram_self_Tensor_bins_int64_t
Rcpp::List cpp_torch_method_histogram_self_Tensor_bins_int64_t(XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_method_histogram_self_Tensor_bins_int64_t(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_histogram_self_Tensor_bins_int64_t(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_fmod_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_fmod_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_fmod__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_fmod__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_fmod_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_fmod_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmod__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_fmod__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_fmod__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmod__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hypot_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_hypot_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_hypot_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hypot_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_hypot__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_hypot__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_hypot__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_hypot__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_igamma_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_igamma_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_igamma_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_igamma_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_igamma__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_igamma__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_igamma__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_igamma__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_igammac_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_igammac_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_igammac_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_igammac_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_igammac__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_igammac__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_igammac__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_igammac__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nextafter_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_nextafter_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_nextafter_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nextafter_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nextafter__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_nextafter__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_nextafter__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nextafter__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_remainder_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_remainder_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_method_remainder__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_method_remainder__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_remainder_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_remainder_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_remainder__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_remainder__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_remainder__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_remainder__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor
XPtrTorchTensor cpp_torch_method_min_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmin_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_fmin_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_fmin_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmin_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor
XPtrTorchTensor cpp_torch_method_max_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_fmax_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_fmax_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_fmax_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_fmax_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_maximum_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_maximum_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_maximum_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_maximum_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_max_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_max_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_max_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_max_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_minimum_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_minimum_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_minimum_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_minimum_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_min_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_min_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_min_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_min_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_quantile_self_Tensor_q_Tensor
XPtrTorchTensor cpp_torch_method_quantile_self_Tensor_q_Tensor(XPtrTorchTensor self, XPtrTorchTensor q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_method_quantile_self_Tensor_q_Tensor(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_quantile_self_Tensor_q_Tensor(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_quantile_self_Tensor_q_double
XPtrTorchTensor cpp_torch_method_quantile_self_Tensor_q_double(XPtrTorchTensor self, XPtrTorchdouble q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_method_quantile_self_Tensor_q_double(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_quantile_self_Tensor_q_double(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nanquantile_self_Tensor_q_Tensor
XPtrTorchTensor cpp_torch_method_nanquantile_self_Tensor_q_Tensor(XPtrTorchTensor self, XPtrTorchTensor q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_method_nanquantile_self_Tensor_q_Tensor(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nanquantile_self_Tensor_q_Tensor(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_nanquantile_self_Tensor_q_double
XPtrTorchTensor cpp_torch_method_nanquantile_self_Tensor_q_double(XPtrTorchTensor self, XPtrTorchdouble q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_method_nanquantile_self_Tensor_q_double(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_nanquantile_self_Tensor_q_double(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sort_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_method_sort_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_sort_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sort_self_Tensor_dim_int64_t(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sort_self_Tensor_dim_int64_t_stable_bool
Rcpp::List cpp_torch_method_sort_self_Tensor_dim_int64_t_stable_bool(XPtrTorchTensor self, XPtrTorchoptional_bool stable, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_sort_self_Tensor_dim_int64_t_stable_bool(SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sort_self_Tensor_dim_int64_t_stable_bool(self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sort_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_method_sort_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_sort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_sort_self_Tensor_dim_Dimname_stable_bool
Rcpp::List cpp_torch_method_sort_self_Tensor_dim_Dimname_stable_bool(XPtrTorchTensor self, XPtrTorchoptional_bool stable, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_sort_self_Tensor_dim_Dimname_stable_bool(SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_sort_self_Tensor_dim_Dimname_stable_bool(self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_msort_self_Tensor
XPtrTorchTensor cpp_torch_method_msort_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_msort_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_msort_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argsort_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_method_argsort_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_argsort_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argsort_self_Tensor_dim_int64_t(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argsort_self_Tensor_stable_bool_dim_int64_t
XPtrTorchTensor cpp_torch_method_argsort_self_Tensor_stable_bool_dim_int64_t(XPtrTorchTensor self, XPtrTorchbool stable, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_argsort_self_Tensor_stable_bool_dim_int64_t(SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argsort_self_Tensor_stable_bool_dim_int64_t(self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_argsort_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_method_argsort_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_method_argsort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_argsort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_topk_self_Tensor_k_int64_t
Rcpp::List cpp_torch_method_topk_self_Tensor_k_int64_t(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchindex_int64_t dim, XPtrTorchbool largest, XPtrTorchbool sorted);
RcppExport SEXP _torch_cpp_torch_method_topk_self_Tensor_k_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_topk_self_Tensor_k_int64_t(self, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_all_self_Tensor
XPtrTorchTensor cpp_torch_method_all_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_all_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_all_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_any_self_Tensor
XPtrTorchTensor cpp_torch_method_any_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_any_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_any_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
XPtrTorchTensor cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(XPtrTorchTensor self, XPtrTorchScalar p, XPtrTorchindex_int64_t dim, XPtrTorchScalar maxnorm);
RcppExport SEXP _torch_cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
XPtrTorchTensor cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(XPtrTorchTensor self, XPtrTorchScalar p, XPtrTorchindex_int64_t dim, XPtrTorchScalar maxnorm);
RcppExport SEXP _torch_cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(XPtrTorchTensor self, XPtrTorchint64_t dimension, XPtrTorchint64_t size, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(SEXP selfSEXP, SEXP dimensionSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(self, dimension, size, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_equal_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_method_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow_self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_method_pow_self_Tensor_exponent_Tensor(XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_method_pow_self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow_self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow_self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_method_pow_self_Tensor_exponent_Scalar(XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_method_pow_self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow_self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow__self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_method_pow__self_Tensor_exponent_Scalar(XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_method_pow__self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow__self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_pow__self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_method_pow__self_Tensor_exponent_Tensor(XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_method_pow__self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_pow__self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_float_power_self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_method_float_power_self_Tensor_exponent_Tensor(XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_method_float_power_self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_float_power_self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_float_power_self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_method_float_power_self_Tensor_exponent_Scalar(XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_method_float_power_self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_float_power_self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_float_power__self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_method_float_power__self_Tensor_exponent_Scalar(XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_method_float_power__self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_float_power__self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_float_power__self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_method_float_power__self_Tensor_exponent_Tensor(XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_method_float_power__self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_float_power__self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_normal__self_Tensor
XPtrTorchTensor cpp_torch_method_normal__self_Tensor(XPtrTorchTensor self, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_method_normal__self_Tensor(SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_normal__self_Tensor(self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_alias_self_Tensor
XPtrTorchTensor cpp_torch_method_alias_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_alias_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_alias_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isfinite_self_Tensor
XPtrTorchTensor cpp_torch_method_isfinite_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_isfinite_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isfinite_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isinf_self_Tensor
XPtrTorchTensor cpp_torch_method_isinf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_isinf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isinf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_record_stream_self_Tensor_s_Stream
void cpp_torch_method_record_stream_self_Tensor_s_Stream(XPtrTorchTensor self, XPtrTorch s);
RcppExport SEXP _torch_cpp_torch_method_record_stream_self_Tensor_s_Stream(SEXP selfSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorch >::type s(sSEXP);
    cpp_torch_method_record_stream_self_Tensor_s_Stream(self, s);
    return R_NilValue;
END_RCPP
}
// cpp_torch_method_isposinf_self_Tensor
XPtrTorchTensor cpp_torch_method_isposinf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_isposinf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isposinf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_isneginf_self_Tensor
XPtrTorchTensor cpp_torch_method_isneginf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_isneginf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_isneginf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_det_self_Tensor
XPtrTorchTensor cpp_torch_method_det_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_det_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_det_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_slogdet_self_Tensor
Rcpp::List cpp_torch_method_slogdet_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_slogdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_slogdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_logdet_self_Tensor
XPtrTorchTensor cpp_torch_method_logdet_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_logdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_logdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_inverse_self_Tensor
XPtrTorchTensor cpp_torch_method_inverse_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_method_inverse_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_inverse_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_inner_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_method_inner_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_method_inner_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_inner_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_outer_self_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_method_outer_self_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec2);
RcppExport SEXP _torch_cpp_torch_method_outer_self_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_outer_self_Tensor_vec2_Tensor(self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_ger_self_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_method_ger_self_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec2);
RcppExport SEXP _torch_cpp_torch_method_ger_self_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_ger_self_Tensor_vec2_Tensor(self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_method_to_padded_tensor_self_Tensor_padding_double
XPtrTorchTensor cpp_torch_method_to_padded_tensor_self_Tensor_padding_double(XPtrTorchTensor self, XPtrTorchdouble padding, XPtrTorchOptionalIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_method_to_padded_tensor_self_Tensor_padding_double(SEXP selfSEXP, SEXP paddingSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_method_to_padded_tensor_self_Tensor_padding_double(self, padding, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Byte_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Byte_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Byte_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Byte_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Char_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Char_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Char_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Char_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Double_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Double_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Double_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Double_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Float_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Float_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Float_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Float_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Int_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Int_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Int_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Int_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Long_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Long_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Long_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Long_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Short_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Short_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Short_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Short_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cast_Half_self_Tensor
XPtrTorchTensor cpp_torch_namespace__cast_Half_self_Tensor(XPtrTorchTensor self, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__cast_Half_self_Tensor(SEXP selfSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cast_Half_self_Tensor(self, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_dual_primal_Tensor_tangent_Tensor_level_int64_t
XPtrTorchTensor cpp_torch_namespace__make_dual_primal_Tensor_tangent_Tensor_level_int64_t(XPtrTorchTensor primal, XPtrTorchTensor tangent, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__make_dual_primal_Tensor_tangent_Tensor_level_int64_t(SEXP primalSEXP, SEXP tangentSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type primal(primalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tangent(tangentSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_dual_primal_Tensor_tangent_Tensor_level_int64_t(primal, tangent, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unpack_dual_dual_Tensor_level_int64_t
Rcpp::List cpp_torch_namespace__unpack_dual_dual_Tensor_level_int64_t(XPtrTorchTensor dual, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__unpack_dual_dual_Tensor_level_int64_t(SEXP dualSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dual(dualSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unpack_dual_dual_Tensor_level_int64_t(dual, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__new_zeros_with_same_feature_meta_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__new_zeros_with_same_feature_meta_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchint64_t self_num_batch_dims);
RcppExport SEXP _torch_cpp_torch_namespace__new_zeros_with_same_feature_meta_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP self_num_batch_dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type self_num_batch_dims(self_num_batch_dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__new_zeros_with_same_feature_meta_self_Tensor_other_Tensor(self, other, self_num_batch_dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__has_same_storage_numel_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_namespace__has_same_storage_numel_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace__has_same_storage_numel_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__has_same_storage_numel_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_align_tensors_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_align_tensors_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_align_tensors_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_align_tensors_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__assert_async_self_Tensor
void cpp_torch_namespace__assert_async_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__assert_async_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    cpp_torch_namespace__assert_async_self_Tensor(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__assert_tensor_metadata_a_Tensor
void cpp_torch_namespace__assert_tensor_metadata_a_Tensor(XPtrTorchTensor a, XPtrTorchOptionalIntArrayRef size, XPtrTorchOptionalIntArrayRef stride, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__assert_tensor_metadata_a_Tensor(SEXP aSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type a(aSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    cpp_torch_namespace__assert_tensor_metadata_a_Tensor(a, size, stride, dtype);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t
XPtrTorchbool cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchint64_t blank);
RcppExport SEXP _torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t(log_probs, targets, input_lengths, target_lengths, blank));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t
XPtrTorchbool cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchTensor input_lengths, XPtrTorchTensor target_lengths, XPtrTorchint64_t blank);
RcppExport SEXP _torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t(log_probs, targets, input_lengths, target_lengths, blank));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool
Rcpp::List cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchint64_t blank, XPtrTorchbool deterministic, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP deterministicSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t_deterministic_bool_zero_infinity_bool
Rcpp::List cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t_deterministic_bool_zero_infinity_bool(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchTensor input_lengths, XPtrTorchTensor target_lengths, XPtrTorchint64_t blank, XPtrTorchbool deterministic, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t_deterministic_bool_zero_infinity_bool(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP deterministicSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t_deterministic_bool_zero_infinity_bool(log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool
XPtrTorchTensor cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(XPtrTorchTensorList weight_arr, XPtrTorchint64_t weight_stride0, XPtrTorchint64_t input_size, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t proj_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchbool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(SEXP weight_arrSEXP, SEXP weight_stride0SEXP, SEXP input_sizeSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP proj_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight_arr(weight_arrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type proj_size(proj_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(weight_arr, weight_stride0, input_size, mode, hidden_size, proj_size, num_layers, batch_first, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor
Rcpp::List cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchOptionalTensor weight_buf, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t proj_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP proj_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type proj_size(proj_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4
Rcpp::List cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchTensor weight_buf, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchTensor output, XPtrTorchOptionalTensor grad_output, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t proj_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state, XPtrTorchTensor reserve, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP outputSEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP proj_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP, SEXP reserveSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type proj_size(proj_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions(XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchint64_t dropout_seed, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions(SEXP dropoutSEXP, SEXP trainSEXP, SEXP dropout_seedSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dropout_seed(dropout_seedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions(dropout, train, dropout_seed, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__debug_has_internal_overlap_self_Tensor
XPtrTorchint64_t cpp_torch_namespace__debug_has_internal_overlap_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__debug_has_internal_overlap_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__debug_has_internal_overlap_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_dropout_self_Tensor_p_double
Rcpp::List cpp_torch_namespace__fused_dropout_self_Tensor_p_double(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace__fused_dropout_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_dropout_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double
XPtrTorchTensor cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchdouble scale);
RcppExport SEXP _torch_cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double(SEXP selfSEXP, SEXP maskSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double(self, mask, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_dropout_input_Tensor_p_double_train_bool
Rcpp::List cpp_torch_namespace_native_dropout_input_Tensor_p_double_train_bool(XPtrTorchTensor input, XPtrTorchdouble p, XPtrTorchoptional_bool train);
RcppExport SEXP _torch_cpp_torch_namespace_native_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_dropout_backward_grad_output_Tensor_mask_Tensor_scale_double
XPtrTorchTensor cpp_torch_namespace_native_dropout_backward_grad_output_Tensor_mask_Tensor_scale_double(XPtrTorchTensor grad_output, XPtrTorchTensor mask, XPtrTorchdouble scale);
RcppExport SEXP _torch_cpp_torch_namespace_native_dropout_backward_grad_output_Tensor_mask_Tensor_scale_double(SEXP grad_outputSEXP, SEXP maskSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_dropout_backward_grad_output_Tensor_mask_Tensor_scale_double(grad_output, mask, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType
Rcpp::List cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType(XPtrTorchTensor quasi, XPtrTorchint64_t n, XPtrTorchTensor sobolstate, XPtrTorchint64_t dimension, XPtrTorchint64_t num_generated, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType(SEXP quasiSEXP, SEXP nSEXP, SEXP sobolstateSEXP, SEXP dimensionSEXP, SEXP num_generatedSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type quasi(quasiSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sobolstate(sobolstateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_generated(num_generatedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType(quasi, n, sobolstate, dimension, num_generated, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t
XPtrTorchTensor cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n, XPtrTorchTensor sobolstate, XPtrTorchint64_t dimension, XPtrTorchint64_t num_generated);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t(SEXP selfSEXP, SEXP nSEXP, SEXP sobolstateSEXP, SEXP dimensionSEXP, SEXP num_generatedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sobolstate(sobolstateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_generated(num_generatedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t(self, n, sobolstate, dimension, num_generated));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t
XPtrTorchTensor cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t(XPtrTorchTensor self, XPtrTorchTensor ltm, XPtrTorchint64_t dimension);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t(SEXP selfSEXP, SEXP ltmSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ltm(ltmSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t(self, ltm, dimension));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t
XPtrTorchTensor cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t(XPtrTorchTensor self, XPtrTorchint64_t dimension);
RcppExport SEXP _torch_cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t(SEXP selfSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t(self, dimension));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor
XPtrTorchTensor cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor(XPtrTorchTensor self, XPtrTorchTensor shape);
RcppExport SEXP _torch_cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__shape_as_tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__shape_as_tensor_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__shape_as_tensor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__shape_as_tensor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool(XPtrTorchTensor input, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool(XPtrTorchTensor input, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool(XPtrTorchTensor input, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool(XPtrTorchTensor input, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool(SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool(input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool
XPtrTorchTensor cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool(SEXP selfSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool(self, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_abs_self_Tensor
XPtrTorchTensor cpp_torch_namespace_abs_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_abs_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_abs_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_abs__self_Tensor
XPtrTorchTensor cpp_torch_namespace_abs__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_abs__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_abs__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_abs_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_abs_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_abs_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_abs_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_absolute_self_Tensor
XPtrTorchTensor cpp_torch_namespace_absolute_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_absolute_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_absolute_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_angle_self_Tensor
XPtrTorchTensor cpp_torch_namespace_angle_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_angle_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_angle_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_angle_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_angle_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_angle_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_angle_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_as_real_self_Tensor
XPtrTorchTensor cpp_torch_namespace_view_as_real_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_view_as_real_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_as_real_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_as_complex_self_Tensor
XPtrTorchTensor cpp_torch_namespace_view_as_complex_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_view_as_complex_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_as_complex_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sgn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sgn_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sgn_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sgn_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_real_self_Tensor
XPtrTorchTensor cpp_torch_namespace_real_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_real_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_real_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_imag_self_Tensor
XPtrTorchTensor cpp_torch_namespace_imag_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_imag_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_imag_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conj_self_Tensor
XPtrTorchTensor cpp_torch_namespace__conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conj_self_Tensor
XPtrTorchTensor cpp_torch_namespace_conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conj_physical_self_Tensor
XPtrTorchTensor cpp_torch_namespace__conj_physical_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__conj_physical_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conj_physical_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conj_physical_self_Tensor
XPtrTorchTensor cpp_torch_namespace_conj_physical_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_conj_physical_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conj_physical_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conj_physical_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_conj_physical_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_conj_physical_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conj_physical_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conj_physical__self_Tensor
XPtrTorchTensor cpp_torch_namespace_conj_physical__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_conj_physical__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conj_physical__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resolve_conj_self_Tensor
XPtrTorchTensor cpp_torch_namespace_resolve_conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_resolve_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resolve_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resolve_neg_self_Tensor
XPtrTorchTensor cpp_torch_namespace_resolve_neg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_resolve_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resolve_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__neg_view_self_Tensor
XPtrTorchTensor cpp_torch_namespace__neg_view_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__neg_view_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__neg_view_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acos_self_Tensor
XPtrTorchTensor cpp_torch_namespace_acos_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_acos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acos__self_Tensor
XPtrTorchTensor cpp_torch_namespace_acos__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_acos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acos_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_acos_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_acos_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acos_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arccos_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arccos_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arccos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arccos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arccos__self_Tensor
XPtrTorchTensor cpp_torch_namespace_arccos__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arccos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arccos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, ceil_mode, count_include_pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_add_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_relu_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__add_relu_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__add_relu_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_relu_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_relu__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__add_relu__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__add_relu__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_relu__self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_relu_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace__add_relu_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__add_relu_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_relu_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_relu__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace__add_relu__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__add_relu__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_relu__self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_add_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat, XPtrTorchTensor vec, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat(matSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat, XPtrTorchTensor vec, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor(SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat(matSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor(self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat, XPtrTorchTensor vec, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP matSEXP, SEXP vecSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat(matSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor(out, self, mat, vec, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec1, XPtrTorchTensor vec2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor(self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor vec1, XPtrTorchTensor vec2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vec1SEXP, SEXP vec2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor(out, self, vec1, vec2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool(XPtrTorchTensor theta, XPtrTorchIntArrayRef size, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool(SEXP thetaSEXP, SEXP sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool(theta, size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad, XPtrTorchIntArrayRef size, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool(SEXP gradSEXP, SEXP sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool(grad, size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__is_all_true_self_Tensor
XPtrTorchTensor cpp_torch_namespace__is_all_true_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__is_all_true_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__is_all_true_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__is_any_true_self_Tensor
XPtrTorchTensor cpp_torch_namespace__is_any_true_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__is_any_true_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__is_any_true_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_check_tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_check_tensor_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_check_tensor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_check_tensor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_all_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_all_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_allclose_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_namespace_allclose_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchdouble rtol, XPtrTorchdouble atol, XPtrTorchbool equal_nan);
RcppExport SEXP _torch_cpp_torch_namespace_allclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_allclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_any_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_any_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_end_Scalar
XPtrTorchTensor cpp_torch_namespace_arange_end_Scalar(XPtrTorchScalar end, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_arange_end_Scalar(SEXP endSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_end_Scalar(end, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_start_Scalar_end_Scalar
XPtrTorchTensor cpp_torch_namespace_arange_start_Scalar_end_Scalar(XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchScalar step, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type step(stepSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_start_Scalar_end_Scalar(start, end, step, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_out_out_Tensor_end_Scalar
XPtrTorchTensor cpp_torch_namespace_arange_out_out_Tensor_end_Scalar(XPtrTorchTensor out, XPtrTorchScalar end);
RcppExport SEXP _torch_cpp_torch_namespace_arange_out_out_Tensor_end_Scalar(SEXP outSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_out_out_Tensor_end_Scalar(out, end));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar
XPtrTorchTensor cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar(XPtrTorchTensor out, XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchScalar step);
RcppExport SEXP _torch_cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar(out, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t(XPtrTorchTensor like, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t(SEXP likeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type like(likeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t(like, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argmax_self_Tensor
XPtrTorchTensor cpp_torch_namespace_argmax_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_argmax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argmax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argmax_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_argmax_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_argmax_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argmax_out_out_Tensor_self_Tensor(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argmin_self_Tensor
XPtrTorchTensor cpp_torch_namespace_argmin_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_argmin_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argmin_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argmin_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_argmin_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_argmin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argmin_out_out_Tensor_self_Tensor(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acosh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_acosh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_acosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acosh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_acosh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_acosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arccosh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arccosh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arccosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arccosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arccosh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_arccosh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arccosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arccosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asinh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_asinh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_asinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asinh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_asinh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_asinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arcsinh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arcsinh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arcsinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arcsinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arcsinh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_arcsinh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arcsinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arcsinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atanh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atanh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atanh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_atanh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctanh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arctanh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arctanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctanh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_arctanh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arctanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asin_self_Tensor
XPtrTorchTensor cpp_torch_namespace_asin_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_asin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asin__self_Tensor
XPtrTorchTensor cpp_torch_namespace_asin__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_asin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_asin_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_asin_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_asin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_asin_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arcsin_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arcsin_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arcsin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arcsin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arcsin__self_Tensor
XPtrTorchTensor cpp_torch_namespace_arcsin__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arcsin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arcsin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan__self_Tensor
XPtrTorchTensor cpp_torch_namespace_atan__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atan_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atan_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctan_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arctan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arctan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctan__self_Tensor
XPtrTorchTensor cpp_torch_namespace_arctan__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arctan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atleast_1d_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atleast_1d_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atleast_1d_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atleast_1d_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atleast_1d_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_atleast_1d_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_atleast_1d_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atleast_1d_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atleast_2d_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atleast_2d_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atleast_2d_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atleast_2d_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atleast_2d_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_atleast_2d_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_atleast_2d_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atleast_2d_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atleast_3d_self_Tensor
XPtrTorchTensor cpp_torch_namespace_atleast_3d_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_atleast_3d_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atleast_3d_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atleast_3d_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_atleast_3d_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_atleast_3d_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atleast_3d_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(out, self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bartlett_window_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_bartlett_window_window_length_int64_t(XPtrTorchint64_t window_length, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_bartlett_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bartlett_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool
XPtrTorchTensor cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchbool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t
XPtrTorchTensor cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor mean, XPtrTorchTensor var, XPtrTorchdouble eps, XPtrTorchdouble output_scale, XPtrTorchint64_t output_zero_point);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP meanSEXP, SEXP varSEXP, SEXP epsSEXP, SEXP output_scaleSEXP, SEXP output_zero_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type var(varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type output_scale(output_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type output_zero_point(output_zero_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t(input, weight, bias, mean, var, eps, output_scale, output_zero_point));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool
Rcpp::List cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchbool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor
Rcpp::List cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor(XPtrTorchint64_t impl_index, XPtrTorchTensor input, XPtrTorchTensor grad_output, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_var_transform, XPtrTorchbool train, XPtrTorchdouble eps, std::vector<bool> output_mask, XPtrTorchTensor reservedSpace);
RcppExport SEXP _torch_cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor(SEXP impl_indexSEXP, SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_var_transformSEXP, SEXP trainSEXP, SEXP epsSEXP, SEXP output_maskSEXP, SEXP reservedSpaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type impl_index(impl_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_var_transform(save_var_transformSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reservedSpace(reservedSpaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_self_Tensor
XPtrTorchTensor cpp_torch_namespace_bernoulli_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor(out, self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_self_Tensor_p_double
XPtrTorchTensor cpp_torch_namespace_bernoulli_self_Tensor_p_double(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor(XPtrTorchTensor input1, XPtrTorchTensor input2, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor(SEXP input1SEXP, SEXP input2SEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input1(input1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor(input1, input2, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor(self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor(grad_output, self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor(grad_input, grad_output, self, target, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor pos_weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP pos_weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type pos_weight(pos_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor(self, target, weight, pos_weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bincount_self_Tensor
XPtrTorchTensor cpp_torch_namespace_bincount_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor weights, XPtrTorchint64_t minlength);
RcppExport SEXP _torch_cpp_torch_namespace_bincount_self_Tensor(SEXP selfSEXP, SEXP weightsSEXP, SEXP minlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type minlength(minlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bincount_self_Tensor(self, weights, minlength));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_not_self_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_not_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copysign_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_copysign_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_copysign_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copysign_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copysign_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_copysign_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_copysign_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copysign_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_not_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_not_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_logical_not_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_not_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_and_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_and_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_and_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_and_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_or_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_or_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_or_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_or_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_blackman_window_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_blackman_window_window_length_int64_t(XPtrTorchint64_t window_length, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_blackman_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_blackman_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor(out, self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_broadcast_tensors_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_broadcast_tensors_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_broadcast_tensors_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_broadcast_tensors_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_broadcast_to_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_broadcast_to_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_broadcast_to_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_broadcast_to_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_broadcast_to_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_broadcast_to_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_broadcast_to_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_broadcast_to_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_tensors_TensorList_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cat_tensors_TensorList_dim_int64_t(XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_tensors_TensorList_dim_int64_t(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_tensors_TensorList_dim_int64_t(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_int64_t(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_int64_t(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname(XPtrTorchTensorList tensors, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concat_tensors_TensorList_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_concat_tensors_TensorList_dim_int64_t(XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_concat_tensors_TensorList_dim_int64_t(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concat_tensors_TensorList_dim_int64_t(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_int64_t(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_int64_t(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concat_tensors_TensorList_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_concat_tensors_TensorList_dim_Dimname(XPtrTorchTensorList tensors, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_concat_tensors_TensorList_dim_Dimname(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concat_tensors_TensorList_dim_Dimname(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_Dimname(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_Dimname(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concatenate_tensors_TensorList_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_concatenate_tensors_TensorList_dim_int64_t(XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_concatenate_tensors_TensorList_dim_int64_t(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concatenate_tensors_TensorList_dim_int64_t(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_int64_t(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_int64_t(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concatenate_tensors_TensorList_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_concatenate_tensors_TensorList_dim_Dimname(XPtrTorchTensorList tensors, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_concatenate_tensors_TensorList_dim_Dimname(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concatenate_tensors_TensorList_dim_Dimname(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_Dimname(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_Dimname(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_block_diag_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_block_diag_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_block_diag_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_block_diag_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ceil_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ceil_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_ceil_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ceil_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ceil__self_Tensor
XPtrTorchTensor cpp_torch_namespace_ceil__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_ceil__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ceil__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_chain_matmul_matrices_TensorList
XPtrTorchTensor cpp_torch_namespace_chain_matmul_matrices_TensorList(XPtrTorchTensorList matrices);
RcppExport SEXP _torch_cpp_torch_namespace_chain_matmul_matrices_TensorList(SEXP matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type matrices(matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_chain_matmul_matrices_TensorList(matrices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_chain_matmul_out_out_Tensor_matrices_TensorList
XPtrTorchTensor cpp_torch_namespace_chain_matmul_out_out_Tensor_matrices_TensorList(XPtrTorchTensor out, XPtrTorchTensorList matrices);
RcppExport SEXP _torch_cpp_torch_namespace_chain_matmul_out_out_Tensor_matrices_TensorList(SEXP outSEXP, SEXP matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type matrices(matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_chain_matmul_out_out_Tensor_matrices_TensorList(out, matrices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t
XPtrTorchTensorList cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t(XPtrTorchTensor self, XPtrTorchint64_t chunks, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t(SEXP selfSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t(self, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t
XPtrTorchTensorList cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t(XPtrTorchTensor self, XPtrTorchint64_t chunks, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t(SEXP selfSEXP, SEXP chunksSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type chunks(chunksSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t(self, chunks, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tensor_split_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_namespace_tensor_split_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_tensor_split_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tensor_split_self_Tensor_sections_int64_t(self, sections, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tensor_split_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_tensor_split_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_tensor_split_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tensor_split_self_Tensor_indices_IntArrayRef(self, indices, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor
XPtrTorchTensorList cpp_torch_namespace_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor_indices_or_sections, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor(SEXP selfSEXP, SEXP tensor_indices_or_sectionsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor_indices_or_sections(tensor_indices_or_sectionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor(self, tensor_indices_or_sections, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp__self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp__self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp__self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp__self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp__self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp__self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp__self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp__self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar(out, self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor(out, self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar(XPtrTorchTensor self, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max_self_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_max_self_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Tensor(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max_self_Tensor_max_Tensor(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar(XPtrTorchTensor self, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max__self_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_max__self_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Tensor(SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max__self_Tensor_max_Tensor(self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar(out, self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Tensor(out, self, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar(XPtrTorchTensor self, XPtrTorchScalar min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min_self_Tensor_min_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_min_self_Tensor_min_Tensor(XPtrTorchTensor self, XPtrTorchTensor min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Tensor(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min_self_Tensor_min_Tensor(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar(XPtrTorchTensor self, XPtrTorchScalar min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min__self_Tensor_min_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_min__self_Tensor_min_Tensor(XPtrTorchTensor self, XPtrTorchTensor min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Tensor(SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min__self_Tensor_min_Tensor(self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar
XPtrTorchTensor cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar(out, self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Tensor
XPtrTorchTensor cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor min);
RcppExport SEXP _torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Tensor(out, self, min));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clip_self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clip_self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clip_self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clip_self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clip_self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clip_self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clip_self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clip_self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clip__self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clip__self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clip__self_Tensor_min_Scalar_max_Scalar(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clip__self_Tensor_min_Scalar_max_Scalar(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clip__self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clip__self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clip__self_Tensor_min_Tensor_max_Tensor(SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clip__self_Tensor_min_Tensor_max_Tensor(self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar
XPtrTorchTensor cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar min, XPtrTorchoptional_scalar max);
RcppExport SEXP _torch_cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar(out, self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor
XPtrTorchTensor cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalTensor min, XPtrTorchOptionalTensor max);
RcppExport SEXP _torch_cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor(out, self, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_is_acceptable_self_Tensor
XPtrTorchbool cpp_torch_namespace_cudnn_is_acceptable_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_is_acceptable_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_is_acceptable_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_complex_real_Tensor_imag_Tensor
XPtrTorchTensor cpp_torch_namespace_complex_real_Tensor_imag_Tensor(XPtrTorchTensor real, XPtrTorchTensor imag);
RcppExport SEXP _torch_cpp_torch_namespace_complex_real_Tensor_imag_Tensor(SEXP realSEXP, SEXP imagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type real(realSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type imag(imagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_complex_real_Tensor_imag_Tensor(real, imag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor
XPtrTorchTensor cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor(XPtrTorchTensor out, XPtrTorchTensor real, XPtrTorchTensor imag);
RcppExport SEXP _torch_cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor(SEXP outSEXP, SEXP realSEXP, SEXP imagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type real(realSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type imag(imagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor(out, real, imag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_polar_abs_Tensor_angle_Tensor
XPtrTorchTensor cpp_torch_namespace_polar_abs_Tensor_angle_Tensor(XPtrTorchTensor abs, XPtrTorchTensor angle);
RcppExport SEXP _torch_cpp_torch_namespace_polar_abs_Tensor_angle_Tensor(SEXP absSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type abs(absSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_polar_abs_Tensor_angle_Tensor(abs, angle));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor
XPtrTorchTensor cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor(XPtrTorchTensor out, XPtrTorchTensor abs, XPtrTorchTensor angle);
RcppExport SEXP _torch_cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor(SEXP outSEXP, SEXP absSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type abs(absSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor(out, abs, angle));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef pad, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef(SEXP selfSEXP, SEXP padSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type pad(padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef(self, pad, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_backward_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_convolution_backward_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalIntArrayRef bias_sizes, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_backward_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP bias_sizesSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type bias_sizes(bias_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_backward_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(grad_output, input, weight, bias_sizes, stride, padding, dilation, transposed, output_padding, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool
XPtrTorchTensor cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool cudnn_enabled, XPtrTorchbool allow_tf32);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP cudnn_enabledSEXP, SEXP allow_tf32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type allow_tf32(allow_tf32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool
XPtrTorchTensor cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_mode_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_c10string_view_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace__convolution_mode_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_c10string_view_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchstring_view padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_mode_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_c10string_view_dilation_IntArrayRef_groups_int64_t(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_mode_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_c10string_view_dilation_IntArrayRef_groups_int64_t(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchOptionalTensor ggI, XPtrTorchOptionalTensor ggW, XPtrTorchOptionalTensor ggb, XPtrTorchTensor gO, XPtrTorchTensor weight, XPtrTorchTensor self, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP ggISEXP, SEXP ggWSEXP, SEXP ggbSEXP, SEXP gOSEXP, SEXP weightSEXP, SEXP selfSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type ggI(ggISEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type ggW(ggWSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type ggb(ggbSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type gO(gOSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_IntArrayRef(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_IntArrayRef(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_IntArrayRef(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_IntArrayRef(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_IntArrayRef(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_IntArrayRef(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_c10string_view
XPtrTorchTensor cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_c10string_view(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchstring_view padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_c10string_view(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_c10string_view(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_c10string_view
XPtrTorchTensor cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_c10string_view(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchstring_view padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_c10string_view(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_c10string_view(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_c10string_view
XPtrTorchTensor cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_c10string_view(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchstring_view padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_c10string_view(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_c10string_view(input, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor
XPtrTorchTensor cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchTensor bias, XPtrTorchint64_t pad);
RcppExport SEXP _torch_cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor(self, weight, bias, pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t
Rcpp::List cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t(XPtrTorchTensor self, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchTensor bias, XPtrTorchint64_t pad);
RcppExport SEXP _torch_cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t(SEXP selfSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t(self, input, weight, bias, pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, output_padding, groups, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, output_padding, groups, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor(input, weight, bias, stride, padding, output_padding, groups, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copy_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_copy_self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace_copy_self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copy_self_Tensor_src_Tensor(self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor
XPtrTorchTensor cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor(XPtrTorchTensor self, XPtrTorchTensor dst, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor(SEXP selfSEXP, SEXP dstSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dst(dstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor(self, dst, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__copy_from_and_resize_self_Tensor_dst_Tensor
XPtrTorchTensor cpp_torch_namespace__copy_from_and_resize_self_Tensor_dst_Tensor(XPtrTorchTensor self, XPtrTorchTensor dst);
RcppExport SEXP _torch_cpp_torch_namespace__copy_from_and_resize_self_Tensor_dst_Tensor(SEXP selfSEXP, SEXP dstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dst(dstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__copy_from_and_resize_self_Tensor_dst_Tensor(self, dst));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cos_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cos_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cos_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cos_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cos__self_Tensor
XPtrTorchTensor cpp_torch_namespace_cos__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cos__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cos__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cos_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cos_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cos_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cos_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cosh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cosh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_cosh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cosh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor(XPtrTorchTensor input1, XPtrTorchTensor input2, XPtrTorchTensor target, XPtrTorchdouble margin, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor(SEXP input1SEXP, SEXP input2SEXP, SEXP targetSEXP, SEXP marginSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input1(input1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor(input1, input2, target, margin, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_count_nonzero_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_count_nonzero_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_count_nonzero_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_count_nonzero_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cov_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cov_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t correction, XPtrTorchOptionalTensor fweights, XPtrTorchOptionalTensor aweights);
RcppExport SEXP _torch_cpp_torch_namespace_cov_self_Tensor(SEXP selfSEXP, SEXP correctionSEXP, SEXP fweightsSEXP, SEXP aweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type correction(correctionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type fweights(fweightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type aweights(aweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cov_self_Tensor(self, correction, fweights, aweights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_corrcoef_self_Tensor
XPtrTorchTensor cpp_torch_namespace_corrcoef_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_corrcoef_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_corrcoef_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(XPtrTorchTensor theta, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t H, XPtrTorchint64_t W);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(SEXP thetaSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type H(HSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(theta, False, C, H, W));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(XPtrTorchTensor grad, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t H, XPtrTorchint64_t W);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(SEXP gradSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type H(HSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(grad, False, C, H, W));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double
Rcpp::List cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble exponential_average_factor, XPtrTorchdouble epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP exponential_average_factorSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type exponential_average_factor(exponential_average_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor
Rcpp::List cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(XPtrTorchTensor input, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_var, XPtrTorchdouble epsilon, XPtrTorchTensor reserveSpace);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_varSEXP, SEXP epsilonSEXP, SEXP reserveSpaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_var(save_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reserveSpace(reserveSpaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool allow_tf32);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP allow_tf32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type allow_tf32(allow_tf32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(self, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool allow_tf32);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP allow_tf32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type allow_tf32(allow_tf32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mps_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace__mps_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace__mps_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mps_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, padding, output_padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mps_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_mps_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2(XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mps_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mps_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2(self, grad_output, weight, padding, output_padding, stride, dilation, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchTensor z, XPtrTorchoptional_scalar alpha, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP zSEXP, SEXP alphaSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type z(zSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, z, alpha, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor
XPtrTorchTensor cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor(XPtrTorchTensor self, XPtrTorchTensor grid);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor(SEXP selfSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor(self, grid));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor
Rcpp::List cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor(XPtrTorchTensor self, XPtrTorchTensor grid, XPtrTorchTensor grad_output);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor(SEXP selfSEXP, SEXP gridSEXP, SEXP grad_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor(self, grid, grad_output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummax_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_cummax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummax_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummax_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_cummax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummax_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t
void cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t(SEXP selfSEXP, SEXP valuesSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t(self, values, indices, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_cummin_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_cummin_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummin_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummin_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummin_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_cummin_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummin_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummin_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t
void cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t(SEXP selfSEXP, SEXP valuesSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t(self, values, indices, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t(XPtrTorchTensor grad, XPtrTorchTensor input, XPtrTorchIndexTensor indices, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t(SEXP gradSEXP, SEXP inputSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t(grad, input, indices, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t_output_Tensor
XPtrTorchTensor cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t_output_Tensor(XPtrTorchTensor grad, XPtrTorchTensor input, XPtrTorchindex_int64_t dim, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t_output_Tensor(SEXP gradSEXP, SEXP inputSEXP, SEXP dimSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t_output_Tensor(grad, input, dim, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumulative_trapezoid_y_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_cumulative_trapezoid_y_Tensor_x_Tensor(XPtrTorchTensor y, XPtrTorchTensor x, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cumulative_trapezoid_y_Tensor_x_Tensor(SEXP ySEXP, SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumulative_trapezoid_y_Tensor_x_Tensor(y, x, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cumulative_trapezoid_y_Tensor
XPtrTorchTensor cpp_torch_namespace_cumulative_trapezoid_y_Tensor(XPtrTorchTensor y, XPtrTorchScalar dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cumulative_trapezoid_y_Tensor(SEXP ySEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cumulative_trapezoid_y_Tensor(y, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchint64_t blank, XPtrTorchint64_t reduction, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP reductionSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor
XPtrTorchTensor cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchTensor input_lengths, XPtrTorchTensor target_lengths, XPtrTorchint64_t blank, XPtrTorchint64_t reduction, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP reductionSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef
Rcpp::List cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor
Rcpp::List cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchTensor input_lengths, XPtrTorchTensor target_lengths, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t
XPtrTorchTensor cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(XPtrTorchTensor grad, XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchTensor neg_log_likelihood, XPtrTorchTensor log_alpha, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(SEXP gradSEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP neg_log_likelihoodSEXP, SEXP log_alphaSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type neg_log_likelihood(neg_log_likelihoodSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_alpha(log_alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t
XPtrTorchTensor cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(XPtrTorchTensor grad, XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchTensor input_lengths, XPtrTorchTensor target_lengths, XPtrTorchTensor neg_log_likelihood, XPtrTorchTensor log_alpha, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(SEXP gradSEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP neg_log_likelihoodSEXP, SEXP log_alphaSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type neg_log_likelihood(neg_log_likelihoodSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_alpha(log_alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_embed_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diag_embed_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diag_embed_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_embed_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagflat_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diagflat_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t offset);
RcppExport SEXP _torch_cpp_torch_namespace_diagflat_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagflat_self_Tensor(self, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t
XPtrTorchTensor cpp_torch_namespace_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t(XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_diagonal_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_diagonal_A_Tensor(XPtrTorchTensor A, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_diagonal_A_Tensor(SEXP ASEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_diagonal_A_Tensor(A, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname
XPtrTorchTensor cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname(XPtrTorchTensor self, XPtrTorchDimname outdim, XPtrTorchDimname dim1, XPtrTorchDimname dim2, XPtrTorchint64_t offset);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname(SEXP selfSEXP, SEXP outdimSEXP, SEXP dim1SEXP, SEXP dim2SEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type outdim(outdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim2(dim2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname(self, outdim, dim1, dim2, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_backward_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t
XPtrTorchTensor cpp_torch_namespace_diagonal_backward_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef input_sizes, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_backward_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t(SEXP grad_outputSEXP, SEXP input_sizesSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_backward_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t(grad_output, input_sizes, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diff_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diff_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t n, XPtrTorchindex_int64_t dim, XPtrTorchOptionalTensor prepend, XPtrTorchOptionalTensor append);
RcppExport SEXP _torch_cpp_torch_namespace_diff_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP prependSEXP, SEXP appendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type prepend(prependSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type append(appendSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diff_self_Tensor(self, n, dim, prepend, append));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diff_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diff_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t n, XPtrTorchindex_int64_t dim, XPtrTorchOptionalTensor prepend, XPtrTorchOptionalTensor append);
RcppExport SEXP _torch_cpp_torch_namespace_diff_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP prependSEXP, SEXP appendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type prepend(prependSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type append(appendSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diff_out_out_Tensor_self_Tensor(out, self, n, dim, prepend, append));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_int64_t
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_int64_t(XPtrTorchTensor self, XPtrTorchoptional_scalar spacing, XPtrTorchoptional_index_int64_t dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_int64_t(SEXP selfSEXP, SEXP spacingSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_int64_t(self, spacing, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchScalar spacing, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_IntArrayRef(SEXP selfSEXP, SEXP spacingSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_IntArrayRef(self, spacing, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_dim_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_dim_IntArrayRef(self, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_int64_t
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_int64_t(XPtrTorchTensor self, XPtrTorchvector_Scalar spacing, XPtrTorchoptional_index_int64_t dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_int64_t(SEXP selfSEXP, SEXP spacingSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_int64_t(self, spacing, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchvector_Scalar spacing, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_IntArrayRef(SEXP selfSEXP, SEXP spacingSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_IntArrayRef(self, spacing, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_int64_t
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_int64_t(XPtrTorchTensor self, XPtrTorchTensorList spacing, XPtrTorchoptional_index_int64_t dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_int64_t(SEXP selfSEXP, SEXP spacingSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_int64_t(self, spacing, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensorList spacing, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t edge_order);
RcppExport SEXP _torch_cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_IntArrayRef(SEXP selfSEXP, SEXP spacingSEXP, SEXP dimSEXP, SEXP edge_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type edge_order(edge_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_IntArrayRef(self, spacing, dim, edge_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_div_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_div_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_div_self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_div_self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_self_Tensor_other_Tensor_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view(out, self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_div_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_div_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_div_self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_div_self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_self_Tensor_other_Scalar_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_divide_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_divide_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_divide_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_divide_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_divide_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_divide_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_divide_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_divide_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view(out, self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view(self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_true_divide_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_true_divide_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_true_divide_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_true_divide_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_true_divide_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_true_divide_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_true_divide_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_true_divide_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dot_self_Tensor_tensor_Tensor
XPtrTorchTensor cpp_torch_namespace_dot_self_Tensor_tensor_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor);
RcppExport SEXP _torch_cpp_torch_namespace_dot_self_Tensor_tensor_Tensor(SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dot_self_Tensor_tensor_Tensor(self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor
XPtrTorchTensor cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor tensor);
RcppExport SEXP _torch_cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor(out, self, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vdot_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_vdot_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_vdot_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vdot_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_einsum_equation_c10string_view_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_einsum_equation_c10string_view_tensors_TensorList(XPtrTorchstring_view equation, XPtrTorchTensorList tensors, XPtrTorchOptionalIntArrayRef path);
RcppExport SEXP _torch_cpp_torch_namespace_einsum_equation_c10string_view_tensors_TensorList(SEXP equationSEXP, SEXP tensorsSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type equation(equationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_einsum_equation_c10string_view_tensors_TensorList(equation, tensors, path));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor(XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchint64_t padding_idx, XPtrTorchbool scale_grad_by_freq, XPtrTorchbool sparse);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor(SEXP weightSEXP, SEXP indicesSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor(weight, indices, padding_idx, scale_grad_by_freq, sparse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool
XPtrTorchTensor cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool(XPtrTorchTensor grad, XPtrTorchIndexTensor indices, XPtrTorchint64_t num_weights, XPtrTorchint64_t padding_idx, XPtrTorchbool scale_grad_by_freq, XPtrTorchbool sparse);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool(SEXP gradSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool
XPtrTorchTensor cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(XPtrTorchTensor grad_output, XPtrTorchIndexTensor indices, XPtrTorchint64_t num_weights, XPtrTorchint64_t padding_idx, XPtrTorchbool scale_grad_by_freq);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(SEXP grad_outputSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double
XPtrTorchTensor cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double(XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchdouble max_norm, XPtrTorchdouble norm_type);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double(SEXP selfSEXP, SEXP indicesSEXP, SEXP max_normSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type max_norm(max_normSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double(self, indices, max_norm, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool
XPtrTorchTensor cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(XPtrTorchTensor grad, XPtrTorchIndexTensor indices, XPtrTorchint64_t num_weights, XPtrTorchint64_t padding_idx, XPtrTorchbool scale_grad_by_freq);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(SEXP gradSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(grad, indices, num_weights, padding_idx, scale_grad_by_freq));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor
Rcpp::List cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor(XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchbool include_last_offset, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor(SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP include_last_offsetSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_last_offset(include_last_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__rowwise_prune_weight_Tensor_mask_Tensor_compressed_indices_dtype_ScalarType
Rcpp::List cpp_torch_namespace__rowwise_prune_weight_Tensor_mask_Tensor_compressed_indices_dtype_ScalarType(XPtrTorchTensor weight, XPtrTorchTensor mask, XPtrTorchDtype compressed_indices_dtype);
RcppExport SEXP _torch_cpp_torch_namespace__rowwise_prune_weight_Tensor_mask_Tensor_compressed_indices_dtype_ScalarType(SEXP weightSEXP, SEXP maskSEXP, SEXP compressed_indices_dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type compressed_indices_dtype(compressed_indices_dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__rowwise_prune_weight_Tensor_mask_Tensor_compressed_indices_dtype_ScalarType(weight, mask, compressed_indices_dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_row_stack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_row_stack_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_row_stack_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_row_stack_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_row_stack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_row_stack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_row_stack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_row_stack_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool
Rcpp::List cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool(XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchbool include_last_offset);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool(SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP include_last_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_last_offset(include_last_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool_padding_idx_int64_t
Rcpp::List cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool_padding_idx_int64_t(XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchbool include_last_offset, XPtrTorchoptional_int64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool_padding_idx_int64_t(SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP include_last_offsetSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_last_offset(include_last_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool_padding_idx_int64_t(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor
Rcpp::List cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchbool include_last_offset, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP include_last_offsetSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_last_offset(include_last_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor
XPtrTorchTensor cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor(XPtrTorchTensor grad, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchTensor offset2bag, XPtrTorchTensor bag_size, XPtrTorchTensor maximum_indices, XPtrTorchint64_t num_weights, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor(SEXP gradSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP maximum_indicesSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type maximum_indices(maximum_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor
XPtrTorchTensor cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(XPtrTorchTensor grad, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchTensor offset2bag, XPtrTorchTensor bag_size, XPtrTorchint64_t num_weights, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(SEXP gradSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP per_sample_weightsSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor
XPtrTorchTensor cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(XPtrTorchTensor grad, XPtrTorchIndexTensor indices, XPtrTorchTensor offset2bag, XPtrTorchTensor bag_size, XPtrTorchTensor maximum_indices, XPtrTorchint64_t num_weights, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(SEXP gradSEXP, SEXP indicesSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP maximum_indicesSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP per_sample_weightsSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type maximum_indices(maximum_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(grad, indices, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t
XPtrTorchTensor cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(XPtrTorchTensor grad, XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchTensor offset2bag, XPtrTorchint64_t mode, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(SEXP gradSEXP, SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP modeSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(grad, weight, indices, offsets, offset2bag, mode, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList(size, names, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_empty_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_size_IntArrayRef(size, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef(size, options, scale, zero_point, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t
XPtrTorchTensor cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(XPtrTorchIntArrayRef size, XPtrTorchTensor scales, XPtrTorchTensor zero_points, XPtrTorchint64_t axis, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(SEXP sizeSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP axisSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(size, scales, zero_points, axis, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__resize_output__self_Tensor_size_IntArrayRef_device_Device
XPtrTorchTensor cpp_torch_namespace__resize_output__self_Tensor_size_IntArrayRef_device_Device(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_namespace__resize_output__self_Tensor_size_IntArrayRef_device_Device(SEXP selfSEXP, SEXP sizeSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__resize_output__self_Tensor_size_IntArrayRef_device_Device(self, size, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor
XPtrTorchTensor cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor(XPtrTorchIntArrayRef size, XPtrTorchTensor qtensor, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor(SEXP sizeSEXP, SEXP qtensorSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qtensor(qtensorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor(size, qtensor, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef(out, size, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_like_self_Tensor
XPtrTorchTensor cpp_torch_namespace_empty_like_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_like_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_like_self_Tensor(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef(SEXP sizeSEXP, SEXP strideSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef(size, stride, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erf_self_Tensor
XPtrTorchTensor cpp_torch_namespace_erf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erf__self_Tensor
XPtrTorchTensor cpp_torch_namespace_erf__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erf__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erf__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erf_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_erf_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erf_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erf_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfc_self_Tensor
XPtrTorchTensor cpp_torch_namespace_erfc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erfc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfc__self_Tensor
XPtrTorchTensor cpp_torch_namespace_erfc__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erfc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp_self_Tensor
XPtrTorchTensor cpp_torch_namespace_exp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp__self_Tensor
XPtrTorchTensor cpp_torch_namespace_exp__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_exp__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_exp_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_exp_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_exp2_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_exp2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp2__self_Tensor
XPtrTorchTensor cpp_torch_namespace_exp2__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_exp2__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp2__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expm1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_expm1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_expm1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expm1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expm1__self_Tensor
XPtrTorchTensor cpp_torch_namespace_expm1__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_expm1__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expm1__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_n_int64_t
XPtrTorchTensor cpp_torch_namespace_eye_n_int64_t(XPtrTorchint64_t n, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_eye_n_int64_t(SEXP nSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_n_int64_t(n, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_n_int64_t_m_int64_t
XPtrTorchTensor cpp_torch_namespace_eye_n_int64_t_m_int64_t(XPtrTorchint64_t n, XPtrTorchint64_t m, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_eye_n_int64_t_m_int64_t(SEXP nSEXP, SEXP mSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_n_int64_t_m_int64_t(n, m, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_out_out_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_eye_out_out_Tensor_n_int64_t(XPtrTorchTensor out, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t(SEXP outSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_out_out_Tensor_n_int64_t(out, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t
XPtrTorchTensor cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t(XPtrTorchTensor out, XPtrTorchint64_t n, XPtrTorchint64_t m);
RcppExport SEXP _torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t(SEXP outSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t(out, n, m));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t start_dim, XPtrTorchindex_int64_t end_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type end_dim(end_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t(self, start_dim, end_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(XPtrTorchTensor self, XPtrTorchindex_int64_t start_dim, XPtrTorchindex_int64_t end_dim, XPtrTorchDimname out_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname start_dim, XPtrTorchDimname end_dim, XPtrTorchDimname out_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(SEXP selfSEXP, SEXP start_dimSEXP, SEXP end_dimSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type start_dim(start_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type end_dim(end_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname(self, start_dim, end_dim, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimnameList dims, XPtrTorchDimname out_dim);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(SEXP selfSEXP, SEXP dimsSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname(self, dims, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIntArrayRef sizes);
RcppExport SEXP _torch_cpp_torch_namespace_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef(self, dim, sizes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIntArrayRef sizes, XPtrTorchDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP sizesSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList(self, dim, sizes, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill_self_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_fill_self_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_fill_self_Tensor_value_Scalar(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill_self_Tensor_value_Scalar(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill_self_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_fill_self_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_fill_self_Tensor_value_Tensor(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill_self_Tensor_value_Tensor(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill__self_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_fill__self_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_fill__self_Tensor_value_Scalar(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill__self_Tensor_value_Scalar(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill__self_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_fill__self_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_fill__self_Tensor_value_Tensor(SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill__self_Tensor_value_Tensor(self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_floor_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_floor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor__self_Tensor
XPtrTorchTensor cpp_torch_namespace_floor__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_floor__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_floor_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_floor_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frac_self_Tensor
XPtrTorchTensor cpp_torch_namespace_frac_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_frac_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frac_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frac__self_Tensor
XPtrTorchTensor cpp_torch_namespace_frac__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_frac__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frac__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frac_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_frac_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_frac_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frac_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchScalar fill_value, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList(SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList(size, fill_value, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar
XPtrTorchTensor cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar(XPtrTorchIntArrayRef size, XPtrTorchScalar fill_value, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar(SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar(size, fill_value, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar
XPtrTorchTensor cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchScalar fill_value);
RcppExport SEXP _torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar(SEXP outSEXP, SEXP sizeSEXP, SEXP fill_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar(out, size, fill_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar
XPtrTorchTensor cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar fill_value, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar(SEXP selfSEXP, SEXP fill_valueSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar(self, fill_value, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_from_file_filename_c10string_view
XPtrTorchTensor cpp_torch_namespace_from_file_filename_c10string_view(XPtrTorchstring_view filename, XPtrTorchoptional_bool shared, XPtrTorchoptional_int64_t size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_from_file_filename_c10string_view(SEXP filenameSEXP, SEXP sharedSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type shared(sharedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_from_file_filename_c10string_view(filename, shared, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gcd_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_gcd_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_gcd_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gcd_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gcd__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_gcd__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_gcd__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gcd__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lcm_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_lcm_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_lcm_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lcm_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lcm__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_lcm__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_lcm__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lcm__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(grad_output, input, grid, interpolation_mode, padding_mode, align_corners, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
Rcpp::List cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(grad_output, input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(grad_output, input, grid, interpolation_mode, padding_mode, align_corners, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hann_window_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_hann_window_window_length_int64_t(XPtrTorchint64_t window_length, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_hann_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hann_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_hamming_window_window_length_int64_t(XPtrTorchint64_t window_length, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double
XPtrTorchTensor cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchdouble alpha, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP alphaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double(window_length, periodic, alpha, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double
XPtrTorchTensor cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchdouble alpha, XPtrTorchdouble beta, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double(window_length, periodic, alpha, beta, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kaiser_window_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_kaiser_window_window_length_int64_t(XPtrTorchint64_t window_length, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_kaiser_window_window_length_int64_t(SEXP window_lengthSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kaiser_window_window_length_int64_t(window_length, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool(window_length, periodic, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double
XPtrTorchTensor cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double(XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchdouble beta, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double(SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP betaSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double(window_length, periodic, beta, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchdouble margin, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP marginSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor(self, target, margin, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t(XPtrTorchTensor input, XPtrTorchint64_t num_groups, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchdouble eps, XPtrTorchbool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t(SEXP inputSEXP, SEXP num_groupsSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_groups(num_groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t(input, num_groups, weight, bias, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double
Rcpp::List cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t HxW, XPtrTorchint64_t group, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HxWSEXP, SEXP groupSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type HxW(HxWSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type group(groupSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double(input, weight, bias, False, C, HxW, group, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3(XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor rstd, XPtrTorchOptionalTensor weight, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t HxW, XPtrTorchint64_t group, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3(SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP rstdSEXP, SEXP weightSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HxWSEXP, SEXP groupSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rstd(rstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type HxW(HxWSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type group(groupSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3(grad_out, input, mean, rstd, weight, False, C, HxW, group, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_r2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool
XPtrTorchTensor cpp_torch_namespace__fft_r2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t normalization, XPtrTorchbool onesided);
RcppExport SEXP _torch_cpp_torch_namespace__fft_r2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP normalizationSEXP, SEXP onesidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type onesided(onesidedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_r2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool(self, dim, normalization, onesided));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_r2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool
XPtrTorchTensor cpp_torch_namespace__fft_r2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t normalization, XPtrTorchbool onesided);
RcppExport SEXP _torch_cpp_torch_namespace__fft_r2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP normalizationSEXP, SEXP onesidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type onesided(onesidedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_r2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool(out, self, dim, normalization, onesided));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_c2r_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t
XPtrTorchTensor cpp_torch_namespace__fft_c2r_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t normalization, XPtrTorchint64_t last_dim_size);
RcppExport SEXP _torch_cpp_torch_namespace__fft_c2r_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP normalizationSEXP, SEXP last_dim_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type last_dim_size(last_dim_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_c2r_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t(self, dim, normalization, last_dim_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_c2r_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t
XPtrTorchTensor cpp_torch_namespace__fft_c2r_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t normalization, XPtrTorchint64_t last_dim_size);
RcppExport SEXP _torch_cpp_torch_namespace__fft_c2r_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP normalizationSEXP, SEXP last_dim_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type last_dim_size(last_dim_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_c2r_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t(out, self, dim, normalization, last_dim_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_c2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool
XPtrTorchTensor cpp_torch_namespace__fft_c2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t normalization, XPtrTorchbool forward);
RcppExport SEXP _torch_cpp_torch_namespace__fft_c2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP normalizationSEXP, SEXP forwardSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type forward(forwardSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_c2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool(self, dim, normalization, forward));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fft_c2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool
XPtrTorchTensor cpp_torch_namespace__fft_c2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchint64_t normalization, XPtrTorchbool forward);
RcppExport SEXP _torch_cpp_torch_namespace__fft_c2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP normalizationSEXP, SEXP forwardSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type normalization(normalizationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type forward(forwardSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fft_c2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool(out, self, dim, normalization, forward));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__validate_compressed_sparse_indices_is_crow_bool_compressed_idx_Tensor_plain_idx_Tensor_cdim_int64_t_dim_int64_t_nnz_int64_t
void cpp_torch_namespace__validate_compressed_sparse_indices_is_crow_bool_compressed_idx_Tensor_plain_idx_Tensor_cdim_int64_t_dim_int64_t_nnz_int64_t(XPtrTorchbool is_crow, XPtrTorchTensor compressed_idx, XPtrTorchTensor plain_idx, XPtrTorchint64_t cdim, XPtrTorchindex_int64_t dim, XPtrTorchint64_t nnz);
RcppExport SEXP _torch_cpp_torch_namespace__validate_compressed_sparse_indices_is_crow_bool_compressed_idx_Tensor_plain_idx_Tensor_cdim_int64_t_dim_int64_t_nnz_int64_t(SEXP is_crowSEXP, SEXP compressed_idxSEXP, SEXP plain_idxSEXP, SEXP cdimSEXP, SEXP dimSEXP, SEXP nnzSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_crow(is_crowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type compressed_idx(compressed_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type plain_idx(plain_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type cdim(cdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type nnz(nnzSEXP);
    cpp_torch_namespace__validate_compressed_sparse_indices_is_crow_bool_compressed_idx_Tensor_plain_idx_Tensor_cdim_int64_t_dim_int64_t_nnz_int64_t(is_crow, compressed_idx, plain_idx, cdim, dim, nnz);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t
XPtrTorchint64_t cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t(XPtrTorchint64_t device_index);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t(SEXP device_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type device_index(device_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t(device_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t
XPtrTorchint64_t cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t(XPtrTorchint64_t device_index);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t(SEXP device_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type device_index(device_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t(device_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t
void cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t(XPtrTorchint64_t device_index, XPtrTorchint64_t max_size);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t(SEXP device_indexSEXP, SEXP max_sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type device_index(device_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_size(max_sizeSEXP);
    cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t(device_index, max_size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t
void cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t(XPtrTorchint64_t device_index);
RcppExport SEXP _torch_cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t(SEXP device_indexSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type device_index(device_indexSEXP);
    cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t(device_index);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_index_self_Tensor_indices_constc10Listc10optionalTensor
XPtrTorchTensor cpp_torch_namespace_index_self_Tensor_indices_constc10Listc10optionalTensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices);
RcppExport SEXP _torch_cpp_torch_namespace_index_self_Tensor_indices_constc10Listc10optionalTensor(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_self_Tensor_indices_constc10Listc10optionalTensor(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor
XPtrTorchTensor cpp_torch_namespace_index_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices);
RcppExport SEXP _torch_cpp_torch_namespace_index_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor(out, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_index_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_index_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(out, self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__index_put_impl__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace__index_put_impl__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate, XPtrTorchbool unsafe);
RcppExport SEXP _torch_cpp_torch_namespace__index_put_impl__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP, SEXP unsafeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unsafe(unsafeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__index_put_impl__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(self, indices, values, accumulate, unsafe));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool
XPtrTorchTensor cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool use_input_stats, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchbool cudnn_enabled);
RcppExport SEXP _torch_cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP use_input_statsSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP cudnn_enabledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_input_stats(use_input_statsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isclose_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_isclose_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchdouble rtol, XPtrTorchdouble atol, XPtrTorchbool equal_nan);
RcppExport SEXP _torch_cpp_torch_namespace_isclose_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP rtolSEXP, SEXP atolSEXP, SEXP equal_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type equal_nan(equal_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isclose_self_Tensor_other_Tensor(self, other, rtol, atol, equal_nan));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_elements_Tensor
XPtrTorchTensor cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_elements_Tensor(XPtrTorchTensor out, XPtrTorchTensor elements, XPtrTorchTensor test_elements, XPtrTorchbool assume_unique, XPtrTorchbool invert);
RcppExport SEXP _torch_cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_elements_Tensor(SEXP outSEXP, SEXP elementsSEXP, SEXP test_elementsSEXP, SEXP assume_uniqueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type elements(elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type test_elements(test_elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type assume_unique(assume_uniqueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_elements_Tensor(out, elements, test_elements, assume_unique, invert));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isin_elements_Tensor_test_elements_Tensor
XPtrTorchTensor cpp_torch_namespace_isin_elements_Tensor_test_elements_Tensor(XPtrTorchTensor elements, XPtrTorchTensor test_elements, XPtrTorchbool assume_unique, XPtrTorchbool invert);
RcppExport SEXP _torch_cpp_torch_namespace_isin_elements_Tensor_test_elements_Tensor(SEXP elementsSEXP, SEXP test_elementsSEXP, SEXP assume_uniqueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type elements(elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type test_elements(test_elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type assume_unique(assume_uniqueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isin_elements_Tensor_test_elements_Tensor(elements, test_elements, assume_unique, invert));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_element_Scalar
XPtrTorchTensor cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_element_Scalar(XPtrTorchTensor out, XPtrTorchTensor elements, XPtrTorchScalar test_element, XPtrTorchbool assume_unique, XPtrTorchbool invert);
RcppExport SEXP _torch_cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_element_Scalar(SEXP outSEXP, SEXP elementsSEXP, SEXP test_elementSEXP, SEXP assume_uniqueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type elements(elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type test_element(test_elementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type assume_unique(assume_uniqueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_element_Scalar(out, elements, test_element, assume_unique, invert));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isin_elements_Tensor_test_element_Scalar
XPtrTorchTensor cpp_torch_namespace_isin_elements_Tensor_test_element_Scalar(XPtrTorchTensor elements, XPtrTorchScalar test_element, XPtrTorchbool assume_unique, XPtrTorchbool invert);
RcppExport SEXP _torch_cpp_torch_namespace_isin_elements_Tensor_test_element_Scalar(SEXP elementsSEXP, SEXP test_elementSEXP, SEXP assume_uniqueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type elements(elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type test_element(test_elementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type assume_unique(assume_uniqueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isin_elements_Tensor_test_element_Scalar(elements, test_element, assume_unique, invert));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isin_out_out_Tensor_element_Scalar_test_elements_Tensor
XPtrTorchTensor cpp_torch_namespace_isin_out_out_Tensor_element_Scalar_test_elements_Tensor(XPtrTorchTensor out, XPtrTorchScalar element, XPtrTorchTensor test_elements, XPtrTorchbool assume_unique, XPtrTorchbool invert);
RcppExport SEXP _torch_cpp_torch_namespace_isin_out_out_Tensor_element_Scalar_test_elements_Tensor(SEXP outSEXP, SEXP elementSEXP, SEXP test_elementsSEXP, SEXP assume_uniqueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type element(elementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type test_elements(test_elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type assume_unique(assume_uniqueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isin_out_out_Tensor_element_Scalar_test_elements_Tensor(out, element, test_elements, assume_unique, invert));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isin_element_Scalar_test_elements_Tensor
XPtrTorchTensor cpp_torch_namespace_isin_element_Scalar_test_elements_Tensor(XPtrTorchScalar element, XPtrTorchTensor test_elements, XPtrTorchbool assume_unique, XPtrTorchbool invert);
RcppExport SEXP _torch_cpp_torch_namespace_isin_element_Scalar_test_elements_Tensor(SEXP elementSEXP, SEXP test_elementsSEXP, SEXP assume_uniqueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type element(elementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type test_elements(test_elementsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type assume_unique(assume_uniqueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isin_element_Scalar_test_elements_Tensor(element, test_elements, assume_unique, invert));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isnan_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isnan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isnan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isnan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_distributed_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_distributed_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_distributed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_distributed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_floating_point_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_floating_point_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_floating_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_floating_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_complex_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_complex_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_complex_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_complex_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_conj_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_conj_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_conj_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_conj_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__is_zerotensor_self_Tensor
XPtrTorchbool cpp_torch_namespace__is_zerotensor_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__is_zerotensor_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__is_zerotensor_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_neg_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_neg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isreal_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isreal_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isreal_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isreal_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_nonzero_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_nonzero_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_signed_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_signed_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_signed_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_signed_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_is_inference_self_Tensor
XPtrTorchbool cpp_torch_namespace_is_inference_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_is_inference_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_is_inference_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kl_div_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_kl_div_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchbool log_target);
RcppExport SEXP _torch_cpp_torch_namespace_kl_div_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP log_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type log_target(log_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kl_div_self_Tensor_target_Tensor(self, target, reduction, log_target));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kron_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_kron_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_kron_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kron_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kron_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_kron_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_kron_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kron_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_int64_t
Rcpp::List cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_int64_t(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_int64_t(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_int64_t
Rcpp::List cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_int64_t(values, indices, self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname
Rcpp::List cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname(self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname
Rcpp::List cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname(values, indices, self, k, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef(XPtrTorchTensor input, XPtrTorchIntArrayRef normalized_shape, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchdouble eps, XPtrTorchbool cudnn_enable);
RcppExport SEXP _torch_cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef(SEXP inputSEXP, SEXP normalized_shapeSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP epsSEXP, SEXP cudnn_enableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type normalized_shape(normalized_shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enable(cudnn_enableSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef(input, normalized_shape, weight, bias, eps, cudnn_enable));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_layer_norm_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double
Rcpp::List cpp_torch_namespace_native_layer_norm_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double(XPtrTorchTensor input, XPtrTorchIntArrayRef normalized_shape, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_layer_norm_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double(SEXP inputSEXP, SEXP normalized_shapeSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type normalized_shape(normalized_shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_layer_norm_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double(input, normalized_shape, weight, bias, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3(XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchIntArrayRef normalized_shape, XPtrTorchTensor mean, XPtrTorchTensor rstd, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3(SEXP grad_outSEXP, SEXP inputSEXP, SEXP normalized_shapeSEXP, SEXP meanSEXP, SEXP rstdSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type normalized_shape(normalized_shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rstd(rstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3(grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nan_to_num_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nan_to_num_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble nan, XPtrTorchOptionaldouble posinf, XPtrTorchOptionaldouble neginf);
RcppExport SEXP _torch_cpp_torch_namespace_nan_to_num_self_Tensor(SEXP selfSEXP, SEXP nanSEXP, SEXP posinfSEXP, SEXP neginfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type nan(nanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type posinf(posinfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type neginf(neginfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nan_to_num_self_Tensor(self, nan, posinf, neginf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nan_to_num__self_Tensor
XPtrTorchTensor cpp_torch_namespace_nan_to_num__self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble nan, XPtrTorchOptionaldouble posinf, XPtrTorchOptionaldouble neginf);
RcppExport SEXP _torch_cpp_torch_namespace_nan_to_num__self_Tensor(SEXP selfSEXP, SEXP nanSEXP, SEXP posinfSEXP, SEXP neginfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type nan(nanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type posinf(posinfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type neginf(neginfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nan_to_num__self_Tensor(self, nan, posinf, neginf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nan_to_num_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nan_to_num_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionaldouble nan, XPtrTorchOptionaldouble posinf, XPtrTorchOptionaldouble neginf);
RcppExport SEXP _torch_cpp_torch_namespace_nan_to_num_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nanSEXP, SEXP posinfSEXP, SEXP neginfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type nan(nanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type posinf(posinfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type neginf(neginfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nan_to_num_out_out_Tensor_self_Tensor(out, self, nan, posinf, neginf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linear_input_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_linear_input_Tensor_weight_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_linear_input_Tensor_weight_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linear_input_Tensor_weight_Tensor(input, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(self, grad_output, weight, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linear_out_out_Tensor_input_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_linear_out_out_Tensor_input_Tensor_weight_Tensor(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_linear_out_out_Tensor_input_Tensor_weight_Tensor(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linear_out_out_Tensor_input_Tensor_weight_Tensor(out, input, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_self_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_linear_self_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_self_Tensor_weight_Tensor(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_self_Tensor_weight_Tensor(self, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_backward_input_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_linear_backward_input_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor(XPtrTorchIntArrayRef input_size, XPtrTorchTensor grad_output, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_backward_input_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor(SEXP input_sizeSEXP, SEXP grad_outputSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_backward_input_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor(input_size, grad_output, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_backward_weights_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool
Rcpp::List cpp_torch_namespace_mkldnn_linear_backward_weights_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool(XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchbool bias_defined);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_backward_weights_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool(SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP bias_definedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bias_defined(bias_definedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_backward_weights_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool(grad_output, input, weight, bias_defined));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_mkldnn_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(self, grad_output, weight, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor
XPtrTorchTensor cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchTensor packed, XPtrTorchTensor col_offsets, XPtrTorchScalar weight_scale, XPtrTorchScalar weight_zero_point, XPtrTorchTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP packedSEXP, SEXP col_offsetsSEXP, SEXP weight_scaleSEXP, SEXP weight_zero_pointSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed(packedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets(col_offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight_scale(weight_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight_zero_point(weight_zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor
XPtrTorchTensor cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchTensor packed, XPtrTorchTensor col_offsets, XPtrTorchScalar weight_scale, XPtrTorchScalar weight_zero_point, XPtrTorchTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP packedSEXP, SEXP col_offsetsSEXP, SEXP weight_scaleSEXP, SEXP weight_zero_pointSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed(packedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets(col_offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight_scale(weight_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight_zero_point(weight_zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor
Rcpp::List cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor(XPtrTorchTensor input);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor(input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor
XPtrTorchTensor cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor(XPtrTorchTensor input);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor(input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor
XPtrTorchTensor cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor(XPtrTorchTensor input, XPtrTorchTensor packed_weight, XPtrTorchTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor(SEXP inputSEXP, SEXP packed_weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_weight(packed_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor(input, packed_weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor
XPtrTorchTensor cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor(XPtrTorchTensor input, XPtrTorchTensor packed_weight, XPtrTorchTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor(SEXP inputSEXP, SEXP packed_weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_weight(packed_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor(input, packed_weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor
XPtrTorchTensor cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor(XPtrTorchTensor input);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor(input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t
XPtrTorchTensor cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t(XPtrTorchTensor input, XPtrTorchint64_t K, XPtrTorchint64_t False);
RcppExport SEXP _torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t(SEXP inputSEXP, SEXP KSEXP, SEXP FalseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t(input, K, False));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ldexp_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ldexp_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ldexp_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ldexp_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ldexp__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ldexp__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ldexp__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ldexp__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ldexp_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ldexp_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ldexp_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ldexp_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linspace_start_Scalar_end_Scalar_steps_int64_t
XPtrTorchTensor cpp_torch_namespace_linspace_start_Scalar_end_Scalar_steps_int64_t(XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchint64_t steps, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_linspace_start_Scalar_end_Scalar_steps_int64_t(SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linspace_start_Scalar_end_Scalar_steps_int64_t(start, end, steps, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t
XPtrTorchTensor cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t(XPtrTorchTensor out, XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchint64_t steps);
RcppExport SEXP _torch_cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t(out, start, end, steps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log__self_Tensor
XPtrTorchTensor cpp_torch_namespace_log__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log10_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log10_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log10_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log10_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log10__self_Tensor
XPtrTorchTensor cpp_torch_namespace_log10__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log10__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log10__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log10_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log10_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log10_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log10_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log1p_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log1p_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log1p_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log1p_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log1p__self_Tensor
XPtrTorchTensor cpp_torch_namespace_log1p__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log1p__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log1p__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log2_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log2__self_Tensor
XPtrTorchTensor cpp_torch_namespace_log2__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log2__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log2__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log2_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_xlogy_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_xlogy_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_xlogy_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy__self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_xlogy__self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy__self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy__self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy__self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_xlogy__self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy__self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy__self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_xlogy_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logspace_start_Scalar_end_Scalar_steps_int64_t
XPtrTorchTensor cpp_torch_namespace_logspace_start_Scalar_end_Scalar_steps_int64_t(XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchint64_t steps, XPtrTorchdouble base, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_logspace_start_Scalar_end_Scalar_steps_int64_t(SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP baseSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type base(baseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logspace_start_Scalar_end_Scalar_steps_int64_t(start, end, steps, base, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t
XPtrTorchTensor cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t(XPtrTorchTensor out, XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchint64_t steps, XPtrTorchdouble base);
RcppExport SEXP _torch_cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepsSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t(out, start, end, steps, base));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(out, self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchDtype input_dtype);
RcppExport SEXP _torch_cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP input_dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type input_dtype(input_dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(grad_output, output, dim, input_dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace__log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchDtype input_dtype);
RcppExport SEXP _torch_cpp_torch_namespace__log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(SEXP outSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP input_dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type input_dtype(input_dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(out, grad_output, output, dim, input_dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor(XPtrTorchTensor input1, XPtrTorchTensor input2, XPtrTorchTensor target, XPtrTorchdouble margin, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor(SEXP input1SEXP, SEXP input2SEXP, SEXP targetSEXP, SEXP marginSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input1(input1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor(input1, input2, target, margin, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matmul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_matmul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_matmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matmul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matmul_backward_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_matmul_backward_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchTensor other, std::vector<bool> mask);
RcppExport SEXP _torch_cpp_torch_namespace_matmul_backward_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2(SEXP gradSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matmul_backward_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2(grad, self, other, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_power_out_out_Tensor_self_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_matrix_power_out_out_Tensor_self_Tensor_n_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_power_out_out_Tensor_self_Tensor_n_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_power_out_out_Tensor_self_Tensor_n_int64_t(out, self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_exp_self_Tensor
XPtrTorchTensor cpp_torch_namespace_matrix_exp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor
XPtrTorchTensor cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor(XPtrTorchTensor self, XPtrTorchTensor grad);
RcppExport SEXP _torch_cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor(SEXP selfSEXP, SEXP gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor(self, grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__aminmax_self_Tensor
Rcpp::List cpp_torch_namespace__aminmax_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__aminmax_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__aminmax_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_aminmax_self_Tensor
Rcpp::List cpp_torch_namespace_aminmax_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_aminmax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_aminmax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_aminmax_out_min_Tensor_max_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_aminmax_out_min_Tensor_max_Tensor_self_Tensor(XPtrTorchTensor min, XPtrTorchTensor max, XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_aminmax_out_min_Tensor_max_Tensor_self_Tensor(SEXP minSEXP, SEXP maxSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_aminmax_out_min_Tensor_max_Tensor_self_Tensor(min, max, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor
XPtrTorchTensor cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor(XPtrTorchTensor input, XPtrTorchTensor coefficients);
RcppExport SEXP _torch_cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor(SEXP inputSEXP, SEXP coefficientsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type coefficients(coefficientsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor(input, coefficients));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor
XPtrTorchTensor cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor coefficients);
RcppExport SEXP _torch_cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor(SEXP outSEXP, SEXP inputSEXP, SEXP coefficientsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type coefficients(coefficientsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor(out, input, coefficients));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_max_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor max, XPtrTorchTensor max_values, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t(SEXP maxSEXP, SEXP max_valuesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max_values(max_valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t(max, max_values, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_max_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor max, XPtrTorchTensor max_values, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname(SEXP maxSEXP, SEXP max_valuesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max(maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type max_values(max_valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname(max, max_values, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool
XPtrTorchTensor cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool(XPtrTorchTensor grad, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor indices, XPtrTorchIntArrayRef sizes, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool(SEXP gradSEXP, SEXP dimSEXP, SEXP indicesSEXP, SEXP sizesSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool(grad, dim, indices, sizes, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_amax_self_Tensor
XPtrTorchTensor cpp_torch_namespace_amax_self_Tensor(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_amax_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_amax_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_amax_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_amax_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_amax_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_amax_out_out_Tensor_self_Tensor(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool2d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool2d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchTensor input, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool2d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP inputSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool2d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(grad_output, output, input, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool3d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool3d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchTensor input, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool3d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP inputSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool3d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(grad_output, output, input, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mean_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_mean_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmean_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nanmean_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_nanmean_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmean_self_Tensor(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmean_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nanmean_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_nanmean_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmean_out_out_Tensor_self_Tensor(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_self_Tensor
XPtrTorchTensor cpp_torch_namespace_median_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_median_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_median_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_median_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmedian_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nanmedian_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_nanmedian_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmedian_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmedian_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_nanmedian_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nanmedian_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmedian_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmedian_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_nanmedian_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nanmedian_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmedian_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_min_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor min, XPtrTorchTensor min_indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(SEXP minSEXP, SEXP min_indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min_indices(min_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t(min, min_indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_min_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor min, XPtrTorchTensor min_indices, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname(SEXP minSEXP, SEXP min_indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type min_indices(min_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname(min, min_indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_amin_self_Tensor
XPtrTorchTensor cpp_torch_namespace_amin_self_Tensor(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_amin_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_amin_self_Tensor(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_amin_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_amin_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_amin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_amin_out_out_Tensor_self_Tensor(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mps_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace__mps_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace__mps_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mps_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, bias, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mps_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_mps_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mps_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mps_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(self, grad_output, weight, padding, stride, dilation, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, bias, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_rnn_layer_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool
Rcpp::List cpp_torch_namespace_mkldnn_rnn_layer_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool(XPtrTorchTensor input, XPtrTorchTensor weight0, XPtrTorchTensor weight1, XPtrTorchTensor weight2, XPtrTorchTensor weight3, XPtrTorchTensor hx_, XPtrTorchTensor cx_, XPtrTorchbool reverse, XPtrTorchIntArrayRef batch_sizes, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool has_biases, XPtrTorchbool bidirectional, XPtrTorchbool batch_first, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_rnn_layer_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool(SEXP inputSEXP, SEXP weight0SEXP, SEXP weight1SEXP, SEXP weight2SEXP, SEXP weight3SEXP, SEXP hx_SEXP, SEXP cx_SEXP, SEXP reverseSEXP, SEXP batch_sizesSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP has_biasesSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight0(weight0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight1(weight1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight2(weight2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight3(weight3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx_(hx_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx_(cx_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_rnn_layer_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool(input, weight0, weight1, weight2, weight3, hx_, cx_, reverse, batch_sizes, mode, hidden_size, num_layers, has_biases, bidirectional, batch_first, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_rnn_layer_backward_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor
Rcpp::List cpp_torch_namespace_mkldnn_rnn_layer_backward_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor(XPtrTorchTensor input, XPtrTorchTensor weight1, XPtrTorchTensor weight2, XPtrTorchTensor weight3, XPtrTorchTensor weight4, XPtrTorchTensor hx_, XPtrTorchTensor cx_tmp, XPtrTorchTensor output, XPtrTorchTensor hy_, XPtrTorchTensor cy_, XPtrTorchOptionalTensor grad_output, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchbool reverse, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool has_biases, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchbool batch_first, XPtrTorchTensor workspace);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_rnn_layer_backward_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor(SEXP inputSEXP, SEXP weight1SEXP, SEXP weight2SEXP, SEXP weight3SEXP, SEXP weight4SEXP, SEXP hx_SEXP, SEXP cx_tmpSEXP, SEXP outputSEXP, SEXP hy_SEXP, SEXP cy_SEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP reverseSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP has_biasesSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP batch_firstSEXP, SEXP workspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight1(weight1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight2(weight2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight3(weight3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight4(weight4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx_(hx_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx_tmp(cx_tmpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hy_(hy_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cy_(cy_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_rnn_layer_backward_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor(input, weight1, weight2, weight3, weight4, hx_, cx_tmp, output, hy_, cy_, grad_output, grad_hy, grad_cy, reverse, mode, hidden_size, num_layers, has_biases, train, bidirectional, batch_sizes, batch_first, workspace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double
Rcpp::List cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble exponential_average_factor, XPtrTorchdouble epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP exponential_average_factorSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type exponential_average_factor(exponential_average_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double
Rcpp::List cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(XPtrTorchTensor input, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_var, XPtrTorchdouble epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_varSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_var(save_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
XPtrTorchTensor cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
XPtrTorchTensor cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
XPtrTorchTensor cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_miopen_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_miopen_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchTensor z, XPtrTorchoptional_scalar alpha, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP selfSEXP, SEXP weightSEXP, SEXP zSEXP, SEXP alphaSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type z(zSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(self, weight, z, alpha, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor
Rcpp::List cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4
Rcpp::List cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchTensor weight_buf, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchTensor output, XPtrTorchOptionalTensor grad_output, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state, XPtrTorchTensor reserve, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP outputSEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP, SEXP reserveSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mm_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_mm_self_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_mm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor(out, self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor(XPtrTorchTensor sparse, XPtrTorchTensor dense);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor(SEXP sparseSEXP, SEXP denseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dense(denseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor(sparse, dense));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor_reduce_c10string_view(XPtrTorchTensor sparse, XPtrTorchTensor dense, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor_reduce_c10string_view(SEXP sparseSEXP, SEXP denseSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dense(denseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor_reduce_c10string_view(sparse, dense, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sparse_matmul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_sparse_matmul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sparse_matmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sparse_matmul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_mode_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_self_Tensor_dim_int64_t(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_mode_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_self_Tensor_dim_Dimname(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_mul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_mul_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multiply_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_multiply_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_multiply_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multiply_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multiply_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_multiply_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_multiply_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multiply_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mv_self_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_namespace_mv_self_Tensor_vec_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec);
RcppExport SEXP _torch_cpp_torch_namespace_mv_self_Tensor_vec_Tensor(SEXP selfSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mv_self_Tensor_vec_Tensor(self, vec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor
XPtrTorchTensor cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor vec);
RcppExport SEXP _torch_cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor(out, self, vec));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mvlgamma_out_out_Tensor_self_Tensor_p_int64_t
XPtrTorchTensor cpp_torch_namespace_mvlgamma_out_out_Tensor_self_Tensor_p_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t p);
RcppExport SEXP _torch_cpp_torch_namespace_mvlgamma_out_out_Tensor_self_Tensor_p_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mvlgamma_out_out_Tensor_self_Tensor_p_int64_t(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t
XPtrTorchTensor cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t(XPtrTorchTensor self, XPtrTorchint64_t p);
RcppExport SEXP _torch_cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
XPtrTorchTensor cpp_torch_namespace_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_namespace_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_narrow_copy_out_out_Tensor_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
XPtrTorchTensor cpp_torch_namespace_narrow_copy_out_out_Tensor_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_namespace_narrow_copy_out_out_Tensor_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_narrow_copy_out_out_Tensor_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(out, self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t
XPtrTorchTensor cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t
XPtrTorchTensor cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchTensor start, XPtrTorchint64_t length);
RcppExport SEXP _torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t(self, dim, start, length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(input, weight, bias, running_mean, running_var, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor out, XPtrTorchTensor save_mean, XPtrTorchTensor save_invstd, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(SEXP outSEXP, SEXP save_meanSEXP, SEXP save_invstdSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type save_invstd(save_invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(out, save_mean, save_invstd, input, weight, bias, running_mean, running_var, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor running_mean, XPtrTorchTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(input, weight, bias, running_mean, running_var, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor out, XPtrTorchTensor save_mean, XPtrTorchTensor save_invstd, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor running_mean, XPtrTorchTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(SEXP outSEXP, SEXP save_meanSEXP, SEXP save_invstdSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type save_invstd(save_invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(out, save_mean, save_invstd, input, weight, bias, running_mean, running_var, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double(input, weight, bias, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor out, XPtrTorchTensor save_mean, XPtrTorchTensor save_invstd, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double(SEXP outSEXP, SEXP save_meanSEXP, SEXP save_invstdSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type save_invstd(save_invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double(out, save_mean, save_invstd, input, weight, bias, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double
Rcpp::List cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double(XPtrTorchTensor input, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double(SEXP inputSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double(input, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double
XPtrTorchTensor cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(input, weight, bias, mean, invstd, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double
XPtrTorchTensor cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double(out, input, weight, bias, mean, invstd, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t
Rcpp::List cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchint64_t count);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(input, mean, invstd, running_mean, running_var, momentum, eps, count));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor
Rcpp::List cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor(XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchTensor counts);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor(SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor(input, mean, invstd, running_mean, running_var, momentum, eps, counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_invstd, XPtrTorchbool train, XPtrTorchdouble eps, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(SEXP grad_outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_invstdSEXP, SEXP trainSEXP, SEXP epsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_invstd(save_invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool
Rcpp::List cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor weight, XPtrTorchbool input_g, XPtrTorchbool weight_g, XPtrTorchbool bias_g);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP weightSEXP, SEXP input_gSEXP, SEXP weight_gSEXP, SEXP bias_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type input_g(input_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type weight_g(weight_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bias_g(bias_gSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor
XPtrTorchTensor cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor(XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor weight, XPtrTorchTensor mean_dy, XPtrTorchTensor mean_dy_xmu, XPtrTorchTensor count);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor(SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP weightSEXP, SEXP mean_dySEXP, SEXP mean_dy_xmuSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean_dy(mean_dySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean_dy_xmu(mean_dy_xmuSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu, count));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double
Rcpp::List cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(XPtrTorchTensor input, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchdouble momentum);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(SEXP inputSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(input, running_mean, running_var, momentum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(input, weight, bias, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_ones_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_ones_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_like_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ones_like_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_ones_like_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_like_self_Tensor(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor
XPtrTorchTensor cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor(XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchdouble p, XPtrTorchdouble eps, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP epsSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor(x1, x2, p, eps, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor
XPtrTorchTensor cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor(XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchdouble p, XPtrTorchoptional_int64_t compute_mode);
RcppExport SEXP _torch_cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP compute_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type compute_mode(compute_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor(x1, x2, p, compute_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor
XPtrTorchTensor cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor(XPtrTorchTensor x1, XPtrTorchTensor x2);
RcppExport SEXP _torch_cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor(x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t
XPtrTorchTensor cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t(XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchdouble p, XPtrTorchoptional_int64_t compute_mode);
RcppExport SEXP _torch_cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t(SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP compute_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type compute_mode(compute_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t(x1, x2, p, compute_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor
XPtrTorchTensor cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(XPtrTorchTensor grad, XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchdouble p, XPtrTorchTensor cdist);
RcppExport SEXP _torch_cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(SEXP gradSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP cdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cdist(cdistSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(grad, x1, x2, p, cdist));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pdist_self_Tensor
XPtrTorchTensor cpp_torch_namespace_pdist_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble p);
RcppExport SEXP _torch_cpp_torch_namespace_pdist_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pdist_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pdist_forward_self_Tensor
XPtrTorchTensor cpp_torch_namespace__pdist_forward_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble p);
RcppExport SEXP _torch_cpp_torch_namespace__pdist_forward_self_Tensor(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pdist_forward_self_Tensor(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor
XPtrTorchTensor cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchTensor pdist);
RcppExport SEXP _torch_cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor(SEXP gradSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP pdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pdist(pdistSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor(grad, self, p, pdist));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor
XPtrTorchTensor cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor(XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchindex_int64_t dim, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor(SEXP x1SEXP, SEXP x2SEXP, SEXP dimSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor(x1, x2, dim, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_permute_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_permute_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_permute_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_permute_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef source, XPtrTorchIntArrayRef destination);
RcppExport SEXP _torch_cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t
XPtrTorchTensor cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t(XPtrTorchTensor self, XPtrTorchint64_t source, XPtrTorchint64_t destination);
RcppExport SEXP _torch_cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef source, XPtrTorchIntArrayRef destination);
RcppExport SEXP _torch_cpp_torch_namespace_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_moveaxis_self_Tensor_source_int64_t_destination_int64_t
XPtrTorchTensor cpp_torch_namespace_moveaxis_self_Tensor_source_int64_t_destination_int64_t(XPtrTorchTensor self, XPtrTorchint64_t source, XPtrTorchint64_t destination);
RcppExport SEXP _torch_cpp_torch_namespace_moveaxis_self_Tensor_source_int64_t_destination_int64_t(SEXP selfSEXP, SEXP sourceSEXP, SEXP destinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type destination(destinationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_moveaxis_self_Tensor_source_int64_t_destination_int64_t(self, source, destination));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adjoint_self_Tensor
XPtrTorchTensor cpp_torch_namespace_adjoint_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_adjoint_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adjoint_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t
XPtrTorchTensor cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t(XPtrTorchTensor self, XPtrTorchint64_t upscale_factor);
RcppExport SEXP _torch_cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t(SEXP selfSEXP, SEXP upscale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type upscale_factor(upscale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t(self, upscale_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pixel_unshuffle_self_Tensor_downscale_factor_int64_t
XPtrTorchTensor cpp_torch_namespace_pixel_unshuffle_self_Tensor_downscale_factor_int64_t(XPtrTorchTensor self, XPtrTorchint64_t downscale_factor);
RcppExport SEXP _torch_cpp_torch_namespace_pixel_unshuffle_self_Tensor_downscale_factor_int64_t(SEXP selfSEXP, SEXP downscale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type downscale_factor(downscale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pixel_unshuffle_self_Tensor_downscale_factor_int64_t(self, downscale_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t(XPtrTorchTensor self, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t(SEXP selfSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t(self, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_channel_shuffle_self_Tensor_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_native_channel_shuffle_self_Tensor_groups_int64_t(XPtrTorchTensor self, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_native_channel_shuffle_self_Tensor_groups_int64_t(SEXP selfSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_channel_shuffle_self_Tensor_groups_int64_t(self, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pin_memory_self_Tensor
XPtrTorchTensor cpp_torch_namespace__pin_memory_self_Tensor(XPtrTorchTensor self, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_namespace__pin_memory_self_Tensor(SEXP selfSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pin_memory_self_Tensor(self, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pinverse_self_Tensor
XPtrTorchTensor cpp_torch_namespace_pinverse_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble rcond);
RcppExport SEXP _torch_cpp_torch_namespace_pinverse_self_Tensor(SEXP selfSEXP, SEXP rcondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rcond(rcondSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pinverse_self_Tensor(self, rcond));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t
XPtrTorchTensor cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t(XPtrTorchTensor input, XPtrTorchTensor target, XPtrTorchbool log_input, XPtrTorchbool full, XPtrTorchdouble eps, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t(SEXP inputSEXP, SEXP targetSEXP, SEXP log_inputSEXP, SEXP fullSEXP, SEXP epsSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type log_input(log_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t(input, target, log_input, full, eps, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rad2deg_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rad2deg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_rad2deg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rad2deg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rad2deg__self_Tensor
XPtrTorchTensor cpp_torch_namespace_rad2deg__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_rad2deg__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rad2deg__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_deg2rad_self_Tensor
XPtrTorchTensor cpp_torch_namespace_deg2rad_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_deg2rad_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_deg2rad_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_deg2rad__self_Tensor
XPtrTorchTensor cpp_torch_namespace_deg2rad__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_deg2rad__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_deg2rad__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scalar_tensor_s_Scalar
XPtrTorchTensor cpp_torch_namespace_scalar_tensor_s_Scalar(XPtrTorchScalar s, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_scalar_tensor_s_Scalar(SEXP sSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scalar_tensor_s_Scalar(s, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList(SEXP sizeSEXP, SEXP generatorSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList(size, generator, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_rand_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator(XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator(SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator(size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator(out, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_like_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rand_like_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_rand_like_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_like_self_Tensor(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef(XPtrTorchint64_t high, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef(SEXP highSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef(high, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator(XPtrTorchint64_t high, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator(SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator(high, size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef(XPtrTorchint64_t low, XPtrTorchint64_t high, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef(SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef(low, high, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(XPtrTorchint64_t low, XPtrTorchint64_t high, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(low, high, size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchint64_t high, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef(SEXP outSEXP, SEXP highSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef(out, high, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator(XPtrTorchTensor out, XPtrTorchint64_t high, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator(out, high, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchint64_t low, XPtrTorchint64_t high, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef(SEXP outSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef(out, low, high, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(XPtrTorchTensor out, XPtrTorchint64_t low, XPtrTorchint64_t high, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator(out, low, high, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_self_Tensor_high_int64_t
XPtrTorchTensor cpp_torch_namespace_randint_like_self_Tensor_high_int64_t(XPtrTorchTensor self, XPtrTorchint64_t high, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t(SEXP selfSEXP, SEXP highSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_self_Tensor_high_int64_t(self, high, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t
XPtrTorchTensor cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t(XPtrTorchTensor self, XPtrTorchint64_t low, XPtrTorchint64_t high, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t(SEXP selfSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t(self, low, high, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_randn_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator(XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator(SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator(size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList(SEXP sizeSEXP, SEXP generatorSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList(size, generator, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator(SEXP outSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator(out, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_like_self_Tensor
XPtrTorchTensor cpp_torch_namespace_randn_like_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randn_like_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_like_self_Tensor(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_n_int64_t
XPtrTorchTensor cpp_torch_namespace_randperm_n_int64_t(XPtrTorchint64_t n, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_n_int64_t(SEXP nSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_n_int64_t(n, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_n_int64_t_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randperm_n_int64_t_generator_Generator(XPtrTorchint64_t n, XPtrTorchOptionalGenerator generator, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_n_int64_t_generator_Generator(SEXP nSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_n_int64_t_generator_Generator(n, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t(XPtrTorchTensor out, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t(SEXP outSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t(out, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator
XPtrTorchTensor cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator(XPtrTorchTensor out, XPtrTorchint64_t n, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator(SEXP outSEXP, SEXP nSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator(out, n, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_range_start_Scalar_end_Scalar
XPtrTorchTensor cpp_torch_namespace_range_start_Scalar_end_Scalar(XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchScalar step, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_range_start_Scalar_end_Scalar(SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type step(stepSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_range_start_Scalar_end_Scalar(start, end, step, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar
XPtrTorchTensor cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar(XPtrTorchTensor out, XPtrTorchScalar start, XPtrTorchScalar end, XPtrTorchScalar step);
RcppExport SEXP _torch_cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar(out, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ravel_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ravel_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_ravel_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ravel_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reciprocal_self_Tensor
XPtrTorchTensor cpp_torch_namespace_reciprocal_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_reciprocal_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reciprocal_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reciprocal__self_Tensor
XPtrTorchTensor cpp_torch_namespace_reciprocal__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_reciprocal__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reciprocal__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_neg_self_Tensor
XPtrTorchTensor cpp_torch_namespace_neg_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_neg_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_neg_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_neg__self_Tensor
XPtrTorchTensor cpp_torch_namespace_neg__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_neg__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_neg__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_neg_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_neg_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_neg_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_neg_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_negative_self_Tensor
XPtrTorchTensor cpp_torch_namespace_negative_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_negative_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_negative_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_negative__self_Tensor
XPtrTorchTensor cpp_torch_namespace_negative__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_negative__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_negative__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_negative_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_negative_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_negative_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_negative_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_repeats_Tensor
XPtrTorchTensor cpp_torch_namespace_repeat_interleave_repeats_Tensor(XPtrTorchTensor repeats, XPtrTorchoptional_int64_t output_size);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_repeats_Tensor(SEXP repeatsSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_repeats_Tensor(repeats, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor
XPtrTorchTensor cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor(XPtrTorchTensor self, XPtrTorchTensor repeats, XPtrTorchoptional_index_int64_t dim, XPtrTorchoptional_int64_t output_size);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor(self, repeats, dim, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t
XPtrTorchTensor cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t(XPtrTorchTensor self, XPtrTorchint64_t repeats, XPtrTorchoptional_index_int64_t dim, XPtrTorchoptional_int64_t output_size);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t(SEXP selfSEXP, SEXP repeatsSEXP, SEXP dimSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t(self, repeats, dim, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef shape);
RcppExport SEXP _torch_cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__reshape_copy_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__reshape_copy_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__reshape_copy_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__reshape_copy_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef shape);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef(SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef(self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round_self_Tensor
XPtrTorchTensor cpp_torch_namespace_round_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_round_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round__self_Tensor
XPtrTorchTensor cpp_torch_namespace_round__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_round__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_round_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round_self_Tensor_decimals_int64_t
XPtrTorchTensor cpp_torch_namespace_round_self_Tensor_decimals_int64_t(XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_namespace_round_self_Tensor_decimals_int64_t(SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round_self_Tensor_decimals_int64_t(self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round__self_Tensor_decimals_int64_t
XPtrTorchTensor cpp_torch_namespace_round__self_Tensor_decimals_int64_t(XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_namespace_round__self_Tensor_decimals_int64_t(SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round__self_Tensor_decimals_int64_t(self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_round_out_out_Tensor_self_Tensor_decimals_int64_t
XPtrTorchTensor cpp_torch_namespace_round_out_out_Tensor_self_Tensor_decimals_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor_decimals_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_round_out_out_Tensor_self_Tensor_decimals_int64_t(out, self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rrelu_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_self_Tensor(SEXP selfSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_self_Tensor(self, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_rrelu__self_Tensor(XPtrTorchTensor self, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu__self_Tensor(SEXP selfSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu__self_Tensor(self, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_relu_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_relu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_relu__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_relu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu6_self_Tensor
XPtrTorchTensor cpp_torch_namespace_relu6_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_relu6_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu6_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu6__self_Tensor
XPtrTorchTensor cpp_torch_namespace_relu6__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_relu6__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu6__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prelu_self_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_prelu_self_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace_prelu_self_Tensor_weight_Tensor(SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prelu_self_Tensor_weight_Tensor(self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__prelu_kernel_self_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace__prelu_kernel_self_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace__prelu_kernel_self_Tensor_weight_Tensor(SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__prelu_kernel_self_Tensor_weight_Tensor(self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__prelu_kernel_backward_grad_output_Tensor_self_Tensor_weight_Tensor
Rcpp::List cpp_torch_namespace__prelu_kernel_backward_grad_output_Tensor_self_Tensor_weight_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace__prelu_kernel_backward_grad_output_Tensor_self_Tensor_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__prelu_kernel_backward_grad_output_Tensor_self_Tensor_weight_Tensor(grad_output, self, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_gelu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchstring_view approximate);
RcppExport SEXP _torch_cpp_torch_namespace_gelu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP approximateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type approximate(approximateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu_out_out_Tensor_self_Tensor(out, self, approximate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_gelu__self_Tensor(XPtrTorchTensor self, XPtrTorchstring_view approximate);
RcppExport SEXP _torch_cpp_torch_namespace_gelu__self_Tensor(SEXP selfSEXP, SEXP approximateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type approximate(approximateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu__self_Tensor(self, approximate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_gelu_self_Tensor(XPtrTorchTensor self, XPtrTorchstring_view approximate);
RcppExport SEXP _torch_cpp_torch_namespace_gelu_self_Tensor(SEXP selfSEXP, SEXP approximateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type approximate(approximateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu_self_Tensor(self, approximate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_gelu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchstring_view approximate);
RcppExport SEXP _torch_cpp_torch_namespace_gelu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP approximateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type approximate(approximateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(grad_input, grad_output, self, approximate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gelu_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_gelu_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchstring_view approximate);
RcppExport SEXP _torch_cpp_torch_namespace_gelu_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP approximateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type approximate(approximateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gelu_backward_grad_output_Tensor_self_Tensor(grad_output, self, approximate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor(XPtrTorchTensor grad, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor(SEXP gradSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor(grad, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardshrink_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardshrink_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_hardshrink_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardshrink_out_out_Tensor_self_Tensor(out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardshrink_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardshrink_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_hardshrink_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardshrink_self_Tensor(self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardshrink_backward_out_grad_input_Tensor_grad_out_Tensor_self_Tensor_lambd_Scalar
XPtrTorchTensor cpp_torch_namespace_hardshrink_backward_out_grad_input_Tensor_grad_out_Tensor_self_Tensor_lambd_Scalar(XPtrTorchTensor grad_input, XPtrTorchTensor grad_out, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_hardshrink_backward_out_grad_input_Tensor_grad_out_Tensor_self_Tensor_lambd_Scalar(SEXP grad_inputSEXP, SEXP grad_outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardshrink_backward_out_grad_input_Tensor_grad_out_Tensor_self_Tensor_lambd_Scalar(grad_input, grad_out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar
XPtrTorchTensor cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(XPtrTorchTensor grad_out, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(SEXP grad_outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar(grad_out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsqrt_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rsqrt_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_rsqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsqrt__self_Tensor
XPtrTorchTensor cpp_torch_namespace_rsqrt__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_rsqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef input_sizes, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t(SEXP grad_outputSEXP, SEXP input_sizesSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t(grad_output, input_sizes, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_select_backward_grad_output_Tensor_self_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace__nested_select_backward_grad_output_Tensor_self_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace__nested_select_backward_grad_output_Tensor_self_Tensor_dim_int64_t_index_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_select_backward_grad_output_Tensor_self_Tensor_dim_int64_t_index_int64_t(grad_output, self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_selu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_selu_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_selu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_selu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_selu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_selu__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_selu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_selu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_celu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_celu_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_celu_self_Tensor(SEXP selfSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_celu_self_Tensor(self, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_celu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_celu__self_Tensor(XPtrTorchTensor self, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_celu__self_Tensor(SEXP selfSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_celu__self_Tensor(self, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_silu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_silu_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_silu_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_silu_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_silu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_silu__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_silu__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_silu__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_silu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_silu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_silu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_silu_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_silu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_silu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_silu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_silu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(grad_input, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mish_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mish_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_mish_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mish_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mish__self_Tensor
XPtrTorchTensor cpp_torch_namespace_mish__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_mish__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mish__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mish_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mish_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_mish_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mish_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mish_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mish_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_mish_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mish_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sigmoid_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid__self_Tensor
XPtrTorchTensor cpp_torch_namespace_sigmoid__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logit_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logit_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_logit_self_Tensor(SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logit_self_Tensor(self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logit__self_Tensor
XPtrTorchTensor cpp_torch_namespace_logit__self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_logit__self_Tensor(SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logit__self_Tensor(self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logit_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logit_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_logit_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logit_out_out_Tensor_self_Tensor(out, self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sin_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sin_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sin_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sin_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sin__self_Tensor
XPtrTorchTensor cpp_torch_namespace_sin__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sin__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sin__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sin_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sin_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sin_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sin_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinc_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sinc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sinc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinc__self_Tensor
XPtrTorchTensor cpp_torch_namespace_sinc__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sinc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sinc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sinc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sinh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sinh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_sinh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sinh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_detach_self_Tensor
XPtrTorchTensor cpp_torch_namespace_detach_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_detach_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_detach_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_detach__self_Tensor
XPtrTorchTensor cpp_torch_namespace_detach__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_detach__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_detach__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_size_self_Tensor_dim_int64_t
XPtrTorchint64_t cpp_torch_namespace_size_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_size_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_size_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_size_self_Tensor_dim_Dimname
XPtrTorchint64_t cpp_torch_namespace_size_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_size_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_size_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_self_Tensor
XPtrTorchTensor cpp_torch_namespace_slice_self_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_self_Tensor(self, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_namespace_slice_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef input_sizes, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t(SEXP grad_outputSEXP, SEXP input_sizesSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t(grad_output, input_sizes, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_scatter_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_slice_scatter_self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_scatter_self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_scatter_self_Tensor_src_Tensor(self, src, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP srcSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(self, src, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_scatter_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_diagonal_scatter_self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_scatter_self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_scatter_self_Tensor_src_Tensor(self, src, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP srcSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(self, src, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smm_self_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_smm_self_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_smm_self_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smm_self_Tensor_mat2_Tensor(self, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softmax_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_softmax_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_softmax_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softmax_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softmax_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_softmax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool(self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(out, self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchDtype input_dtype);
RcppExport SEXP _torch_cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP input_dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type input_dtype(input_dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(grad_output, output, dim, input_dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__softmax_backward_data_out_grad_input_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace__softmax_backward_data_out_grad_input_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchDtype input_dtype);
RcppExport SEXP _torch_cpp_torch_namespace__softmax_backward_data_out_grad_input_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP input_dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type input_dtype(input_dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__softmax_backward_data_out_grad_input_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType(grad_input, grad_output, output, dim, input_dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t
XPtrTorchTensorList cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t(XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_self_Tensor_split_size_int64_t
XPtrTorchTensorList cpp_torch_namespace_split_self_Tensor_split_size_int64_t(XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_self_Tensor_split_size_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_split_self_Tensor_split_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_self_Tensor_split_size_IntArrayRef(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_self_Tensor_split_size_IntArrayRef(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hsplit_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_namespace_hsplit_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections);
RcppExport SEXP _torch_cpp_torch_namespace_hsplit_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hsplit_self_Tensor_sections_int64_t(self, sections));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hsplit_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_hsplit_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices);
RcppExport SEXP _torch_cpp_torch_namespace_hsplit_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hsplit_self_Tensor_indices_IntArrayRef(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vsplit_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_namespace_vsplit_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections);
RcppExport SEXP _torch_cpp_torch_namespace_vsplit_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vsplit_self_Tensor_sections_int64_t(self, sections));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vsplit_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_vsplit_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices);
RcppExport SEXP _torch_cpp_torch_namespace_vsplit_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vsplit_self_Tensor_indices_IntArrayRef(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dsplit_self_Tensor_sections_int64_t
XPtrTorchTensorList cpp_torch_namespace_dsplit_self_Tensor_sections_int64_t(XPtrTorchTensor self, XPtrTorchint64_t sections);
RcppExport SEXP _torch_cpp_torch_namespace_dsplit_self_Tensor_sections_int64_t(SEXP selfSEXP, SEXP sectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sections(sectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dsplit_self_Tensor_sections_int64_t(self, sections));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dsplit_self_Tensor_indices_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_dsplit_self_Tensor_indices_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef indices);
RcppExport SEXP _torch_cpp_torch_namespace_dsplit_self_Tensor_indices_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dsplit_self_Tensor_indices_IntArrayRef(self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor
XPtrTorchTensor cpp_torch_namespace_squeeze_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_squeeze_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_stack_tensors_TensorList(XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_stack_tensors_TensorList(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stack_tensors_TensorList(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__stack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace__stack_tensors_TensorList(XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__stack_tensors_TensorList(SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__stack_tensors_TensorList(tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__stack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace__stack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__stack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__stack_out_out_Tensor_tensors_TensorList(out, tensors, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hstack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_hstack_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_hstack_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hstack_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vstack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_vstack_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_vstack_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vstack_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dstack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_dstack_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_dstack_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dstack_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t
XPtrTorchTensor cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n_fft, XPtrTorchoptional_int64_t hop_length, XPtrTorchoptional_int64_t win_length, XPtrTorchOptionalTensor window, XPtrTorchbool center, XPtrTorchstring_view pad_mode, XPtrTorchbool normalized, XPtrTorchoptional_bool onesided, XPtrTorchoptional_bool return_complex);
RcppExport SEXP _torch_cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t(SEXP selfSEXP, SEXP n_fftSEXP, SEXP hop_lengthSEXP, SEXP win_lengthSEXP, SEXP windowSEXP, SEXP centerSEXP, SEXP pad_modeSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP return_complexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n_fft(n_fftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type hop_length(hop_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type win_length(win_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type window(windowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type pad_mode(pad_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type return_complex(return_complexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t(self, n_fft, hop_length, win_length, window, center, pad_mode, normalized, onesided, return_complex));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t
XPtrTorchTensor cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n_fft, XPtrTorchoptional_int64_t hop_length, XPtrTorchoptional_int64_t win_length, XPtrTorchOptionalTensor window, XPtrTorchbool center, XPtrTorchbool normalized, XPtrTorchoptional_bool onesided, XPtrTorchoptional_int64_t length, XPtrTorchbool return_complex);
RcppExport SEXP _torch_cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t(SEXP selfSEXP, SEXP n_fftSEXP, SEXP hop_lengthSEXP, SEXP win_lengthSEXP, SEXP windowSEXP, SEXP centerSEXP, SEXP normalizedSEXP, SEXP onesidedSEXP, SEXP lengthSEXP, SEXP return_complexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n_fft(n_fftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type hop_length(hop_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type win_length(win_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type window(windowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type onesided(onesidedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_complex(return_complexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length, return_complex));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stride_self_Tensor_dim_int64_t
XPtrTorchint64_t cpp_torch_namespace_stride_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_stride_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stride_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_stride_self_Tensor_dim_Dimname
XPtrTorchint64_t cpp_torch_namespace_stride_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_stride_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_stride_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sum_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_sum_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_self_Tensor_dim_DimnameList(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__nested_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__nested_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(SEXP gradSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(grad, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nansum_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nansum_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_nansum_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nansum_self_Tensor(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sqrt_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sqrt_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sqrt_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sqrt_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sqrt__self_Tensor
XPtrTorchTensor cpp_torch_namespace_sqrt__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sqrt__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sqrt__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_square_self_Tensor
XPtrTorchTensor cpp_torch_namespace_square_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_square_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_square_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_square__self_Tensor
XPtrTorchTensor cpp_torch_namespace_square__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_square__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_square__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_square_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_square_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_square_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_square_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_self_Tensor
XPtrTorchTensor cpp_torch_namespace_std_self_Tensor(XPtrTorchTensor self, XPtrTorchbool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_std_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_mean_self_Tensor
Rcpp::List cpp_torch_namespace_std_mean_self_Tensor(XPtrTorchTensor self, XPtrTorchbool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_std_mean_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_mean_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef
Rcpp::List cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList
Rcpp::List cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_std_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_self_Tensor
XPtrTorchTensor cpp_torch_namespace_prod_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_self_Tensor(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_self_Tensor(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_prod_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_self_Tensor_dim_int64_t(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_prod_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_self_Tensor_dim_Dimname(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace_t_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_t_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_t_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tan_self_Tensor
XPtrTorchTensor cpp_torch_namespace_tan_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_tan_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tan_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tan__self_Tensor
XPtrTorchTensor cpp_torch_namespace_tan__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_tan__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tan__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tan_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_tan_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_tan_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tan_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_tanh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_tanh__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_tanh__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchIndexIntArrayRef dims_self, XPtrTorchIndexIntArrayRef dims_other);
RcppExport SEXP _torch_cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(SEXP selfSEXP, SEXP otherSEXP, SEXP dims_selfSEXP, SEXP dims_otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims_self(dims_selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims_other(dims_otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(self, other, dims_self, dims_other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tensordot_out_out_Tensor_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_tensordot_out_out_Tensor_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchIndexIntArrayRef dims_self, XPtrTorchIndexIntArrayRef dims_other);
RcppExport SEXP _torch_cpp_torch_namespace_tensordot_out_out_Tensor_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP dims_selfSEXP, SEXP dims_otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims_self(dims_selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims_other(dims_otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tensordot_out_out_Tensor_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef(out, self, other, dims_self, dims_other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar
XPtrTorchTensor cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar threshold, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar(SEXP selfSEXP, SEXP thresholdSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar(self, threshold, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar
XPtrTorchTensor cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar(XPtrTorchTensor self, XPtrTorchScalar threshold, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar(SEXP selfSEXP, SEXP thresholdSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar(self, threshold, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar
XPtrTorchTensor cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar threshold, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP thresholdSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar(out, self, threshold, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_threshold_Scalar
XPtrTorchTensor cpp_torch_namespace_threshold_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_threshold_Scalar(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar threshold);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_threshold_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_threshold_Scalar(grad_input, grad_output, self, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar
XPtrTorchTensor cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar threshold);
RcppExport SEXP _torch_cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar(grad_output, self, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tile_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_tile_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_tile_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tile_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname
XPtrTorchTensor cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim0, XPtrTorchDimname dim1);
RcppExport SEXP _torch_cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_one_hot_self_Tensor
XPtrTorchTensor cpp_torch_namespace_one_hot_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t num_classes);
RcppExport SEXP _torch_cpp_torch_namespace_one_hot_self_Tensor(SEXP selfSEXP, SEXP num_classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_classes(num_classesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_one_hot_self_Tensor(self, num_classes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fliplr_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fliplr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_fliplr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fliplr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flipud_self_Tensor
XPtrTorchTensor cpp_torch_namespace_flipud_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_flipud_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flipud_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef shifts, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef(SEXP selfSEXP, SEXP shiftsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shifts(shiftsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef(self, shifts, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rot90_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rot90_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_rot90_self_Tensor(SEXP selfSEXP, SEXP kSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rot90_self_Tensor(self, k, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trapezoid_y_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_trapezoid_y_Tensor_x_Tensor(XPtrTorchTensor y, XPtrTorchTensor x, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_trapezoid_y_Tensor_x_Tensor(SEXP ySEXP, SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trapezoid_y_Tensor_x_Tensor(y, x, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trapezoid_y_Tensor
XPtrTorchTensor cpp_torch_namespace_trapezoid_y_Tensor(XPtrTorchTensor y, XPtrTorchScalar dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_trapezoid_y_Tensor(SEXP ySEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trapezoid_y_Tensor(y, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trapz_y_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_trapz_y_Tensor_x_Tensor(XPtrTorchTensor y, XPtrTorchTensor x, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_trapz_y_Tensor_x_Tensor(SEXP ySEXP, SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trapz_y_Tensor_x_Tensor(y, x, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trapz_y_Tensor
XPtrTorchTensor cpp_torch_namespace_trapz_y_Tensor(XPtrTorchTensor y, XPtrTorchdouble dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_trapz_y_Tensor(SEXP ySEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trapz_y_Tensor(y, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__transform_bias_rescale_qkv_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t
Rcpp::List cpp_torch_namespace__transform_bias_rescale_qkv_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t(XPtrTorchTensor qkv, XPtrTorchTensor qkv_bias, XPtrTorchint64_t num_heads);
RcppExport SEXP _torch_cpp_torch_namespace__transform_bias_rescale_qkv_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t(SEXP qkvSEXP, SEXP qkv_biasSEXP, SEXP num_headsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv(qkvSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_heads(num_headsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__transform_bias_rescale_qkv_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t(qkv, qkv_bias, num_heads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_from_mask_t_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_tensor_from_mask_t_Tensor_mask_Tensor(XPtrTorchTensor t, XPtrTorchTensor mask, XPtrTorchbool mask_check);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_from_mask_t_Tensor_mask_Tensor(SEXP tSEXP, SEXP maskSEXP, SEXP mask_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type t(tSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type mask_check(mask_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_from_mask_t_Tensor_mask_Tensor(t, mask, mask_check));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_from_mask_left_aligned_t_Tensor_mask_Tensor
XPtrTorchbool cpp_torch_namespace__nested_tensor_from_mask_left_aligned_t_Tensor_mask_Tensor(XPtrTorchTensor t, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_from_mask_left_aligned_t_Tensor_mask_Tensor(SEXP tSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type t(tSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_from_mask_left_aligned_t_Tensor_mask_Tensor(t, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_from_padded_padded_Tensor_cpu_nested_shape_example_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_from_padded_padded_Tensor_cpu_nested_shape_example_Tensor(XPtrTorchTensor padded, XPtrTorchTensor cpu_nested_shape_example, XPtrTorchbool fuse_transform_0213);
RcppExport SEXP _torch_cpp_torch_namespace__nested_from_padded_padded_Tensor_cpu_nested_shape_example_Tensor(SEXP paddedSEXP, SEXP cpu_nested_shape_exampleSEXP, SEXP fuse_transform_0213SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type padded(paddedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cpu_nested_shape_example(cpu_nested_shape_exampleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type fuse_transform_0213(fuse_transform_0213SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_from_padded_padded_Tensor_cpu_nested_shape_example_Tensor(padded, cpu_nested_shape_example, fuse_transform_0213));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_from_padded_and_nested_example_padded_Tensor_nt_example_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_from_padded_and_nested_example_padded_Tensor_nt_example_Tensor(XPtrTorchTensor padded, XPtrTorchTensor nt_example);
RcppExport SEXP _torch_cpp_torch_namespace__nested_from_padded_and_nested_example_padded_Tensor_nt_example_Tensor(SEXP paddedSEXP, SEXP nt_exampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type padded(paddedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nt_example(nt_exampleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_from_padded_and_nested_example_padded_Tensor_nt_example_Tensor(padded, nt_example));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_view_from_buffer_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__nested_view_from_buffer_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor nested_size, XPtrTorchTensor nested_strides, XPtrTorchIntArrayRef offsets);
RcppExport SEXP _torch_cpp_torch_namespace__nested_view_from_buffer_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(SEXP selfSEXP, SEXP nested_sizeSEXP, SEXP nested_stridesSEXP, SEXP offsetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nested_size(nested_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nested_strides(nested_stridesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type offsets(offsetsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_view_from_buffer_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(self, nested_size, nested_strides, offsets));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_view_from_buffer_copy_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__nested_view_from_buffer_copy_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor nested_size, XPtrTorchTensor nested_strides, XPtrTorchIntArrayRef offsets);
RcppExport SEXP _torch_cpp_torch_namespace__nested_view_from_buffer_copy_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(SEXP selfSEXP, SEXP nested_sizeSEXP, SEXP nested_stridesSEXP, SEXP offsetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nested_size(nested_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nested_strides(nested_stridesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type offsets(offsetsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_view_from_buffer_copy_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(self, nested_size, nested_strides, offsets));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(XPtrTorchTensor i1, XPtrTorchTensor i2, XPtrTorchTensor i3, XPtrTorchIntArrayRef expand1, XPtrTorchIntArrayRef expand2, XPtrTorchIntArrayRef expand3, XPtrTorchIntArrayRef sumdim, XPtrTorchint64_t unroll_dim);
RcppExport SEXP _torch_cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(SEXP i1SEXP, SEXP i2SEXP, SEXP i3SEXP, SEXP expand1SEXP, SEXP expand2SEXP, SEXP expand3SEXP, SEXP sumdimSEXP, SEXP unroll_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type i2(i2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type i3(i3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type expand1(expand1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type expand2(expand2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type expand3(expand3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sumdim(sumdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type unroll_dim(unroll_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor
XPtrTorchTensor cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor(XPtrTorchTensor anchor, XPtrTorchTensor positive, XPtrTorchTensor negative, XPtrTorchdouble margin, XPtrTorchdouble p, XPtrTorchdouble eps, XPtrTorchbool swap, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor(SEXP anchorSEXP, SEXP positiveSEXP, SEXP negativeSEXP, SEXP marginSEXP, SEXP pSEXP, SEXP epsSEXP, SEXP swapSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type anchor(anchorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type positive(positiveSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type swap(swapSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor(anchor, positive, negative, margin, p, eps, swap, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trunc_self_Tensor
XPtrTorchTensor cpp_torch_namespace_trunc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_trunc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trunc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trunc__self_Tensor
XPtrTorchTensor cpp_torch_namespace_trunc__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_trunc__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trunc__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fix_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fix_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_fix_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fix_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fix__self_Tensor
XPtrTorchTensor cpp_torch_namespace_fix__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_fix__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fix__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fix_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fix_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_fix_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fix_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor
XPtrTorchbool cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor(XPtrTorchTensor self, XPtrTorchTensor from);
RcppExport SEXP _torch_cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor(SEXP selfSEXP, SEXP fromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type from(fromSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor(self, from));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unique_self_Tensor
Rcpp::List cpp_torch_namespace__unique_self_Tensor(XPtrTorchTensor self, XPtrTorchbool sorted, XPtrTorchbool return_inverse);
RcppExport SEXP _torch_cpp_torch_namespace__unique_self_Tensor(SEXP selfSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unique_self_Tensor(self, sorted, return_inverse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool sorted, XPtrTorchbool return_inverse, XPtrTorchbool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t(self, dim, sorted, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_consecutive_self_Tensor
Rcpp::List cpp_torch_namespace_unique_consecutive_self_Tensor(XPtrTorchTensor self, XPtrTorchbool return_inverse, XPtrTorchbool return_counts, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unique_consecutive_self_Tensor(SEXP selfSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_consecutive_self_Tensor(self, return_inverse, return_counts, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool return_inverse, XPtrTorchbool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t(self, dim, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unique2_self_Tensor
Rcpp::List cpp_torch_namespace__unique2_self_Tensor(XPtrTorchTensor self, XPtrTorchbool sorted, XPtrTorchbool return_inverse, XPtrTorchbool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace__unique2_self_Tensor(SEXP selfSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unique2_self_Tensor(self, sorted, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_vander_x_Tensor
XPtrTorchTensor cpp_torch_namespace_vander_x_Tensor(XPtrTorchTensor x, XPtrTorchoptional_int64_t False, XPtrTorchbool increasing);
RcppExport SEXP _torch_cpp_torch_namespace_vander_x_Tensor(SEXP xSEXP, SEXP FalseSEXP, SEXP increasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type increasing(increasingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_vander_x_Tensor(x, False, increasing));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_self_Tensor
XPtrTorchTensor cpp_torch_namespace_var_self_Tensor(XPtrTorchTensor self, XPtrTorchbool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_var_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_var_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList
XPtrTorchTensor cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList(out, self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_mean_self_Tensor
Rcpp::List cpp_torch_namespace_var_mean_self_Tensor(XPtrTorchTensor self, XPtrTorchbool unbiased);
RcppExport SEXP _torch_cpp_torch_namespace_var_mean_self_Tensor(SEXP selfSEXP, SEXP unbiasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_mean_self_Tensor(self, unbiased));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef
Rcpp::List cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList
Rcpp::List cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList(XPtrTorchTensor self, XPtrTorchDimnameList dim, XPtrTorchbool unbiased, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList(SEXP selfSEXP, SEXP dimSEXP, SEXP unbiasedSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList(self, dim, unbiased, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor condition, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_out_out_Tensor_condition_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_where_out_out_Tensor_condition_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor condition, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_where_out_out_Tensor_condition_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_out_out_Tensor_condition_Tensor_self_Tensor_other_Tensor(out, condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor condition, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor condition, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar
XPtrTorchTensor cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar(XPtrTorchTensor condition, XPtrTorchScalar self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar(SEXP conditionSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar(condition, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_where_condition_Tensor
XPtrTorchTensorList cpp_torch_namespace_where_condition_Tensor(XPtrTorchTensor condition);
RcppExport SEXP _torch_cpp_torch_namespace_where_condition_Tensor(SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_where_condition_Tensor(condition));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_except_dim_v_Tensor
XPtrTorchTensor cpp_torch_namespace_norm_except_dim_v_Tensor(XPtrTorchTensor v, XPtrTorchint64_t pow, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_except_dim_v_Tensor(SEXP vSEXP, SEXP powSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type pow(powSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_except_dim_v_Tensor(v, pow, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor
XPtrTorchTensor cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor(XPtrTorchTensor v, XPtrTorchTensor g, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor(SEXP vSEXP, SEXP gSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type g(gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor(v, g, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_interface_v_Tensor_g_Tensor
Rcpp::List cpp_torch_namespace__weight_norm_interface_v_Tensor_g_Tensor(XPtrTorchTensor v, XPtrTorchTensor g, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_interface_v_Tensor_g_Tensor(SEXP vSEXP, SEXP gSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type g(gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_interface_v_Tensor_g_Tensor(v, g, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__weight_norm_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(XPtrTorchTensor grad_w, XPtrTorchTensor saved_v, XPtrTorchTensor saved_g, XPtrTorchTensor saved_norms, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(SEXP grad_wSEXP, SEXP saved_vSEXP, SEXP saved_gSEXP, SEXP saved_normsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_w(grad_wSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_v(saved_vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_g(saved_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_norms(saved_normsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(grad_w, saved_v, saved_g, saved_norms, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(XPtrTorchTensor grad_w, XPtrTorchTensor saved_v, XPtrTorchTensor saved_g, XPtrTorchTensor saved_norms, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(SEXP grad_wSEXP, SEXP saved_vSEXP, SEXP saved_gSEXP, SEXP saved_normsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_w(grad_wSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_v(saved_vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_g(saved_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_norms(saved_normsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(grad_w, saved_v, saved_g, saved_norms, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList(XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList(SEXP sizeSEXP, SEXP namesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList(size, names, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__efficientzerotensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__efficientzerotensor_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__efficientzerotensor_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__efficientzerotensor_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_zeros_size_IntArrayRef(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_size_IntArrayRef(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_size_IntArrayRef(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_like_self_Tensor
XPtrTorchTensor cpp_torch_namespace_zeros_like_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_like_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_like_self_Tensor(self, options, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor
XPtrTorchTensor cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor(XPtrTorchTensor self, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor(SEXP selfSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor(self, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__standard_gamma_self_Tensor
XPtrTorchTensor cpp_torch_namespace__standard_gamma_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace__standard_gamma_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__standard_gamma_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor
XPtrTorchTensor cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor(XPtrTorchTensor x, XPtrTorchTensor alpha, XPtrTorchTensor total);
RcppExport SEXP _torch_cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor(SEXP xSEXP, SEXP alphaSEXP, SEXP totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total(totalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor(x, alpha, total));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sample_dirichlet_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sample_dirichlet_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace__sample_dirichlet_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sample_dirichlet_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_poisson_self_Tensor
XPtrTorchTensor cpp_torch_namespace_poisson_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_poisson_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_poisson_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binomial_count_Tensor_prob_Tensor
XPtrTorchTensor cpp_torch_namespace_binomial_count_Tensor_prob_Tensor(XPtrTorchTensor count, XPtrTorchTensor prob, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_binomial_count_Tensor_prob_Tensor(SEXP countSEXP, SEXP probSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type count(countSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type prob(probSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binomial_count_Tensor_prob_Tensor(count, prob, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_norm_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_namespace_native_norm_self_Tensor_p_Scalar(XPtrTorchTensor self, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_namespace_native_norm_self_Tensor_p_Scalar(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_norm_self_Tensor_p_Scalar(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_sum_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(SEXP gradSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef(grad, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_csr_sum_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_csr_sum_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_csr_sum_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_csr_sum_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_csr_prod_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_csr_prod_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_csr_prod_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_csr_prod_self_Tensor_dim_IntArrayRef(self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool(self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(grad_output, output, dim, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool(self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(grad_output, output, dim, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__spdiags_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__spdiags_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef(XPtrTorchTensor diagonals, XPtrTorchTensor offsets, XPtrTorchIntArrayRef shape, XPtrTorchLayout layout);
RcppExport SEXP _torch_cpp_torch_namespace__spdiags_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef(SEXP diagonalsSEXP, SEXP offsetsSEXP, SEXP shapeSEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type diagonals(diagonalsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__spdiags_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef(diagonals, offsets, shape, layout));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType(self, p, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_namespace_norm_self_Tensor_p_Scalar(XPtrTorchTensor self, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool
XPtrTorchTensor cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(out, self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool
XPtrTorchTensor cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool(out, self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool
XPtrTorchTensor cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDimnameList dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDimnameList dim, XPtrTorchbool keepdim, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType(out, self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool
XPtrTorchTensor cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDimnameList dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimnameList >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool(out, self, p, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frexp_self_Tensor
Rcpp::List cpp_torch_namespace_frexp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_frexp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frexp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frexp_out_mantissa_Tensor_exponent_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_frexp_out_mantissa_Tensor_exponent_Tensor_self_Tensor(XPtrTorchTensor mantissa, XPtrTorchTensor exponent, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_frexp_out_mantissa_Tensor_exponent_Tensor_self_Tensor(SEXP mantissaSEXP, SEXP exponentSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mantissa(mantissaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frexp_out_mantissa_Tensor_exponent_Tensor_self_Tensor(mantissa, exponent, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nuclear_norm_self_Tensor(XPtrTorchTensor self, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_self_Tensor(SEXP selfSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_self_Tensor(self, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor(out, self, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clone_self_Tensor
XPtrTorchTensor cpp_torch_namespace_clone_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_clone_self_Tensor(SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clone_self_Tensor(self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_positive_self_Tensor
XPtrTorchTensor cpp_torch_namespace_positive_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_positive_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_positive_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor(XPtrTorchTensor self, XPtrTorchTensor the_template, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor(self, the_template, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as_sparse__self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_namespace_resize_as_sparse__self_Tensor_the_template_Tensor(XPtrTorchTensor self, XPtrTorchTensor the_template);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as_sparse__self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as_sparse__self_Tensor_the_template_Tensor(self, the_template));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zero__self_Tensor
XPtrTorchTensor cpp_torch_namespace_zero__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_zero__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zero__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_sub_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_sub_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_subtract_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_subtract_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_subtract_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_subtract_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_subtract_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_subtract_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_subtract_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_subtract_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsub_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_rsub_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_rsub_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsub_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor values);
RcppExport SEXP _torch_cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor(out, self, values));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_heaviside_self_Tensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace_heaviside_self_Tensor_values_Tensor(XPtrTorchTensor self, XPtrTorchTensor values);
RcppExport SEXP _torch_cpp_torch_namespace_heaviside_self_Tensor_values_Tensor(SEXP selfSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_heaviside_self_Tensor_values_Tensor(self, values));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsub_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_rsub_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_rsub_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsub_self_Tensor_other_Scalar(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_addmm_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_sampled_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_sparse_sampled_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_sampled_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_sampled_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_sampled_addmm_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_sparse_sampled_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_sampled_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_sampled_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_mm_reduce_impl_self_Tensor_other_Tensor_reduce_c10string_view
Rcpp::List cpp_torch_namespace__sparse_mm_reduce_impl_self_Tensor_other_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_mm_reduce_impl_self_Tensor_other_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP otherSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_mm_reduce_impl_self_Tensor_other_Tensor_reduce_c10string_view(self, other, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_mm_reduce_impl_backward_self_Tensor_grad_out_Tensor_weight_Tensor_reduce_c10string_view_arg_out_Tensor_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace__sparse_mm_reduce_impl_backward_self_Tensor_grad_out_Tensor_weight_Tensor_reduce_c10string_view_arg_out_Tensor_output_mask_stdarraybool2(XPtrTorchTensor self, XPtrTorchTensor grad_out, XPtrTorchTensor weight, XPtrTorchstring_view reduce, XPtrTorchTensor arg_out, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_mm_reduce_impl_backward_self_Tensor_grad_out_Tensor_weight_Tensor_reduce_c10string_view_arg_out_Tensor_output_mask_stdarraybool2(SEXP selfSEXP, SEXP grad_outSEXP, SEXP weightSEXP, SEXP reduceSEXP, SEXP arg_outSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type arg_out(arg_outSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_mm_reduce_impl_backward_self_Tensor_grad_out_Tensor_weight_Tensor_reduce_c10string_view_arg_out_Tensor_output_mask_stdarraybool2(self, grad_out, weight, reduce, arg_out, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__addmm_activation_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace__addmm_activation_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha, XPtrTorchbool use_gelu);
RcppExport SEXP _torch_cpp_torch_namespace__addmm_activation_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP use_geluSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__addmm_activation_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha, use_gelu));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha, XPtrTorchbool use_gelu);
RcppExport SEXP _torch_cpp_torch_namespace__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP use_geluSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor(self, mat1, mat2, beta, alpha, use_gelu));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchTensor compressed_indices, XPtrTorchTensor plain_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(SEXP compressed_indicesSEXP, SEXP plain_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type compressed_indices(compressed_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type plain_indices(plain_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(compressed_indices, plain_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(crow_indices, col_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(ccol_indices, row_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(crow_indices, col_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(ccol_indices, row_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchTensor compressed_indices, XPtrTorchTensor plain_indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_options_TensorOptions(SEXP compressed_indicesSEXP, SEXP plain_indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type compressed_indices(compressed_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type plain_indices(plain_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_options_TensorOptions(compressed_indices, plain_indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions(crow_indices, col_indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions(ccol_indices, row_indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions(crow_indices, col_indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions(ccol_indices, row_indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_compressed_tensor_unsafe_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_compressed_tensor_unsafe_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor compressed_indices, XPtrTorchTensor plain_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_compressed_tensor_unsafe_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP compressed_indicesSEXP, SEXP plain_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type compressed_indices(compressed_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type plain_indices(plain_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_compressed_tensor_unsafe_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef(compressed_indices, plain_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_csr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_csr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_csr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_csr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(crow_indices, col_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_csc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_csc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_csc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_csc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(ccol_indices, row_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_bsr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_bsr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_bsr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_bsr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(crow_indices, col_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_bsc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_bsc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_bsc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_bsc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(ccol_indices, row_indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions(SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions(size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchIndexTensor indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_options_TensorOptions(SEXP indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_options_TensorOptions(indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(XPtrTorchIndexTensor indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(SEXP indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions(indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchIndexTensor indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef(indices, values, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef
void cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchIndexTensor indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef(indices, values, size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__validate_sparse_compressed_tensor_args_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_layout_Layout
void cpp_torch_namespace__validate_sparse_compressed_tensor_args_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_layout_Layout(XPtrTorchTensor compressed_indices, XPtrTorchTensor plain_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size, XPtrTorchLayout layout);
RcppExport SEXP _torch_cpp_torch_namespace__validate_sparse_compressed_tensor_args_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_layout_Layout(SEXP compressed_indicesSEXP, SEXP plain_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type compressed_indices(compressed_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type plain_indices(plain_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    cpp_torch_namespace__validate_sparse_compressed_tensor_args_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_layout_Layout(compressed_indices, plain_indices, values, size, layout);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__validate_sparse_csr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef
void cpp_torch_namespace__validate_sparse_csr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__validate_sparse_csr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    cpp_torch_namespace__validate_sparse_csr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(crow_indices, col_indices, values, size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__validate_sparse_csc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef
void cpp_torch_namespace__validate_sparse_csc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__validate_sparse_csc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    cpp_torch_namespace__validate_sparse_csc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(ccol_indices, row_indices, values, size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__validate_sparse_bsr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef
void cpp_torch_namespace__validate_sparse_bsr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__validate_sparse_bsr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    cpp_torch_namespace__validate_sparse_bsr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef(crow_indices, col_indices, values, size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__validate_sparse_bsc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef
void cpp_torch_namespace__validate_sparse_bsc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(XPtrTorchTensor ccol_indices, XPtrTorchTensor row_indices, XPtrTorchTensor values, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__validate_sparse_bsc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(SEXP ccol_indicesSEXP, SEXP row_indicesSEXP, SEXP valuesSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ccol_indices(ccol_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type row_indices(row_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    cpp_torch_namespace__validate_sparse_bsc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef(ccol_indices, row_indices, values, size);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions(XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim, XPtrTorchIntArrayRef size, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions(SEXP sparse_dimSEXP, SEXP dense_dimSEXP, SEXP sizeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions(sparse_dim, dense_dim, size, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions
XPtrTorchTensor cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions(XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim, XPtrTorchIntArrayRef size, XPtrTorchIndexTensor indices, XPtrTorchTensor values, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions(SEXP sparse_dimSEXP, SEXP dense_dimSEXP, SEXP sizeSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions(sparse_dim, dense_dim, size, indices, values, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__to_cpu_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace__to_cpu_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace__to_cpu_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__to_cpu_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor
XPtrTorchTensor cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor(XPtrTorchTensor grad, XPtrTorchTensor input);
RcppExport SEXP _torch_cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor(SEXP gradSEXP, SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor(grad, input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__coalesce_self_Tensor
XPtrTorchTensor cpp_torch_namespace__coalesce_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__coalesce_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__coalesce_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor mat1, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor(out, mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor(XPtrTorchTensor mat1, XPtrTorchTensor mat2);
RcppExport SEXP _torch_cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor(self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unbind_self_Tensor_dim_int64_t
XPtrTorchTensorList cpp_torch_namespace_unbind_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unbind_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unbind_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unbind_self_Tensor_dim_Dimname
XPtrTorchTensorList cpp_torch_namespace_unbind_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim);
RcppExport SEXP _torch_cpp_torch_namespace_unbind_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unbind_self_Tensor_dim_Dimname(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor(XPtrTorchTensor self, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchOptionalIntArrayRef input_size);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor(SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor(self, padding, stride, dilation, groups, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor(XPtrTorchTensor self, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor(SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor(self, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor
XPtrTorchTensor cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor(XPtrTorchTensor grad, XPtrTorchTensor input);
RcppExport SEXP _torch_cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor(SEXP gradSEXP, SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor(grad, input));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_dynamic_self_Tensor_dtype_ScalarType_reduce_range_bool
XPtrTorchTensor cpp_torch_namespace_quantize_per_tensor_dynamic_self_Tensor_dtype_ScalarType_reduce_range_bool(XPtrTorchTensor self, XPtrTorchDtype dtype, XPtrTorchbool reduce_range);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_dynamic_self_Tensor_dtype_ScalarType_reduce_range_bool(SEXP selfSEXP, SEXP dtypeSEXP, SEXP reduce_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reduce_range(reduce_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_dynamic_self_Tensor_dtype_ScalarType_reduce_range_bool(self, dtype, reduce_range));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(self, scale, zero_point, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType(self, scale, zero_point, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType
XPtrTorchTensorList cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType(XPtrTorchTensorList tensors, XPtrTorchTensor scales, XPtrTorchTensor zero_points, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType(SEXP tensorsSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType(tensors, scales, zero_points, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchTensor scales, XPtrTorchTensor zero_points, XPtrTorchint64_t axis, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(SEXP selfSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP axisSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(self, scales, zero_points, axis, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dequantize_self_Tensor
XPtrTorchTensor cpp_torch_namespace_dequantize_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_dequantize_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dequantize_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dequantize_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_dequantize_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_dequantize_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dequantize_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_scale_self_Tensor
XPtrTorchdouble cpp_torch_namespace_q_scale_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_scale_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_scale_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_zero_point_self_Tensor
XPtrTorchint64_t cpp_torch_namespace_q_zero_point_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_zero_point_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_zero_point_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_scales_self_Tensor
XPtrTorchTensor cpp_torch_namespace_q_per_channel_scales_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_scales_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_scales_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_zero_points_self_Tensor
XPtrTorchTensor cpp_torch_namespace_q_per_channel_zero_points_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_zero_points_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_zero_points_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_axis_self_Tensor
XPtrTorchint64_t cpp_torch_namespace_q_per_channel_axis_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_axis_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_axis_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_int_repr_self_Tensor
XPtrTorchTensor cpp_torch_namespace_int_repr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_int_repr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_int_repr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t
XPtrTorchTensor cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t(XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point);
RcppExport SEXP _torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t(self, scale, zero_point));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t
XPtrTorchTensor cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis);
RcppExport SEXP _torch_cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(self, scale, zero_point, axis));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchTensor fake_quant_enabled, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP fake_quant_enabledSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type fake_quant_enabled(fake_quant_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, fake_quant_enabled, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_backward_grad_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_backward_grad_Tensor_mask_Tensor(XPtrTorchTensor grad, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_backward_grad_Tensor_mask_Tensor(SEXP gradSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_backward_grad_Tensor_mask_Tensor(grad, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchdouble grad_factor);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP grad_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type grad_factor(grad_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, quant_min, quant_max, grad_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchdouble grad_factor);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(SEXP gradSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP grad_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type grad_factor(grad_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(grad, self, scale, zero_point, quant_min, quant_max, grad_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, axis, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, axis, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_backward_grad_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_backward_grad_Tensor_mask_Tensor(XPtrTorchTensor grad, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_backward_grad_Tensor_mask_Tensor(SEXP gradSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_backward_grad_Tensor_mask_Tensor(grad, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchdouble grad_factor);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP grad_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type grad_factor(grad_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(self, scale, zero_point, axis, quant_min, quant_max, grad_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchdouble grad_factor);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP gradSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP grad_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type grad_factor(grad_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(grad, self, scale, zero_point, axis, quant_min, quant_max, grad_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fused_moving_avg_obs_fake_quant_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t
XPtrTorchTensor cpp_torch_namespace_fused_moving_avg_obs_fake_quant_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(XPtrTorchTensor self, XPtrTorchTensor observer_on, XPtrTorchTensor fake_quant_on, XPtrTorchTensor running_min, XPtrTorchTensor running_max, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchdouble averaging_const, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchint64_t ch_axis, XPtrTorchbool per_row_fake_quant, XPtrTorchbool symmetric_quant);
RcppExport SEXP _torch_cpp_torch_namespace_fused_moving_avg_obs_fake_quant_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(SEXP selfSEXP, SEXP observer_onSEXP, SEXP fake_quant_onSEXP, SEXP running_minSEXP, SEXP running_maxSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP averaging_constSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP ch_axisSEXP, SEXP per_row_fake_quantSEXP, SEXP symmetric_quantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type observer_on(observer_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type fake_quant_on(fake_quant_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_min(running_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_max(running_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type averaging_const(averaging_constSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ch_axis(ch_axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type per_row_fake_quant(per_row_fake_quantSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type symmetric_quant(symmetric_quantSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fused_moving_avg_obs_fake_quant_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(self, observer_on, fake_quant_on, running_min, running_max, scale, zero_point, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_moving_avg_obs_fq_helper_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t
Rcpp::List cpp_torch_namespace__fused_moving_avg_obs_fq_helper_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(XPtrTorchTensor self, XPtrTorchTensor observer_on, XPtrTorchTensor fake_quant_on, XPtrTorchTensor running_min, XPtrTorchTensor running_max, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchdouble averaging_const, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchint64_t ch_axis, XPtrTorchbool per_row_fake_quant, XPtrTorchbool symmetric_quant);
RcppExport SEXP _torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(SEXP selfSEXP, SEXP observer_onSEXP, SEXP fake_quant_onSEXP, SEXP running_minSEXP, SEXP running_maxSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP averaging_constSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP ch_axisSEXP, SEXP per_row_fake_quantSEXP, SEXP symmetric_quantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type observer_on(observer_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type fake_quant_on(fake_quant_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_min(running_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_max(running_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type averaging_const(averaging_constSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ch_axis(ch_axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type per_row_fake_quant(per_row_fake_quantSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type symmetric_quant(symmetric_quantSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_moving_avg_obs_fq_helper_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(self, observer_on, fake_quant_on, running_min, running_max, scale, zero_point, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor
Rcpp::List cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor(XPtrTorchTensor self, XPtrTorchbool reduce_range);
RcppExport SEXP _torch_cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor(SEXP selfSEXP, SEXP reduce_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reduce_range(reduce_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor(self, reduce_range));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor
XPtrTorchTensor cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor(XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor(SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor(weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t
Rcpp::List cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t(XPtrTorchTensor input, XPtrTorchint64_t numel, XPtrTorchint64_t n_bins, XPtrTorchdouble ratio, XPtrTorchint64_t bit_width);
RcppExport SEXP _torch_cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t(SEXP inputSEXP, SEXP numelSEXP, SEXP n_binsSEXP, SEXP ratioSEXP, SEXP bit_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type numel(numelSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n_bins(n_binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type ratio(ratioSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bit_width(bit_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t(input, numel, n_bins, ratio, bit_width));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__to_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace__to_copy_self_Tensor(XPtrTorchTensor self, XPtrTorchTensorOptions options, XPtrTorchbool non_blocking, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__to_copy_self_Tensor(SEXP selfSEXP, SEXP optionsSEXP, SEXP non_blockingSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__to_copy_self_Tensor(self, options, non_blocking, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_meshgrid_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_meshgrid_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_meshgrid_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_meshgrid_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_meshgrid_tensors_TensorList_indexing_c10string_view
XPtrTorchTensorList cpp_torch_namespace_meshgrid_tensors_TensorList_indexing_c10string_view(XPtrTorchTensorList tensors, XPtrTorchstring_view indexing);
RcppExport SEXP _torch_cpp_torch_namespace_meshgrid_tensors_TensorList_indexing_c10string_view(SEXP tensorsSEXP, SEXP indexingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type indexing(indexingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_meshgrid_tensors_TensorList_indexing_c10string_view(tensors, indexing));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cartesian_prod_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_cartesian_prod_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_cartesian_prod_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cartesian_prod_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_combinations_self_Tensor
XPtrTorchTensor cpp_torch_namespace_combinations_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t r, XPtrTorchbool with_replacement);
RcppExport SEXP _torch_cpp_torch_namespace_combinations_self_Tensor(SEXP selfSEXP, SEXP rSEXP, SEXP with_replacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type r(rSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type with_replacement(with_replacementSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_combinations_self_Tensor(self, r, with_replacement));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_other_Tensor_tensor_Tensor
XPtrTorchScalarType cpp_torch_namespace_result_type_other_Tensor_tensor_Tensor(XPtrTorchTensor tensor, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_other_Tensor_tensor_Tensor(SEXP tensorSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_other_Tensor_tensor_Tensor(tensor, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_other_Scalar_tensor_Tensor
XPtrTorchScalarType cpp_torch_namespace_result_type_other_Scalar_tensor_Tensor(XPtrTorchTensor tensor, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_other_Scalar_tensor_Tensor(SEXP tensorSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_other_Scalar_tensor_Tensor(tensor, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor
XPtrTorchScalarType cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor(XPtrTorchScalar scalar, XPtrTorchTensor tensor);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor(SEXP scalarSEXP, SEXP tensorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor(tensorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor(scalar, tensor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar
XPtrTorchScalarType cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar(XPtrTorchScalar scalar1, XPtrTorchScalar scalar2);
RcppExport SEXP _torch_cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar(SEXP scalar1SEXP, SEXP scalar2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar1(scalar1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar2(scalar2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar(scalar1, scalar2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType
XPtrTorchbool cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType(XPtrTorchDtype from, XPtrTorchDtype to);
RcppExport SEXP _torch_cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType(SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType(from, to));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType
XPtrTorchScalarType cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType(XPtrTorchDtype type1, XPtrTorchDtype type2);
RcppExport SEXP _torch_cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType(SEXP type1SEXP, SEXP type2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type type1(type1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type type2(type2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType(type1, type2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__local_scalar_dense_self_Tensor
XPtrTorchScalar cpp_torch_namespace__local_scalar_dense_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__local_scalar_dense_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__local_scalar_dense_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__lstm_mps_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace__lstm_mps_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(XPtrTorchTensor input, XPtrTorchTensorList hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__lstm_mps_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__lstm_mps_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_mps_backward_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace_lstm_mps_backward_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(XPtrTorchTensor grad_y, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchTensor z_state, XPtrTorchTensor cell_state_fwd, XPtrTorchTensor input, XPtrTorchTensor layersOutputs, XPtrTorchTensorList hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_mps_backward_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP grad_ySEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP z_stateSEXP, SEXP cell_state_fwdSEXP, SEXP inputSEXP, SEXP layersOutputsSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_y(grad_ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type z_state(z_stateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cell_state_fwd(cell_state_fwdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type layersOutputs(layersOutputsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_mps_backward_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(grad_y, grad_hy, grad_cy, z_state, cell_state_fwd, input, layersOutputs, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(XPtrTorchTensor input_gates, XPtrTorchTensor hidden_gates, XPtrTorchTensor cx, XPtrTorchOptionalTensor input_bias, XPtrTorchOptionalTensor hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP cxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(input_gates, hidden_gates, cx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchTensor cx, XPtrTorchTensor cy, XPtrTorchTensor workspace, XPtrTorchbool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cy(cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(grad_hy, grad_cy, cx, cy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchTensor cx, XPtrTorchTensor cy, XPtrTorchTensor workspace, XPtrTorchbool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cy(cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(grad_hy, grad_cy, cx, cy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor
Rcpp::List cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor(XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchTensor input_gates, XPtrTorchTensor hidden_gates, XPtrTorchOptionalTensor input_bias, XPtrTorchOptionalTensor hidden_bias, XPtrTorchTensor cx, XPtrTorchTensor cy);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor(SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP, SEXP cxSEXP, SEXP cySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type hidden_bias(hidden_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cy(cySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor
Rcpp::List cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(XPtrTorchTensor input_gates, XPtrTorchTensor hidden_gates, XPtrTorchTensor hx, XPtrTorchOptionalTensor input_bias, XPtrTorchOptionalTensor hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP hxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(input_gates, hidden_gates, hx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool(XPtrTorchTensor grad_hy, XPtrTorchTensor workspace, XPtrTorchbool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool(SEXP grad_hySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool(grad_hy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor
Rcpp::List cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor(XPtrTorchTensor grad_hy, XPtrTorchTensor input_gates, XPtrTorchTensor hidden_gates, XPtrTorchTensor hx, XPtrTorchOptionalTensor input_bias, XPtrTorchOptionalTensor hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor(SEXP grad_hySEXP, SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP hxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(XPtrTorchTensor input, XPtrTorchTensorList hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(XPtrTorchTensor data, XPtrTorchTensor batch_sizes, XPtrTorchTensorList hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(XPtrTorchTensor data, XPtrTorchTensor batch_sizes, XPtrTorchTensor hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(XPtrTorchTensor data, XPtrTorchTensor batch_sizes, XPtrTorchTensor hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool
Rcpp::List cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(XPtrTorchTensor data, XPtrTorchTensor batch_sizes, XPtrTorchTensor hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor
Rcpp::List cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor(XPtrTorchTensor input, XPtrTorchTensorList hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchOptionalTensor b_ih, XPtrTorchOptionalTensor b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor
XPtrTorchTensor cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchOptionalTensor b_ih, XPtrTorchOptionalTensor b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor
XPtrTorchTensor cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchOptionalTensor b_ih, XPtrTorchOptionalTensor b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor
XPtrTorchTensor cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchOptionalTensor b_ih, XPtrTorchOptionalTensor b_hh);
RcppExport SEXP _torch_cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type b_hh(b_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor(input, hx, w_ih, w_hh, b_ih, b_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
Rcpp::List cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(XPtrTorchTensor input, XPtrTorchTensorList hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchTensor b_ih, XPtrTorchTensor b_hh, XPtrTorchTensor packed_ih, XPtrTorchTensor packed_hh, XPtrTorchTensor col_offsets_ih, XPtrTorchTensor col_offsets_hh, XPtrTorchScalar scale_ih, XPtrTorchScalar scale_hh, XPtrTorchScalar zero_point_ih, XPtrTorchScalar zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
XPtrTorchTensor cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchTensor b_ih, XPtrTorchTensor b_hh, XPtrTorchTensor packed_ih, XPtrTorchTensor packed_hh, XPtrTorchTensor col_offsets_ih, XPtrTorchTensor col_offsets_hh, XPtrTorchScalar scale_ih, XPtrTorchScalar scale_hh, XPtrTorchScalar zero_point_ih, XPtrTorchScalar zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
XPtrTorchTensor cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchTensor b_ih, XPtrTorchTensor b_hh, XPtrTorchTensor packed_ih, XPtrTorchTensor packed_hh, XPtrTorchTensor col_offsets_ih, XPtrTorchTensor col_offsets_hh, XPtrTorchScalar scale_ih, XPtrTorchScalar scale_hh, XPtrTorchScalar zero_point_ih, XPtrTorchScalar zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar
XPtrTorchTensor cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(XPtrTorchTensor input, XPtrTorchTensor hx, XPtrTorchTensor w_ih, XPtrTorchTensor w_hh, XPtrTorchTensor b_ih, XPtrTorchTensor b_hh, XPtrTorchTensor packed_ih, XPtrTorchTensor packed_hh, XPtrTorchTensor col_offsets_ih, XPtrTorchTensor col_offsets_hh, XPtrTorchScalar scale_ih, XPtrTorchScalar scale_hh, XPtrTorchScalar zero_point_ih, XPtrTorchScalar zero_point_hh);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(SEXP inputSEXP, SEXP hxSEXP, SEXP w_ihSEXP, SEXP w_hhSEXP, SEXP b_ihSEXP, SEXP b_hhSEXP, SEXP packed_ihSEXP, SEXP packed_hhSEXP, SEXP col_offsets_ihSEXP, SEXP col_offsets_hhSEXP, SEXP scale_ihSEXP, SEXP scale_hhSEXP, SEXP zero_point_ihSEXP, SEXP zero_point_hhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_ih(w_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type w_hh(w_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_ih(b_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b_hh(b_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_ih(packed_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type packed_hh(packed_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_ih(col_offsets_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_offsets_hh(col_offsets_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_ih(scale_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale_hh(scale_hhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_ih(zero_point_ihSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type zero_point_hh(zero_point_hhSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool
Rcpp::List cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool(XPtrTorchTensor input, XPtrTorchTensor lengths, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool(SEXP inputSEXP, SEXP lengthsSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool(input, lengths, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool
XPtrTorchTensor cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool(XPtrTorchTensor grad, XPtrTorchIntArrayRef input_size, XPtrTorchTensor batch_sizes, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool(SEXP gradSEXP, SEXP input_sizeSEXP, SEXP batch_sizesSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool(grad, input_size, batch_sizes, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t
Rcpp::List cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t(XPtrTorchTensor data, XPtrTorchTensor batch_sizes, XPtrTorchbool batch_first, XPtrTorchScalar padding_value, XPtrTorchint64_t total_length);
RcppExport SEXP _torch_cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP batch_firstSEXP, SEXP padding_valueSEXP, SEXP total_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type padding_value(padding_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type total_length(total_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t(data, batch_sizes, batch_first, padding_value, total_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lift_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lift_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lift_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lift_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lift_fresh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lift_fresh_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lift_fresh_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lift_fresh_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lift_fresh_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lift_fresh_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lift_fresh_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lift_fresh_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor(self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor(self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_softmax_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace__masked_softmax_self_Tensor_mask_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchoptional_index_int64_t dim, XPtrTorchoptional_int64_t mask_type);
RcppExport SEXP _torch_cpp_torch_namespace__masked_softmax_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP, SEXP dimSEXP, SEXP mask_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type mask_type(mask_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_softmax_self_Tensor_mask_Tensor(self, mask, dim, mask_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_softmax_backward_grad_output_Tensor_output_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace__masked_softmax_backward_grad_output_Tensor_output_Tensor_mask_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchTensor mask, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__masked_softmax_backward_grad_output_Tensor_output_Tensor_mask_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP, SEXP maskSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_softmax_backward_grad_output_Tensor_output_Tensor_mask_Tensor(grad_output, output, mask, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_put_self_Tensor_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_put_self_Tensor_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_put_self_Tensor_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_put_self_Tensor_index_Tensor_source_Tensor(self, index, source, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_index_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_index_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(out, self, dim, index, source, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor(self, dim, index, source, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor(self, dim, index, source, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_index_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_namespace_index_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(out, self, dim, index, source, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_namespace_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view(self, dim, index, source, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(out, self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(out, self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(self, dim, index, src, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(out, self, dim, index, src, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(self, dim, index, value, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value, XPtrTorchstring_view reduce);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view(out, self, dim, index, value, reduce));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar(self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_scatter_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor(out, self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchTensor src);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor(self, dim, index, src));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(self, dim, index, src, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scatter_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_scatter_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor src, XPtrTorchstring_view reduce, XPtrTorchbool include_self);
RcppExport SEXP _torch_cpp_torch_namespace_scatter_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP srcSEXP, SEXP reduceSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scatter_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view(out, self, dim, index, src, reduce, include_self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_and_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_and_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_and_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_and_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___and___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___and___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___and___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___and___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___and___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___and___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___and___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___and___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_or_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_or_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_or_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_or_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___or___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___or___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___or___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___or___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___or___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___or___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___or___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___or___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_xor_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___xor___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___xor___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___xor___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___xor___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___xor___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___xor___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___xor___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___xor___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___lshift___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___lshift___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___lshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___lshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___lshift___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___lshift___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___lshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___lshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_left_shift_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_left_shift_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_left_shift_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_left_shift_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___rshift___self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___rshift___self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___rshift___self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___rshift___self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___rshift___self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___rshift___self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___rshift___self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___rshift___self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_right_shift_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_right_shift_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_right_shift_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_right_shift_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor(out, self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor
XPtrTorchTensor cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(XPtrTorchTensor self, XPtrTorchTensor batch1, XPtrTorchTensor batch2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(SEXP selfSEXP, SEXP batch1SEXP, SEXP batch2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch1(batch1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type batch2(batch2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor(self, batch1, batch2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diag_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_diag_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_out_out_Tensor_self_Tensor(out, self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diag_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_diag_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cross_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_cross_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_cross_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cross_self_Tensor_other_Tensor(self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_triu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_triu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_out_out_Tensor_self_Tensor(out, self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_triu_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_triu_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_tril_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_tril_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_out_out_Tensor_self_Tensor(out, self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_self_Tensor
XPtrTorchTensor cpp_torch_namespace_tril_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t diagonal);
RcppExport SEXP _torch_cpp_torch_namespace_tril_self_Tensor(SEXP selfSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_self_Tensor(self, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t
XPtrTorchTensor cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t(XPtrTorchint64_t row, XPtrTorchint64_t col, XPtrTorchint64_t offset, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t(SEXP rowSEXP, SEXP colSEXP, SEXP offsetSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type row(rowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type col(colSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t(row, col, offset, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t
XPtrTorchTensor cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t(XPtrTorchint64_t row, XPtrTorchint64_t col, XPtrTorchint64_t offset, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t(SEXP rowSEXP, SEXP colSEXP, SEXP offsetSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type row(rowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type col(colSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t(row, col, offset, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trace_self_Tensor
XPtrTorchTensor cpp_torch_namespace_trace_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_trace_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trace_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef(XPtrTorchTensor grad, XPtrTorchIntArrayRef sizes);
RcppExport SEXP _torch_cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef(SEXP gradSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef(grad, sizes));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_ne_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ne_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ne_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ne_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ne_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_not_equal_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_not_equal_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_not_equal_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_not_equal_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_not_equal_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_not_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_not_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_not_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_eq_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_eq_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_eq_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_eq_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_eq_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_ge_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ge_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_ge_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_ge_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ge_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_le_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_le_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_le_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_le_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_le_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_le_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_equal_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_less_equal_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_less_equal_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_equal_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_equal_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_less_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_less_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_gt_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gt_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_gt_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_gt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_greater_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_greater_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_greater_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_greater_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_greater_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_lt_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lt_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_lt_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_lt_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lt_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_less_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_less_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_less_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_less_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_less_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_less_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor
XPtrTorchTensor cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor(out, self, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_take_self_Tensor_index_Tensor
XPtrTorchTensor cpp_torch_namespace_take_self_Tensor_index_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_take_self_Tensor_index_Tensor(SEXP selfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_take_self_Tensor_index_Tensor(self, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_take_along_dim_out_out_Tensor_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_take_along_dim_out_out_Tensor_self_Tensor_indices_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_take_along_dim_out_out_Tensor_self_Tensor_indices_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_take_along_dim_out_out_Tensor_self_Tensor_indices_Tensor(out, self, indices, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_take_along_dim_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_take_along_dim_self_Tensor_indices_Tensor(XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_take_along_dim_self_Tensor_indices_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_take_along_dim_self_Tensor_indices_Tensor(self, indices, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(out, self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor
XPtrTorchTensor cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(out, self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor
XPtrTorchTensor cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor(XPtrTorchTensor grad, XPtrTorchIntArrayRef self_sizes, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index);
RcppExport SEXP _torch_cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor(SEXP gradSEXP, SEXP self_sizesSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type self_sizes(self_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor(grad, self_sizes, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor(out, self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor(XPtrTorchTensor self, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor(SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor(self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor(XPtrTorchTensor grad, XPtrTorchTensor input, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor(SEXP gradSEXP, SEXP inputSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor(grad, input, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nonzero_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nonzero_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_nonzero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nonzero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nonzero_numpy_self_Tensor
XPtrTorchTensorList cpp_torch_namespace_nonzero_numpy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_nonzero_numpy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nonzero_numpy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argwhere_self_Tensor
XPtrTorchTensor cpp_torch_namespace_argwhere_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_argwhere_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argwhere_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor(out, self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor
XPtrTorchTensor cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool
XPtrTorchTensor cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool(XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool(SEXP gradSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool(grad, self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor
XPtrTorchTensor cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor(out, self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor
XPtrTorchTensor cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchIndexTensor index, XPtrTorchbool sparse_grad);
RcppExport SEXP _torch_cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP sparse_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse_grad(sparse_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor(self, dim, index, sparse_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor
XPtrTorchTensor cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor grad);
RcppExport SEXP _torch_cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor(self, dim, index, grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(out, self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor(out, self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor
XPtrTorchTensor cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(XPtrTorchTensor self, XPtrTorchTensor tensor1, XPtrTorchTensor tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cross_entropy_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_cross_entropy_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index, XPtrTorchdouble label_smoothing);
RcppExport SEXP _torch_cpp_torch_namespace_cross_entropy_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP label_smoothingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type label_smoothing(label_smoothingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cross_entropy_loss_self_Tensor_target_Tensor(self, target, weight, reduction, ignore_index, label_smoothing));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor(XPtrTorchTensor X, XPtrTorchTensor M, XPtrTorchTensor self, XPtrTorchTensor A, XPtrTorchbool upper, XPtrTorchbool transpose, XPtrTorchbool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor(SEXP XSEXP, SEXP MSEXP, SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type X(XSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type M(MSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor(X, M, self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor(XPtrTorchTensor self, XPtrTorchTensor A, XPtrTorchbool upper, XPtrTorchbool transpose, XPtrTorchbool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP, SEXP transposeSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor(self, A, upper, transpose, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_check_errors_info_Tensor_api_name_c10string_view_is_matrix_bool
void cpp_torch_namespace__linalg_check_errors_info_Tensor_api_name_c10string_view_is_matrix_bool(XPtrTorchTensor info, XPtrTorchstring_view api_name, XPtrTorchbool is_matrix);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_check_errors_info_Tensor_api_name_c10string_view_is_matrix_bool(SEXP infoSEXP, SEXP api_nameSEXP, SEXP is_matrixSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type api_name(api_nameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_matrix(is_matrixSEXP);
    cpp_torch_namespace__linalg_check_errors_info_Tensor_api_name_c10string_view_is_matrix_bool(info, api_name, is_matrix);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_linalg_solve_triangular_out_out_Tensor_self_Tensor_B_Tensor_upper_bool
XPtrTorchTensor cpp_torch_namespace_linalg_solve_triangular_out_out_Tensor_self_Tensor_B_Tensor_upper_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor B, XPtrTorchbool upper, XPtrTorchbool left, XPtrTorchbool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_solve_triangular_out_out_Tensor_self_Tensor_B_Tensor_upper_bool(SEXP outSEXP, SEXP selfSEXP, SEXP BSEXP, SEXP upperSEXP, SEXP leftSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_solve_triangular_out_out_Tensor_self_Tensor_B_Tensor_upper_bool(out, self, B, upper, left, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_solve_triangular_self_Tensor_B_Tensor_upper_bool
XPtrTorchTensor cpp_torch_namespace_linalg_solve_triangular_self_Tensor_B_Tensor_upper_bool(XPtrTorchTensor self, XPtrTorchTensor B, XPtrTorchbool upper, XPtrTorchbool left, XPtrTorchbool unitriangular);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_solve_triangular_self_Tensor_B_Tensor_upper_bool(SEXP selfSEXP, SEXP BSEXP, SEXP upperSEXP, SEXP leftSEXP, SEXP unitriangularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unitriangular(unitriangularSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_solve_triangular_self_Tensor_B_Tensor_upper_bool(self, B, upper, left, unitriangular));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_vander_x_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_vander_x_Tensor(XPtrTorchTensor x, XPtrTorchoptional_int64_t False);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_vander_x_Tensor(SEXP xSEXP, SEXP FalseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type False(FalseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_vander_x_Tensor(x, False));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor(XPtrTorchTensor U, XPtrTorchTensor S, XPtrTorchTensor V, XPtrTorchTensor self, XPtrTorchbool some, XPtrTorchbool compute_uv);
RcppExport SEXP _torch_cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor(SEXP USEXP, SEXP SSEXP, SEXP VSEXP, SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type U(USEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type S(SSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type V(VSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type some(someSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor(U, S, V, self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_svd_self_Tensor
Rcpp::List cpp_torch_namespace_svd_self_Tensor(XPtrTorchTensor self, XPtrTorchbool some, XPtrTorchbool compute_uv);
RcppExport SEXP _torch_cpp_torch_namespace_svd_self_Tensor(SEXP selfSEXP, SEXP someSEXP, SEXP compute_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type some(someSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_uv(compute_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_svd_self_Tensor(self, some, compute_uv));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t
XPtrTorchTensor cpp_torch_namespace_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t(XPtrTorchTensor self, XPtrTorchint64_t axis0, XPtrTorchint64_t axis1);
RcppExport SEXP _torch_cpp_torch_namespace_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t(SEXP selfSEXP, SEXP axis0SEXP, SEXP axis1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis0(axis0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis1(axis1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t(self, axis0, axis1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor(out, self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cholesky_self_Tensor(XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor
XPtrTorchTensor cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor input2, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP input2SEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor(out, self, input2, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor
XPtrTorchTensor cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor(XPtrTorchTensor self, XPtrTorchTensor input2, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor(self, input2, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool
XPtrTorchTensor cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool(XPtrTorchTensor self, XPtrTorchTensor A, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool(SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool(self, A, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_inverse_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cholesky_inverse_self_Tensor(XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_inverse_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_inverse_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor(out, self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor(XPtrTorchTensor Q, XPtrTorchTensor R, XPtrTorchTensor self, XPtrTorchbool some);
RcppExport SEXP _torch_cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor(SEXP QSEXP, SEXP RSEXP, SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type Q(QSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type R(RSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor(Q, R, self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_qr_self_Tensor
Rcpp::List cpp_torch_namespace_qr_self_Tensor(XPtrTorchTensor self, XPtrTorchbool some);
RcppExport SEXP _torch_cpp_torch_namespace_qr_self_Tensor(SEXP selfSEXP, SEXP someSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type some(someSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_qr_self_Tensor(self, some));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor(XPtrTorchTensor a, XPtrTorchTensor tau, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor(SEXP aSEXP, SEXP tauSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type a(aSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor(a, tau, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_geqrf_self_Tensor
Rcpp::List cpp_torch_namespace_geqrf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_geqrf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_geqrf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor
XPtrTorchTensor cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor(XPtrTorchTensor self, XPtrTorchTensor input2);
RcppExport SEXP _torch_cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor(SEXP selfSEXP, SEXP input2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor(self, input2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor
XPtrTorchTensor cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor input2);
RcppExport SEXP _torch_cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP input2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor(out, self, input2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor
XPtrTorchTensor cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor input2, XPtrTorchTensor input3, XPtrTorchbool left, XPtrTorchbool transpose);
RcppExport SEXP _torch_cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP input2SEXP, SEXP input3SEXP, SEXP leftSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input3(input3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor(out, self, input2, input3, left, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor
XPtrTorchTensor cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor(XPtrTorchTensor self, XPtrTorchTensor input2, XPtrTorchTensor input3, XPtrTorchbool left, XPtrTorchbool transpose);
RcppExport SEXP _torch_cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor(SEXP selfSEXP, SEXP input2SEXP, SEXP input3SEXP, SEXP leftSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input2(input2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input3(input3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor(self, input2, input3, left, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__lu_with_info_self_Tensor
Rcpp::List cpp_torch_namespace__lu_with_info_self_Tensor(XPtrTorchTensor self, XPtrTorchbool pivot, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace__lu_with_info_self_Tensor(SEXP selfSEXP, SEXP pivotSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__lu_with_info_self_Tensor(self, pivot, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
XPtrTorchTensor cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor LU_data, XPtrTorchTensor LU_pivots);
RcppExport SEXP _torch_cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(out, self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor
XPtrTorchTensor cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(XPtrTorchTensor self, XPtrTorchTensor LU_data, XPtrTorchTensor LU_pivots);
RcppExport SEXP _torch_cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP selfSEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_pivots(LU_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor(self, LU_data, LU_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lu_unpack_LU_data_Tensor_LU_pivots_Tensor
Rcpp::List cpp_torch_namespace_lu_unpack_LU_data_Tensor_LU_pivots_Tensor(XPtrTorchTensor LU_data, XPtrTorchTensor LU_pivots, XPtrTorchbool unpack_data, XPtrTorchbool unpack_pivots);
RcppExport SEXP _torch_cpp_torch_namespace_lu_unpack_LU_data_Tensor_LU_pivots_Tensor(SEXP LU_dataSEXP, SEXP LU_pivotsSEXP, SEXP unpack_dataSEXP, SEXP unpack_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_pivots(LU_pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unpack_data(unpack_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unpack_pivots(unpack_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lu_unpack_LU_data_Tensor_LU_pivots_Tensor(LU_data, LU_pivots, unpack_data, unpack_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lu_unpack_out_P_Tensor_L_Tensor_U_Tensor_LU_data_Tensor_LU_pivots_Tensor
Rcpp::List cpp_torch_namespace_lu_unpack_out_P_Tensor_L_Tensor_U_Tensor_LU_data_Tensor_LU_pivots_Tensor(XPtrTorchTensor P, XPtrTorchTensor L, XPtrTorchTensor U, XPtrTorchTensor LU_data, XPtrTorchTensor LU_pivots, XPtrTorchbool unpack_data, XPtrTorchbool unpack_pivots);
RcppExport SEXP _torch_cpp_torch_namespace_lu_unpack_out_P_Tensor_L_Tensor_U_Tensor_LU_data_Tensor_LU_pivots_Tensor(SEXP PSEXP, SEXP LSEXP, SEXP USEXP, SEXP LU_dataSEXP, SEXP LU_pivotsSEXP, SEXP unpack_dataSEXP, SEXP unpack_pivotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type P(PSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type L(LSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type U(USEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_data(LU_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU_pivots(LU_pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unpack_data(unpack_dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unpack_pivots(unpack_pivotsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lu_unpack_out_P_Tensor_L_Tensor_U_Tensor_LU_data_Tensor_LU_pivots_Tensor(P, L, U, LU_data, LU_pivots, unpack_data, unpack_pivots));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t
XPtrTorchTensor cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t num_samples, XPtrTorchbool replacement, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP num_samplesSEXP, SEXP replacementSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t(out, self, num_samples, replacement, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t
XPtrTorchTensor cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t(XPtrTorchTensor self, XPtrTorchint64_t num_samples, XPtrTorchbool replacement, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t(SEXP selfSEXP, SEXP num_samplesSEXP, SEXP replacementSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t(self, num_samples, replacement, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lgamma_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lgamma_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lgamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lgamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_digamma_self_Tensor
XPtrTorchTensor cpp_torch_namespace_digamma_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_digamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_digamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor(XPtrTorchTensor out, XPtrTorchint64_t n, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor(SEXP outSEXP, SEXP nSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor(out, n, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfinv_self_Tensor
XPtrTorchTensor cpp_torch_namespace_erfinv_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erfinv_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfinv_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_i0_self_Tensor
XPtrTorchTensor cpp_torch_namespace_i0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_i0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_i0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_i0__self_Tensor
XPtrTorchTensor cpp_torch_namespace_i0__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_i0__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_i0__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_i0_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_i0_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_i0_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_i0_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sign_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sign_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sign_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sign_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sign_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sign_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_sign_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sign_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_signbit_self_Tensor
XPtrTorchTensor cpp_torch_namespace_signbit_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_signbit_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_signbit_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dist_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_dist_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_namespace_dist_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dist_self_Tensor_other_Tensor(self, other, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_atan2_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_atan2_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_atan2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_atan2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctan2_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_arctan2_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_arctan2_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctan2_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_arctan2_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_arctan2_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_arctan2_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_arctan2_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar
XPtrTorchTensor cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar(out, self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor(out, self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar
XPtrTorchTensor cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar(XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor(XPtrTorchTensor self, XPtrTorchTensor end, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor(SEXP selfSEXP, SEXP endSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor(self, end, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_histc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchScalar min, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_namespace_histc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histc_out_out_Tensor_self_Tensor(out, self, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histc_self_Tensor
XPtrTorchTensor cpp_torch_namespace_histc_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchScalar min, XPtrTorchScalar max);
RcppExport SEXP _torch_cpp_torch_namespace_histc_self_Tensor(SEXP selfSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min(minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histc_self_Tensor(self, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_Tensor
Rcpp::List cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_Tensor(XPtrTorchTensor hist, XPtrTorchTensor bin_edges, XPtrTorchTensor self, XPtrTorchTensor bins, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_Tensor(SEXP histSEXP, SEXP bin_edgesSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hist(histSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bin_edges(bin_edgesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_Tensor(hist, bin_edges, self, bins, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogram_self_Tensor_bins_Tensor
Rcpp::List cpp_torch_namespace_histogram_self_Tensor_bins_Tensor(XPtrTorchTensor self, XPtrTorchTensor bins, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogram_self_Tensor_bins_Tensor(SEXP selfSEXP, SEXP binsSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogram_self_Tensor_bins_Tensor(self, bins, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_int64_t
Rcpp::List cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_int64_t(XPtrTorchTensor hist, XPtrTorchTensor bin_edges, XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_int64_t(SEXP histSEXP, SEXP bin_edgesSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hist(histSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bin_edges(bin_edgesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_int64_t(hist, bin_edges, self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogram_self_Tensor_bins_int64_t
Rcpp::List cpp_torch_namespace_histogram_self_Tensor_bins_int64_t(XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogram_self_Tensor_bins_int64_t(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogram_self_Tensor_bins_int64_t(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__histogramdd_bin_edges_self_Tensor_bins_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace__histogramdd_bin_edges_self_Tensor_bins_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace__histogramdd_bin_edges_self_Tensor_bins_IntArrayRef(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__histogramdd_bin_edges_self_Tensor_bins_IntArrayRef(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__histogramdd_from_bin_cts_self_Tensor_bins_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__histogramdd_from_bin_cts_self_Tensor_bins_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace__histogramdd_from_bin_cts_self_Tensor_bins_IntArrayRef(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__histogramdd_from_bin_cts_self_Tensor_bins_IntArrayRef(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__histogramdd_from_bin_tensors_self_Tensor_bins_TensorList
XPtrTorchTensor cpp_torch_namespace__histogramdd_from_bin_tensors_self_Tensor_bins_TensorList(XPtrTorchTensor self, XPtrTorchTensorList bins, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace__histogramdd_from_bin_tensors_self_Tensor_bins_TensorList(SEXP selfSEXP, SEXP binsSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__histogramdd_from_bin_tensors_self_Tensor_bins_TensorList(self, bins, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogramdd_self_Tensor_bins_IntArrayRef
Rcpp::List cpp_torch_namespace_histogramdd_self_Tensor_bins_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_IntArrayRef(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogramdd_self_Tensor_bins_IntArrayRef(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogramdd_self_Tensor_bins_int64_t
Rcpp::List cpp_torch_namespace_histogramdd_self_Tensor_bins_int64_t(XPtrTorchTensor self, XPtrTorchint64_t bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_int64_t(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogramdd_self_Tensor_bins_int64_t(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_histogramdd_self_Tensor_bins_TensorList
Rcpp::List cpp_torch_namespace_histogramdd_self_Tensor_bins_TensorList(XPtrTorchTensor self, XPtrTorchTensorList bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_TensorList(SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_histogramdd_self_Tensor_bins_TensorList(self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_fmod_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmod_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_fmod_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_fmod_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmod_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hypot_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_hypot_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_hypot_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hypot_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_igamma_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_igamma_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_igamma_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_igamma_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_igamma_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_igamma_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_igamma_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_igamma_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_igammac_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_igammac_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_igammac_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_igammac_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_igammac_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_igammac_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_igammac_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_igammac_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nextafter_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_nextafter_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_nextafter_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nextafter_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_remainder_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_remainder_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_remainder_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor
XPtrTorchTensor cpp_torch_namespace_min_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmin_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_fmin_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_fmin_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmin_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmin_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_fmin_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_fmin_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmin_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor
XPtrTorchTensor cpp_torch_namespace_max_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmax_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_fmax_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_fmax_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmax_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fmax_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_fmax_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_fmax_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fmax_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_maximum_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_maximum_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_maximum_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_maximum_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_max_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_max_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_out_Tensor_other_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_max_out_out_Tensor_other_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_out_Tensor_other_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_out_Tensor_other_Tensor_self_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_max_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_max_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_minimum_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_minimum_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_minimum_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_minimum_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_out_out_Tensor_other_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_min_out_out_Tensor_other_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_min_out_out_Tensor_other_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_out_out_Tensor_other_Tensor_self_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_min_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_min_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_min_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_min_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantile_self_Tensor_q_Tensor
XPtrTorchTensor cpp_torch_namespace_quantile_self_Tensor_q_Tensor(XPtrTorchTensor self, XPtrTorchTensor q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_quantile_self_Tensor_q_Tensor(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantile_self_Tensor_q_Tensor(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor
XPtrTorchTensor cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor(out, self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantile_self_Tensor_q_double
XPtrTorchTensor cpp_torch_namespace_quantile_self_Tensor_q_double(XPtrTorchTensor self, XPtrTorchdouble q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_quantile_self_Tensor_q_double(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantile_self_Tensor_q_double(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double
XPtrTorchTensor cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double(SEXP outSEXP, SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double(out, self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor
XPtrTorchTensor cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor(XPtrTorchTensor self, XPtrTorchTensor q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor
XPtrTorchTensor cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor(out, self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanquantile_self_Tensor_q_double
XPtrTorchTensor cpp_torch_namespace_nanquantile_self_Tensor_q_double(XPtrTorchTensor self, XPtrTorchdouble q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_nanquantile_self_Tensor_q_double(SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanquantile_self_Tensor_q_double(self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double
XPtrTorchTensor cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble q, XPtrTorchoptional_index_int64_t dim, XPtrTorchbool keepdim, XPtrTorchstring_view interpolation);
RcppExport SEXP _torch_cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double(SEXP outSEXP, SEXP selfSEXP, SEXP qSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP interpolationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type interpolation(interpolationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double(out, self, q, dim, keepdim, interpolation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t(values, indices, self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_int64_t
Rcpp::List cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchoptional_bool stable, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_int64_t(values, indices, self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_sort_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_self_Tensor_dim_int64_t(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_self_Tensor_dim_int64_t_stable_bool
Rcpp::List cpp_torch_namespace_sort_self_Tensor_dim_int64_t_stable_bool(XPtrTorchTensor self, XPtrTorchoptional_bool stable, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_self_Tensor_dim_int64_t_stable_bool(SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_self_Tensor_dim_int64_t_stable_bool(self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname(values, indices, self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_Dimname
Rcpp::List cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_Dimname(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchoptional_bool stable, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_Dimname(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_Dimname(values, indices, self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_self_Tensor_dim_Dimname
Rcpp::List cpp_torch_namespace_sort_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sort_self_Tensor_dim_Dimname_stable_bool
Rcpp::List cpp_torch_namespace_sort_self_Tensor_dim_Dimname_stable_bool(XPtrTorchTensor self, XPtrTorchoptional_bool stable, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname_stable_bool(SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sort_self_Tensor_dim_Dimname_stable_bool(self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_msort_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_msort_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_msort_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_msort_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_msort_self_Tensor
XPtrTorchTensor cpp_torch_namespace_msort_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_msort_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_msort_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argsort_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_argsort_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_argsort_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argsort_self_Tensor_dim_int64_t(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argsort_self_Tensor_stable_bool_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_argsort_self_Tensor_stable_bool_dim_int64_t(XPtrTorchTensor self, XPtrTorchbool stable, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_argsort_self_Tensor_stable_bool_dim_int64_t(SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argsort_self_Tensor_stable_bool_dim_int64_t(self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argsort_self_Tensor_dim_Dimname
XPtrTorchTensor cpp_torch_namespace_argsort_self_Tensor_dim_Dimname(XPtrTorchTensor self, XPtrTorchDimname dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_argsort_self_Tensor_dim_Dimname(SEXP selfSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDimname >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argsort_self_Tensor_dim_Dimname(self, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t
Rcpp::List cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(XPtrTorchTensor values, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchindex_int64_t dim, XPtrTorchbool largest, XPtrTorchbool sorted);
RcppExport SEXP _torch_cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(SEXP valuesSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t(values, indices, self, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_topk_self_Tensor_k_int64_t
Rcpp::List cpp_torch_namespace_topk_self_Tensor_k_int64_t(XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchindex_int64_t dim, XPtrTorchbool largest, XPtrTorchbool sorted);
RcppExport SEXP _torch_cpp_torch_namespace_topk_self_Tensor_k_int64_t(SEXP selfSEXP, SEXP kSEXP, SEXP dimSEXP, SEXP largestSEXP, SEXP sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type largest(largestSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_topk_self_Tensor_k_int64_t(self, k, dim, largest, sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_self_Tensor
XPtrTorchTensor cpp_torch_namespace_all_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_all_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_all_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_all_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_all_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_self_Tensor
XPtrTorchTensor cpp_torch_namespace_any_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_any_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_any_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_any_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_any_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
XPtrTorchTensor cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar p, XPtrTorchindex_int64_t dim, XPtrTorchScalar maxnorm);
RcppExport SEXP _torch_cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(out, self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar
XPtrTorchTensor cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(XPtrTorchTensor self, XPtrTorchScalar p, XPtrTorchindex_int64_t dim, XPtrTorchScalar maxnorm);
RcppExport SEXP _torch_cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP maxnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type maxnorm(maxnormSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar(self, p, dim, maxnorm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t(XPtrTorchTensor grad_in, XPtrTorchIntArrayRef input_sizes, XPtrTorchindex_int64_t dim, XPtrTorchint64_t size, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t(SEXP grad_inSEXP, SEXP input_sizesSEXP, SEXP dimSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_in(grad_inSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t(grad_in, input_sizes, dim, size, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_equal_self_Tensor_other_Tensor
XPtrTorchbool cpp_torch_namespace_equal_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_equal_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_equal_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_pow_self_Tensor_exponent_Tensor(XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_self_Scalar_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_pow_self_Scalar_exponent_Tensor(XPtrTorchScalar self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_self_Scalar_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_self_Scalar_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pow_self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_namespace_pow_self_Tensor_exponent_Scalar(XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_namespace_pow_self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pow_self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Tensor(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_float_power_self_Tensor_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_float_power_self_Tensor_exponent_Tensor(XPtrTorchTensor self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_float_power_self_Tensor_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_float_power_self_Tensor_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_float_power_out_out_Tensor_self_Scalar_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_float_power_out_out_Tensor_self_Scalar_exponent_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Scalar_exponent_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_float_power_out_out_Tensor_self_Scalar_exponent_Tensor(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_float_power_self_Scalar_exponent_Tensor
XPtrTorchTensor cpp_torch_namespace_float_power_self_Scalar_exponent_Tensor(XPtrTorchScalar self, XPtrTorchTensor exponent);
RcppExport SEXP _torch_cpp_torch_namespace_float_power_self_Scalar_exponent_Tensor(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_float_power_self_Scalar_exponent_Tensor(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Scalar(out, self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_float_power_self_Tensor_exponent_Scalar
XPtrTorchTensor cpp_torch_namespace_float_power_self_Tensor_exponent_Scalar(XPtrTorchTensor self, XPtrTorchScalar exponent);
RcppExport SEXP _torch_cpp_torch_namespace_float_power_self_Tensor_exponent_Scalar(SEXP selfSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_float_power_self_Tensor_exponent_Scalar(self, exponent));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_functional_self_Tensor
XPtrTorchTensor cpp_torch_namespace_normal_functional_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_functional_self_Tensor(SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_functional_self_Tensor(self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_double
XPtrTorchTensor cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_double(XPtrTorchTensor out, XPtrTorchTensor mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_double(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_double(out, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor
XPtrTorchTensor cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor(XPtrTorchTensor out, XPtrTorchdouble mean, XPtrTorchTensor std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor(out, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor
XPtrTorchTensor cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor(XPtrTorchTensor out, XPtrTorchTensor mean, XPtrTorchTensor std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor(out, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_mean_double_size_IntArrayRef_std_double
XPtrTorchTensor cpp_torch_namespace_normal_out_out_Tensor_mean_double_size_IntArrayRef_std_double(XPtrTorchTensor out, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_size_IntArrayRef_std_double(SEXP outSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP sizeSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_mean_double_size_IntArrayRef_std_double(out, mean, std, size, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alias_self_Tensor
XPtrTorchTensor cpp_torch_namespace_alias_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_alias_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alias_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale__self_TensorList_found_inf_Tensor_inv_scale_Tensor
void cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale__self_TensorList_found_inf_Tensor_inv_scale_Tensor(XPtrTorchTensorList self, XPtrTorchTensor found_inf, XPtrTorchTensor inv_scale);
RcppExport SEXP _torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale__self_TensorList_found_inf_Tensor_inv_scale_Tensor(SEXP selfSEXP, SEXP found_infSEXP, SEXP inv_scaleSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type inv_scale(inv_scaleSEXP);
    cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale__self_TensorList_found_inf_Tensor_inv_scale_Tensor(self, found_inf, inv_scale);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__amp_update_scale__self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t
XPtrTorchTensor cpp_torch_namespace__amp_update_scale__self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(XPtrTorchTensor self, XPtrTorchTensor growth_tracker, XPtrTorchTensor found_inf, XPtrTorchdouble scale_growth_factor, XPtrTorchdouble scale_backoff_factor, XPtrTorchint64_t growth_interval);
RcppExport SEXP _torch_cpp_torch_namespace__amp_update_scale__self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(SEXP selfSEXP, SEXP growth_trackerSEXP, SEXP found_infSEXP, SEXP scale_growth_factorSEXP, SEXP scale_backoff_factorSEXP, SEXP growth_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type growth_tracker(growth_trackerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale_growth_factor(scale_growth_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale_backoff_factor(scale_backoff_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type growth_interval(growth_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__amp_update_scale__self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(self, growth_tracker, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_add_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_add_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_add_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sub_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_sub_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sub_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_mul_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_mul_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_mul_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_div_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_div_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_div_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_maximum_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_maximum_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_maximum__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_maximum__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum_self_TensorList_scalar_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_minimum_self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum_self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_minimum_self_TensorList_scalar_Scalar(self, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum__self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_minimum__self_TensorList_scalar_Scalar(XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum__self_TensorList_scalar_Scalar(SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_minimum__self_TensorList_scalar_Scalar(self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_add_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_add_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_add_self_TensorList_other_TensorList(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList(self, other, alpha);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sub_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_sub_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sub_self_TensorList_other_TensorList(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList(self, other, alpha);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_mul_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_mul_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_mul_self_TensorList_other_TensorList(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList(self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_div_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_div_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_div_self_TensorList_other_TensorList(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList(self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_clamp_min_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_clamp_min_self_TensorList_other_TensorList(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_clamp_min__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_clamp_min__self_TensorList_other_TensorList(self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_clamp_max_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_clamp_max_self_TensorList_other_TensorList(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_clamp_max__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_clamp_max__self_TensorList_other_TensorList(self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_maximum_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_maximum_self_TensorList_other_TensorList(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_maximum__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_maximum__self_TensorList_other_TensorList(self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum_self_TensorList_other_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_minimum_self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum_self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_minimum_self_TensorList_other_TensorList(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum__self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_minimum__self_TensorList_other_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum__self_TensorList_other_TensorList(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_minimum__self_TensorList_other_TensorList(self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_add_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_add_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_add_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_add__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_add__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_add__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sub_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_sub_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sub_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sub__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_sub__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_sub__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_div_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_div_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_div_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_div__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_div__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_div__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_mul_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_mul_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_mul_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_mul__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_mul__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_mul__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_maximum_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_maximum_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_maximum__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_maximum__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum_self_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_minimum_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum_self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_minimum_self_TensorList_scalars_ArrayRefScalar(self, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum__self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_minimum__self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum__self_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_minimum__self_TensorList_scalars_ArrayRefScalar(self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_exp_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_exp_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_exp_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_exp_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_zero__self_TensorList
void cpp_torch_namespace__foreach_zero__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_zero__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_zero__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_exp__self_TensorList
void cpp_torch_namespace__foreach_exp__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_exp__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_exp__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sqrt_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_sqrt_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sqrt_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sqrt_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sqrt__self_TensorList
void cpp_torch_namespace__foreach_sqrt__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sqrt__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sqrt__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_abs_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_abs_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_abs_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_abs_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_abs__self_TensorList
void cpp_torch_namespace__foreach_abs__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_abs__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_abs__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_acos_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_acos_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_acos_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_acos_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_acos__self_TensorList
void cpp_torch_namespace__foreach_acos__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_acos__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_acos__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_asin_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_asin_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_asin_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_asin_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_asin__self_TensorList
void cpp_torch_namespace__foreach_asin__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_asin__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_asin__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_atan_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_atan_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_atan_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_atan_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_atan__self_TensorList
void cpp_torch_namespace__foreach_atan__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_atan__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_atan__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_ceil_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_ceil_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_ceil_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_ceil_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_ceil__self_TensorList
void cpp_torch_namespace__foreach_ceil__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_ceil__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_ceil__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_cos_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_cos_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_cos_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_cos_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_cos__self_TensorList
void cpp_torch_namespace__foreach_cos__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_cos__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_cos__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_cosh_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_cosh_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_cosh_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_cosh_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_cosh__self_TensorList
void cpp_torch_namespace__foreach_cosh__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_cosh__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_cosh__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_erf_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_erf_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_erf_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_erf_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_erf__self_TensorList
void cpp_torch_namespace__foreach_erf__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_erf__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_erf__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_erfc_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_erfc_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_erfc_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_erfc_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_erfc__self_TensorList
void cpp_torch_namespace__foreach_erfc__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_erfc__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_erfc__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_expm1_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_expm1_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_expm1_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_expm1_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_expm1__self_TensorList
void cpp_torch_namespace__foreach_expm1__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_expm1__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_expm1__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_floor_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_floor_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_floor_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_floor_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_floor__self_TensorList
void cpp_torch_namespace__foreach_floor__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_floor__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_floor__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_log_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_log_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_log__self_TensorList
void cpp_torch_namespace__foreach_log__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log10_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_log10_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log10_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_log10_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_log10__self_TensorList
void cpp_torch_namespace__foreach_log10__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log10__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log10__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log1p_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_log1p_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log1p_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_log1p_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_log1p__self_TensorList
void cpp_torch_namespace__foreach_log1p__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log1p__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log1p__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log2_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_log2_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log2_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_log2_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_log2__self_TensorList
void cpp_torch_namespace__foreach_log2__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log2__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log2__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_neg_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_neg_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_neg_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_neg_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_neg__self_TensorList
void cpp_torch_namespace__foreach_neg__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_neg__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_neg__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_tan_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_tan_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_tan_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_tan_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_tan__self_TensorList
void cpp_torch_namespace__foreach_tan__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_tan__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_tan__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_tanh_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_tanh_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_tanh_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_tanh_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_tanh__self_TensorList
void cpp_torch_namespace__foreach_tanh__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_tanh__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_tanh__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sin_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_sin_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sin_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sin_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sin__self_TensorList
void cpp_torch_namespace__foreach_sin__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sin__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sin__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sinh_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_sinh_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sinh_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sinh_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sinh__self_TensorList
void cpp_torch_namespace__foreach_sinh__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sinh__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sinh__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_round_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_round_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_round_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_round_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_round__self_TensorList
void cpp_torch_namespace__foreach_round__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_round__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_round__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_lgamma_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_lgamma_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lgamma_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_lgamma_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_lgamma__self_TensorList
void cpp_torch_namespace__foreach_lgamma__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lgamma__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_lgamma__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_frac_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_frac_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_frac_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_frac_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_frac__self_TensorList
void cpp_torch_namespace__foreach_frac__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_frac__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_frac__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_reciprocal_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_reciprocal_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_reciprocal_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_reciprocal_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_reciprocal__self_TensorList
void cpp_torch_namespace__foreach_reciprocal__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_reciprocal__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_reciprocal__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sigmoid_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_sigmoid_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sigmoid_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_sigmoid_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sigmoid__self_TensorList
void cpp_torch_namespace__foreach_sigmoid__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sigmoid__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sigmoid__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_trunc_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_trunc_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_trunc_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_trunc_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_trunc__self_TensorList
void cpp_torch_namespace__foreach_trunc__self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_trunc__self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_trunc__self_TensorList(self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList
void cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList(self, tensor1, tensor2, value);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList
void cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList(self, tensor1, tensor2, value);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor
void cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchTensor scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor
void cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchTensor scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList(self, tensor1, tensor2, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(self, tensor1, tensor2, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor
XPtrTorchTensorList cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchTensor scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(self, tensor1, tensor2, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar
XPtrTorchTensorList cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(self, tensor1, tensor2, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor
XPtrTorchTensorList cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchTensor scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scalars(scalarsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(self, tensor1, tensor2, scalars));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_norm_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_norm_self_TensorList(XPtrTorchTensorList self, XPtrTorchScalar ord);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_norm_self_TensorList(SEXP selfSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type ord(ordSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_norm_self_TensorList(self, ord));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weights_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weights_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList tensors1, XPtrTorchTensorList weights);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weights_TensorList(SEXP selfSEXP, SEXP tensors1SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors1(tensors1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weights_TensorList(self, tensors1, weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weights_TensorList
void cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weights_TensorList(XPtrTorchTensorList self, XPtrTorchTensorList tensors1, XPtrTorchTensorList weights);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weights_TensorList(SEXP selfSEXP, SEXP tensors1SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors1(tensors1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weights(weightsSEXP);
    cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weights_TensorList(self, tensors1, weights);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weight_Scalar
XPtrTorchTensorList cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weight_Scalar(XPtrTorchTensorList self, XPtrTorchTensorList tensors1, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weight_Scalar(SEXP selfSEXP, SEXP tensors1SEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors1(tensors1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weight_Scalar(self, tensors1, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weight_Scalar
void cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weight_Scalar(XPtrTorchTensorList self, XPtrTorchTensorList tensors1, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weight_Scalar(SEXP selfSEXP, SEXP tensors1SEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors1(tensors1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weight_Scalar(self, tensors1, weight);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor
XPtrTorchTensor cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor(XPtrTorchTensor self, XPtrTorchTensor boundaries, XPtrTorchbool out_int32, XPtrTorchbool right);
RcppExport SEXP _torch_cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor(SEXP selfSEXP, SEXP boundariesSEXP, SEXP out_int32SEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type boundaries(boundariesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor(self, boundaries, out_int32, right));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor
XPtrTorchTensor cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor boundaries, XPtrTorchbool out_int32, XPtrTorchbool right);
RcppExport SEXP _torch_cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP boundariesSEXP, SEXP out_int32SEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type boundaries(boundariesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor(out, self, boundaries, out_int32, right));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor
XPtrTorchTensor cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor(XPtrTorchScalar self, XPtrTorchTensor boundaries, XPtrTorchbool out_int32, XPtrTorchbool right);
RcppExport SEXP _torch_cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor(SEXP selfSEXP, SEXP boundariesSEXP, SEXP out_int32SEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type boundaries(boundariesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor(self, boundaries, out_int32, right));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor(XPtrTorchTensor sorted_sequence, XPtrTorchTensor self, XPtrTorchbool out_int32, XPtrTorchbool right, XPtrTorchoptional_string_view side, XPtrTorchOptionalTensor sorter);
RcppExport SEXP _torch_cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor(SEXP sorted_sequenceSEXP, SEXP selfSEXP, SEXP out_int32SEXP, SEXP rightSEXP, SEXP sideSEXP, SEXP sorterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sorted_sequence(sorted_sequenceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type side(sideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type sorter(sorterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor(sorted_sequence, self, out_int32, right, side, sorter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor sorted_sequence, XPtrTorchTensor self, XPtrTorchbool out_int32, XPtrTorchbool right, XPtrTorchoptional_string_view side, XPtrTorchOptionalTensor sorter);
RcppExport SEXP _torch_cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor(SEXP outSEXP, SEXP sorted_sequenceSEXP, SEXP selfSEXP, SEXP out_int32SEXP, SEXP rightSEXP, SEXP sideSEXP, SEXP sorterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sorted_sequence(sorted_sequenceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type side(sideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type sorter(sorterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor(out, sorted_sequence, self, out_int32, right, side, sorter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar
XPtrTorchTensor cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar(XPtrTorchTensor sorted_sequence, XPtrTorchScalar self, XPtrTorchbool out_int32, XPtrTorchbool right, XPtrTorchoptional_string_view side, XPtrTorchOptionalTensor sorter);
RcppExport SEXP _torch_cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar(SEXP sorted_sequenceSEXP, SEXP selfSEXP, SEXP out_int32SEXP, SEXP rightSEXP, SEXP sideSEXP, SEXP sorterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sorted_sequence(sorted_sequenceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type side(sideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type sorter(sorterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar(sorted_sequence, self, out_int32, right, side, sorter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convert_indices_from_coo_to_csr_self_Tensor_size_int64_t
XPtrTorchTensor cpp_torch_namespace__convert_indices_from_coo_to_csr_self_Tensor_size_int64_t(XPtrTorchTensor self, XPtrTorchint64_t size, XPtrTorchbool out_int32);
RcppExport SEXP _torch_cpp_torch_namespace__convert_indices_from_coo_to_csr_self_Tensor_size_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP out_int32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convert_indices_from_coo_to_csr_self_Tensor_size_int64_t(self, size, out_int32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convert_indices_from_coo_to_csr_out_out_Tensor_self_Tensor_size_int64_t
XPtrTorchTensor cpp_torch_namespace__convert_indices_from_coo_to_csr_out_out_Tensor_self_Tensor_size_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t size, XPtrTorchbool out_int32);
RcppExport SEXP _torch_cpp_torch_namespace__convert_indices_from_coo_to_csr_out_out_Tensor_self_Tensor_size_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP out_int32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convert_indices_from_coo_to_csr_out_out_Tensor_self_Tensor_size_int64_t(out, self, size, out_int32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convert_indices_from_csr_to_coo_crow_indices_Tensor_col_indices_Tensor
XPtrTorchTensor cpp_torch_namespace__convert_indices_from_csr_to_coo_crow_indices_Tensor_col_indices_Tensor(XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchbool out_int32, XPtrTorchbool transpose);
RcppExport SEXP _torch_cpp_torch_namespace__convert_indices_from_csr_to_coo_crow_indices_Tensor_col_indices_Tensor(SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP out_int32SEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convert_indices_from_csr_to_coo_crow_indices_Tensor_col_indices_Tensor(crow_indices, col_indices, out_int32, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convert_indices_from_csr_to_coo_out_out_Tensor_crow_indices_Tensor_col_indices_Tensor
XPtrTorchTensor cpp_torch_namespace__convert_indices_from_csr_to_coo_out_out_Tensor_crow_indices_Tensor_col_indices_Tensor(XPtrTorchTensor out, XPtrTorchTensor crow_indices, XPtrTorchTensor col_indices, XPtrTorchbool out_int32, XPtrTorchbool transpose);
RcppExport SEXP _torch_cpp_torch_namespace__convert_indices_from_csr_to_coo_out_out_Tensor_crow_indices_Tensor_col_indices_Tensor(SEXP outSEXP, SEXP crow_indicesSEXP, SEXP col_indicesSEXP, SEXP out_int32SEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type crow_indices(crow_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type col_indices(col_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convert_indices_from_csr_to_coo_out_out_Tensor_crow_indices_Tensor_col_indices_Tensor(out, crow_indices, col_indices, out_int32, transpose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
XPtrTorchTensor cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_input, grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
XPtrTorchTensor cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchScalar p, XPtrTorchScalar margin, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchScalar p, XPtrTorchScalar margin, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor(self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar
XPtrTorchTensor cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchScalar p, XPtrTorchScalar margin, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(grad_input, grad_output, self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar
XPtrTorchTensor cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchScalar p, XPtrTorchScalar margin, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP pSEXP, SEXP marginSEXP, SEXP weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar(grad_output, self, target, p, margin, weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::List cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t(XPtrTorchTensor output, XPtrTorchTensor is_target, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP outputSEXP, SEXP is_targetSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type is_target(is_targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t(output, is_target, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t
Rcpp::List cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor
XPtrTorchTensor cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchTensor is_target);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP is_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type is_target(is_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(grad_input, grad_output, self, target, reduction, is_target));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor
XPtrTorchTensor cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchTensor is_target);
RcppExport SEXP _torch_cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP is_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type is_target(is_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor(grad_output, self, target, reduction, is_target));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_nd_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss_nd_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_nd_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_nd_self_Tensor_target_Tensor(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(XPtrTorchTensor output, XPtrTorchTensor total_weight, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP outputSEXP, SEXP total_weightSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total_weight(total_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(output, total_weight, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index, XPtrTorchTensor total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index, XPtrTorchTensor total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(XPtrTorchTensor output, XPtrTorchTensor total_weight, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP outputSEXP, SEXP total_weightSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total_weight(total_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(output, total_weight, self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t
Rcpp::List cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t(self, target, weight, reduction, ignore_index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index, XPtrTorchTensor total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchint64_t reduction, XPtrTorchint64_t ignore_index, XPtrTorchTensor total_weight);
RcppExport SEXP _torch_cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP reductionSEXP, SEXP ignore_indexSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ignore_index(ignore_indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor(grad_output, self, target, weight, reduction, ignore_index, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble beta);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble beta);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor(self, target, reduction, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double
XPtrTorchTensor cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble beta);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double(grad_input, grad_output, self, target, reduction, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double
XPtrTorchTensor cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble beta);
RcppExport SEXP _torch_cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double(grad_output, self, target, reduction, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_huber_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_huber_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble delta);
RcppExport SEXP _torch_cpp_torch_namespace_huber_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_huber_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction, delta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_huber_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_huber_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble delta);
RcppExport SEXP _torch_cpp_torch_namespace_huber_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_huber_loss_self_Tensor_target_Tensor(self, target, reduction, delta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_huber_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double
XPtrTorchTensor cpp_torch_namespace_huber_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble delta);
RcppExport SEXP _torch_cpp_torch_namespace_huber_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_huber_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double(grad_input, grad_output, self, target, reduction, delta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_huber_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double
XPtrTorchTensor cpp_torch_namespace_huber_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction, XPtrTorchdouble delta);
RcppExport SEXP _torch_cpp_torch_namespace_huber_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_huber_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double(grad_output, self, target, reduction, delta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor(XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor(SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor(self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
XPtrTorchTensor cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_input, grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t
XPtrTorchTensor cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t(grad_output, self, target, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_elu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar alpha, XPtrTorchScalar scale, XPtrTorchScalar input_scale);
RcppExport SEXP _torch_cpp_torch_namespace_elu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type input_scale(input_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_out_out_Tensor_self_Tensor(out, self, alpha, scale, input_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_elu_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar alpha, XPtrTorchScalar scale, XPtrTorchScalar input_scale);
RcppExport SEXP _torch_cpp_torch_namespace_elu_self_Tensor(SEXP selfSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type input_scale(input_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_self_Tensor(self, alpha, scale, input_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor
XPtrTorchTensor cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchScalar alpha, XPtrTorchScalar scale, XPtrTorchScalar input_scale, XPtrTorchbool is_result, XPtrTorchTensor self_or_result);
RcppExport SEXP _torch_cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP, SEXP is_resultSEXP, SEXP self_or_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type input_scale(input_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_result(is_resultSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self_or_result(self_or_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor(grad_input, grad_output, alpha, scale, input_scale, is_result, self_or_result));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor
XPtrTorchTensor cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor(XPtrTorchTensor grad_output, XPtrTorchScalar alpha, XPtrTorchScalar scale, XPtrTorchScalar input_scale, XPtrTorchbool is_result, XPtrTorchTensor self_or_result);
RcppExport SEXP _torch_cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor(SEXP grad_outputSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP, SEXP is_resultSEXP, SEXP self_or_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type input_scale(input_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_result(is_resultSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self_or_result(self_or_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor(grad_output, alpha, scale, input_scale, is_result, self_or_result));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_elu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_elu__self_Tensor(XPtrTorchTensor self, XPtrTorchScalar alpha, XPtrTorchScalar scale, XPtrTorchScalar input_scale);
RcppExport SEXP _torch_cpp_torch_namespace_elu__self_Tensor(SEXP selfSEXP, SEXP alphaSEXP, SEXP scaleSEXP, SEXP input_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type input_scale(input_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_elu__self_Tensor(self, alpha, scale, input_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_glu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_out_out_Tensor_self_Tensor(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_glu_self_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t(grad_input, grad_output, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t(grad_output, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_jvp_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_glu_jvp_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t(XPtrTorchTensor glu, XPtrTorchTensor x, XPtrTorchTensor dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_jvp_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t(SEXP gluSEXP, SEXP xSEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type glu(gluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_jvp_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t(glu, x, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_backward_jvp_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_glu_backward_jvp_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t(XPtrTorchTensor grad_x, XPtrTorchTensor grad_glu, XPtrTorchTensor x, XPtrTorchTensor dgrad_glu, XPtrTorchTensor dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_backward_jvp_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t(SEXP grad_xSEXP, SEXP grad_gluSEXP, SEXP xSEXP, SEXP dgrad_gluSEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_x(grad_xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_glu(grad_gluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dgrad_glu(dgrad_gluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_backward_jvp_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t(grad_x, grad_glu, x, dgrad_glu, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardsigmoid_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardsigmoid_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardsigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardsigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardsigmoid__self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardsigmoid__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardsigmoid__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardsigmoid__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardsigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardsigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardsigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardsigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(grad_input, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar min_val, XPtrTorchScalar max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor(out, self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardtanh_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar min_val, XPtrTorchScalar max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_self_Tensor(SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_self_Tensor(self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar
XPtrTorchTensor cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar min_val, XPtrTorchScalar max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(grad_input, grad_output, self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar
XPtrTorchTensor cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar min_val, XPtrTorchScalar max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar(grad_output, self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardtanh__self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardtanh__self_Tensor(XPtrTorchTensor self, XPtrTorchScalar min_val, XPtrTorchScalar max_val);
RcppExport SEXP _torch_cpp_torch_namespace_hardtanh__self_Tensor(SEXP selfSEXP, SEXP min_valSEXP, SEXP max_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type min_val(min_valSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type max_val(max_valSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardtanh__self_Tensor(self, min_val, max_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardswish_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardswish_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardswish_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardswish_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardswish__self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardswish__self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardswish__self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardswish__self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor(out, self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_self_Tensor
XPtrTorchTensor cpp_torch_namespace_leaky_relu_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_self_Tensor(SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_self_Tensor(self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool
XPtrTorchTensor cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar negative_slope, XPtrTorchbool self_is_result);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP negative_slopeSEXP, SEXP self_is_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type negative_slope(negative_slopeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type self_is_result(self_is_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool(grad_input, grad_output, self, negative_slope, self_is_result));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool
XPtrTorchTensor cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar negative_slope, XPtrTorchbool self_is_result);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP negative_slopeSEXP, SEXP self_is_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type negative_slope(negative_slopeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type self_is_result(self_is_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool(grad_output, self, negative_slope, self_is_result));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_leaky_relu__self_Tensor
XPtrTorchTensor cpp_torch_namespace_leaky_relu__self_Tensor(XPtrTorchTensor self, XPtrTorchScalar negative_slope);
RcppExport SEXP _torch_cpp_torch_namespace_leaky_relu__self_Tensor(SEXP selfSEXP, SEXP negative_slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type negative_slope(negative_slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_leaky_relu__self_Tensor(self, negative_slope));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log_sigmoid_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor(XPtrTorchTensor output, XPtrTorchTensor buffer, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor(SEXP outputSEXP, SEXP bufferSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type buffer(bufferSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor(output, buffer, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_forward_self_Tensor
Rcpp::List cpp_torch_namespace_log_sigmoid_forward_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_forward_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_forward_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor
XPtrTorchTensor cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor buffer);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor(grad_input, grad_output, self, buffer));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor
XPtrTorchTensor cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor buffer);
RcppExport SEXP _torch_cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor(grad_output, self, buffer));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor
XPtrTorchTensor cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor noise, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor(out, self, noise, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor
XPtrTorchTensor cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor(XPtrTorchTensor self, XPtrTorchTensor noise, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor(SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor(self, noise, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool
XPtrTorchTensor cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor noise, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchbool self_is_result);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP self_is_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type self_is_result(self_is_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool(grad_output, self, noise, lower, upper, training, self_is_result));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor
XPtrTorchTensor cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor(XPtrTorchTensor self, XPtrTorchTensor noise, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor(SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor(self, noise, lower, upper, training, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar beta, XPtrTorchScalar threshold);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor(out, self, beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_self_Tensor
XPtrTorchTensor cpp_torch_namespace_softplus_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar beta, XPtrTorchScalar threshold);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_self_Tensor(SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_self_Tensor(self, beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar
XPtrTorchTensor cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar beta, XPtrTorchScalar threshold);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar(grad_input, grad_output, self, beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar
XPtrTorchTensor cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar beta, XPtrTorchScalar threshold);
RcppExport SEXP _torch_cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP betaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar(grad_output, self, beta, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor(out, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_self_Tensor
XPtrTorchTensor cpp_torch_namespace_softshrink_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_self_Tensor(self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar
XPtrTorchTensor cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar(grad_input, grad_output, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar
XPtrTorchTensor cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchScalar lambd);
RcppExport SEXP _torch_cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP lambdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lambd(lambdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar(grad_output, self, lambd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(grad_input, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor(grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(out, indices, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(grad_input, grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef(out, indices, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef
Rcpp::List cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef(self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor(grad_input, grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor(grad_output, self, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
XPtrTorchTensor cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
XPtrTorchTensor cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
XPtrTorchTensor cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t
XPtrTorchTensor cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchbool ceil_mode, XPtrTorchbool count_include_pad, XPtrTorchoptional_int64_t divisor_override);
RcppExport SEXP _torch_cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP ceil_modeSEXP, SEXP count_include_padSEXP, SEXP divisor_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type count_include_pad(count_include_padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type divisor_override(divisor_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(XPtrTorchTensor output, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchTensor random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP outputSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(output, indices, self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchTensor random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_input, grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(XPtrTorchTensor output, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchTensor random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP outputSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(output, indices, self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor
Rcpp::List cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchTensor random_samples);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP random_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type random_samples(random_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor(self, kernel_size, output_size, random_samples));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_input, grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef output_size, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP output_sizeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor(grad_output, self, kernel_size, output_size, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIndexTensor indices, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP indicesSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef
Rcpp::List cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef(self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode, XPtrTorchIndexTensor indices);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef(out, self, indices, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef(self, indices, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(out, self, indices, output_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP selfSEXP, SEXP indicesSEXP, SEXP output_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(self, indices, output_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad3d_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad3d_self_Tensor_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad3d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad3d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_reflection_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_reflection_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_reflection_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_reflection_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef(out, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef(SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef(self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_input, grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef(grad_output, self, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pad_circular_self_Tensor_pad_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__pad_circular_self_Tensor_pad_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef pad);
RcppExport SEXP _torch_cpp_torch_namespace__pad_circular_self_Tensor_pad_IntArrayRef(SEXP selfSEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pad_circular_self_Tensor_pad_IntArrayRef(self, pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pad_enum_self_Tensor_pad_IntArrayRef_mode_int64_t
XPtrTorchTensor cpp_torch_namespace__pad_enum_self_Tensor_pad_IntArrayRef_mode_int64_t(XPtrTorchTensor self, XPtrTorchIntArrayRef pad, XPtrTorchint64_t mode, XPtrTorchOptionaldouble value);
RcppExport SEXP _torch_cpp_torch_namespace__pad_enum_self_Tensor_pad_IntArrayRef_mode_int64_t(SEXP selfSEXP, SEXP padSEXP, SEXP modeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type pad(padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pad_enum_self_Tensor_pad_IntArrayRef_mode_int64_t(self, pad, mode, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pad_self_Tensor_pad_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_pad_self_Tensor_pad_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef pad, XPtrTorchstring_view mode, XPtrTorchOptionaldouble value);
RcppExport SEXP _torch_cpp_torch_namespace_pad_self_Tensor_pad_IntArrayRef(SEXP selfSEXP, SEXP padSEXP, SEXP modeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type pad(padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pad_self_Tensor_pad_IntArrayRef(self, pad, mode, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(input, output_size, align_corners, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(input, output_size, align_corners, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bilinear2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__upsample_bilinear2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bilinear2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bilinear2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(input, output_size, align_corners, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(input, output_size, align_corners, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(input, output_size, align_corners, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bicubic2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__upsample_bicubic2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bicubic2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bicubic2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble(input, output_size, align_corners, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(input, output_size, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(input, output_size, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(input, output_size, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(input, output_size, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(input, output_size, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(XPtrTorchTensor input, XPtrTorchOptionalIntArrayRef output_size, XPtrTorchOptionalDoubleArrayRef scale_factors);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(SEXP inputSEXP, SEXP output_sizeSEXP, SEXP scale_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type scale_factors(scale_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble(input, output_size, scale_factors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bilinear2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bilinear2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bilinear2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bilinear2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bilinear2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bilinear2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bilinear2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bilinear2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bilinear2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bilinear2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bilinear2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bilinear2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bilinear2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bilinear2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bilinear2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bilinear2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bicubic2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bicubic2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bicubic2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bicubic2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bicubic2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bicubic2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bicubic2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bicubic2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bicubic2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bicubic2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bicubic2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bicubic2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_bicubic2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__upsample_bicubic2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_bicubic2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_bicubic2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool(out, self, output_size, align_corners, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool(self, output_size, align_corners, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_input, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchbool align_corners, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP align_cornersSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef(self, output_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact1d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact1d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact1d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact1d_self_Tensor_output_size_IntArrayRef(self, output_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size, scales));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef(self, output_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact2d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact2d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact2d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact2d_self_Tensor_output_size_IntArrayRef(self, output_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef(self, output_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact3d_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact3d_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact3d_self_Tensor_output_size_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact3d_self_Tensor_output_size_IntArrayRef(self, output_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__upsample_nearest_exact3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__upsample_nearest_exact3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(XPtrTorchTensor grad_output, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef input_size, XPtrTorchOptionaldouble scales_d, XPtrTorchOptionaldouble scales_h, XPtrTorchOptionaldouble scales_w);
RcppExport SEXP _torch_cpp_torch_namespace__upsample_nearest_exact3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(SEXP grad_outputSEXP, SEXP output_sizeSEXP, SEXP input_sizeSEXP, SEXP scales_dSEXP, SEXP scales_hSEXP, SEXP scales_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_d(scales_dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_h(scales_hSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type scales_w(scales_wSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__upsample_nearest_exact3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef(grad_output, output_size, input_size, scales_d, scales_h, scales_w));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor
XPtrTorchTensor cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(grad_input, grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor
XPtrTorchTensor cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor(grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor(grad_input, grad_output, self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor(grad_output, self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor
XPtrTorchTensor cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(XPtrTorchTensor grad_input, XPtrTorchTensor grad_output, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(SEXP grad_inputSEXP, SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor(grad_input, grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor
XPtrTorchTensor cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor(XPtrTorchTensor grad_output, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor(SEXP grad_outputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor(grad_output, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, output_padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__slow_conv2d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__slow_conv2d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor output, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace__slow_conv2d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__slow_conv2d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(output, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__slow_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__slow_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace__slow_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__slow_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__slow_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef
Rcpp::List cpp_torch_namespace__slow_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor grad_input, XPtrTorchTensor grad_weight, XPtrTorchTensor grad_bias, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace__slow_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(SEXP grad_inputSEXP, SEXP grad_weightSEXP, SEXP grad_biasSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_input(grad_inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_weight(grad_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_bias(grad_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__slow_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__slow_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace__slow_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3(XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__slow_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3(SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__slow_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3(grad_output, self, weight, kernel_size, stride, padding, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace__conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace__conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_depthwise3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_conv_depthwise3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_depthwise3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_depthwise3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor output, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(output, self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef(self, weight, kernel_size, bias, stride, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef dilation, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(out, self, output_size, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef output_size, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef dilation, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP output_sizeSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(self, output_size, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_column_stack_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_column_stack_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_column_stack_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_column_stack_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_column_stack_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_column_stack_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_column_stack_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_column_stack_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef dilation, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(out, self, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef dilation, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP dilationSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef(self, kernel_size, dilation, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isfinite_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isfinite_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isfinite_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isfinite_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isinf_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isinf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isinf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isinf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isposinf_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isposinf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isposinf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isposinf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isneginf_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isneginf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isneginf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isneginf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t
XPtrTorchTensor cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t(XPtrTorchTensor self, XPtrTorchint64_t batch_dim, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t(SEXP selfSEXP, SEXP batch_dimSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type batch_dim(batch_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t(self, batch_dim, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t
XPtrTorchTensor cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t(XPtrTorchTensor self, XPtrTorchint64_t level, XPtrTorchint64_t batch_size, XPtrTorchint64_t out_dim);
RcppExport SEXP _torch_cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t(SEXP selfSEXP, SEXP levelSEXP, SEXP batch_sizeSEXP, SEXP out_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type out_dim(out_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t(self, level, batch_size, out_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_entr_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_entr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_entr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_entr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_entr_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_entr_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_entr_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_entr_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_ndtri_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_ndtri_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_ndtri_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_ndtri_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_ndtri_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_ndtri_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_ndtri_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_ndtri_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_log_ndtr_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_log_ndtr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_log_ndtr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_log_ndtr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_log_ndtr_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_log_ndtr_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_log_ndtr_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_log_ndtr_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_expm1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_expm1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_expm1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_expm1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_expm1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_expm1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_expm1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_expm1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_exp2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_exp2_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_exp2_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_exp2_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_exp2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_exp2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_exp2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_exp2_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_psi_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_psi_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_psi_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_psi_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_psi_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_psi_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_psi_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_psi_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_digamma_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_digamma_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_digamma_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_digamma_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_digamma_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_digamma_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_digamma_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_digamma_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_gammaln_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_gammaln_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_gammaln_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_gammaln_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_gammaln_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_gammaln_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_gammaln_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_gammaln_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erf_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erf_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erf_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erf_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erf_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erf_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erf_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erf_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erfc_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erfc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erfc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erfc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erfc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erfc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erfc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erfc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erfcx_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erfcx_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erfcx_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erfcx_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erfcx_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erfcx_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erfcx_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erfcx_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erfinv_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erfinv_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erfinv_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erfinv_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_erfinv_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_erfinv_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_erfinv_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_erfinv_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_ndtr_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_ndtr_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_ndtr_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_ndtr_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_ndtr_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_ndtr_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_ndtr_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_ndtr_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlog1py_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlog1py_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlog1py_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlog1py_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlog1py_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlog1py_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlog1py_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlog1py_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlog1py_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_special_xlog1py_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlog1py_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlog1py_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlogy_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlogy_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlogy_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlogy_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlogy_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlogy_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlogy_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlogy_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlogy_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_special_xlogy_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlogy_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlogy_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_zeta_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_zeta_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_zeta_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_zeta_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_zeta_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_zeta_self_Scalar_other_Tensor(XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_zeta_self_Scalar_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_zeta_self_Scalar_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_zeta_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_special_zeta_self_Tensor_other_Scalar(XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_special_zeta_self_Tensor_other_Scalar(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_zeta_self_Tensor_other_Scalar(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_zeta_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_zeta_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_zeta_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i0_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i0_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i0_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i0_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i0_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i0e_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i0e_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i0e_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i0e_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i0e_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i0e_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i0e_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i0e_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i1e_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i1e_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i1e_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i1e_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_i1e_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_i1e_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_i1e_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_i1e_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_logit_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_logit_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_special_logit_self_Tensor(SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_logit_self_Tensor(self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_logit_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_logit_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionaldouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_special_logit_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_logit_out_out_Tensor_self_Tensor(out, self, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_polygamma_out_out_Tensor_n_int64_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_polygamma_out_out_Tensor_n_int64_t_self_Tensor(XPtrTorchTensor out, XPtrTorchint64_t n, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_polygamma_out_out_Tensor_n_int64_t_self_Tensor(SEXP outSEXP, SEXP nSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_polygamma_out_out_Tensor_n_int64_t_self_Tensor(out, n, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_logsumexp_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_special_logsumexp_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_special_logsumexp_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_logsumexp_self_Tensor_dim_IntArrayRef(self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_special_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace_special_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_expit_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_expit_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_expit_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_expit_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_expit_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_expit_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_expit_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_expit_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_sinc_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_sinc_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_sinc_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_sinc_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_sinc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_sinc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_sinc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_sinc_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_round_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_round_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_namespace_special_round_self_Tensor(SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_round_self_Tensor(self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_round_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_round_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t decimals);
RcppExport SEXP _torch_cpp_torch_namespace_special_round_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP decimalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type decimals(decimalsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_round_out_out_Tensor_self_Tensor(out, self, decimals));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_log1p_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_log1p_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_log1p_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_log1p_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_log1p_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_log1p_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_log1p_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_log1p_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_log_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_special_log_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_special_log_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_log_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_gammainc_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_gammainc_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_gammainc_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_gammainc_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_gammainc_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_gammainc_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_gammainc_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_gammainc_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_gammaincc_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_gammaincc_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_gammaincc_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_gammaincc_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_gammaincc_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_special_gammaincc_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_special_gammaincc_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_gammaincc_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_multigammaln_self_Tensor_p_int64_t
XPtrTorchTensor cpp_torch_namespace_special_multigammaln_self_Tensor_p_int64_t(XPtrTorchTensor self, XPtrTorchint64_t p);
RcppExport SEXP _torch_cpp_torch_namespace_special_multigammaln_self_Tensor_p_int64_t(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_multigammaln_self_Tensor_p_int64_t(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_multigammaln_out_out_Tensor_self_Tensor_p_int64_t
XPtrTorchTensor cpp_torch_namespace_special_multigammaln_out_out_Tensor_self_Tensor_p_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t p);
RcppExport SEXP _torch_cpp_torch_namespace_special_multigammaln_out_out_Tensor_self_Tensor_p_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_multigammaln_out_out_Tensor_self_Tensor_p_int64_t(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_softmax_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_special_softmax_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_special_softmax_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_softmax_self_Tensor_dim_int64_t(self, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fft_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fft_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fft_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fft_self_Tensor(self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fft_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fft_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fft_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fft_out_out_Tensor_self_Tensor(out, self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifft_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifft_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifft_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifft_self_Tensor(self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifft_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifft_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifft_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifft_out_out_Tensor_self_Tensor(out, self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfft_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_rfft_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfft_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfft_self_Tensor(self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfft_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_rfft_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfft_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfft_out_out_Tensor_self_Tensor(out, self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_irfft_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_irfft_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_irfft_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_irfft_self_Tensor(self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_irfft_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_irfft_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_irfft_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_irfft_out_out_Tensor_self_Tensor(out, self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_hfft_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_hfft_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_hfft_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_hfft_self_Tensor(self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_hfft_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_hfft_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_hfft_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_hfft_out_out_Tensor_self_Tensor(out, self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ihfft_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ihfft_self_Tensor(XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ihfft_self_Tensor(SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ihfft_self_Tensor(self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ihfft_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ihfft_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t n, XPtrTorchindex_int64_t dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ihfft_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ihfft_out_out_Tensor_self_Tensor(out, self, n, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fft2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fft2_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fft2_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fft2_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fft2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fft2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fft2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fft2_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifft2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifft2_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifft2_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifft2_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifft2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifft2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifft2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifft2_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfft2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_rfft2_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfft2_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfft2_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfft2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_rfft2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfft2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfft2_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_irfft2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_irfft2_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_irfft2_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_irfft2_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_irfft2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_irfft2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_irfft2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_irfft2_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_hfft2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_hfft2_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_hfft2_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_hfft2_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_hfft2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_hfft2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_hfft2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_hfft2_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ihfft2_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ihfft2_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ihfft2_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ihfft2_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ihfft2_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ihfft2_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ihfft2_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ihfft2_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fftn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fftn_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fftn_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fftn_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fftn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fftn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fftn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fftn_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifftn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifftn_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifftn_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifftn_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifftn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifftn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifftn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifftn_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfftn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_rfftn_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfftn_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfftn_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfftn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_rfftn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfftn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfftn_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_irfftn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_irfftn_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_irfftn_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_irfftn_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_irfftn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_irfftn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_irfftn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_irfftn_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_hfftn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_hfftn_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_hfftn_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_hfftn_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_hfftn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_hfftn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_hfftn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_hfftn_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ihfftn_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ihfftn_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ihfftn_self_Tensor(SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ihfftn_self_Tensor(self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ihfftn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ihfftn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIntArrayRef s, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchoptional_string_view norm);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ihfftn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sSEXP, SEXP dimSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type s(sSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ihfftn_out_out_Tensor_self_Tensor(out, self, s, dim, norm));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fftfreq_n_int64_t
XPtrTorchTensor cpp_torch_namespace_fft_fftfreq_n_int64_t(XPtrTorchint64_t n, XPtrTorchdouble d, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fftfreq_n_int64_t(SEXP nSEXP, SEXP dSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type d(dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fftfreq_n_int64_t(n, d, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fftfreq_out_out_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_fft_fftfreq_out_out_Tensor_n_int64_t(XPtrTorchTensor out, XPtrTorchint64_t n, XPtrTorchdouble d);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fftfreq_out_out_Tensor_n_int64_t(SEXP outSEXP, SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fftfreq_out_out_Tensor_n_int64_t(out, n, d));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfftfreq_n_int64_t
XPtrTorchTensor cpp_torch_namespace_fft_rfftfreq_n_int64_t(XPtrTorchint64_t n, XPtrTorchdouble d, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfftfreq_n_int64_t(SEXP nSEXP, SEXP dSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type d(dSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfftfreq_n_int64_t(n, d, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_rfftfreq_out_out_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_fft_rfftfreq_out_out_Tensor_n_int64_t(XPtrTorchTensor out, XPtrTorchint64_t n, XPtrTorchdouble d);
RcppExport SEXP _torch_cpp_torch_namespace_fft_rfftfreq_out_out_Tensor_n_int64_t(SEXP outSEXP, SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_rfftfreq_out_out_Tensor_n_int64_t(out, n, d));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_fftshift_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_fftshift_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_fft_fftshift_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_fftshift_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fft_ifftshift_self_Tensor
XPtrTorchTensor cpp_torch_namespace_fft_ifftshift_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_fft_ifftshift_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fft_ifftshift_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cholesky_ex_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_cholesky_ex_self_Tensor(XPtrTorchTensor self, XPtrTorchbool upper, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cholesky_ex_self_Tensor(SEXP selfSEXP, SEXP upperSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cholesky_ex_self_Tensor(self, upper, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cholesky_ex_out_L_Tensor_info_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_cholesky_ex_out_L_Tensor_info_Tensor_self_Tensor(XPtrTorchTensor L, XPtrTorchTensor info, XPtrTorchTensor self, XPtrTorchbool upper, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cholesky_ex_out_L_Tensor_info_Tensor_self_Tensor(SEXP LSEXP, SEXP infoSEXP, SEXP selfSEXP, SEXP upperSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type L(LSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cholesky_ex_out_L_Tensor_info_Tensor_self_Tensor(L, info, self, upper, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cholesky_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_cholesky_self_Tensor(XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cholesky_self_Tensor(SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cholesky_self_Tensor(self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cholesky_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_cholesky_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cholesky_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cholesky_out_out_Tensor_self_Tensor(out, self, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cross_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_cross_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cross_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cross_self_Tensor_other_Tensor(self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cross_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_cross_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cross_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cross_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_factor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_lu_factor_A_Tensor(XPtrTorchTensor A, XPtrTorchbool pivot);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_factor_A_Tensor(SEXP ASEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_factor_A_Tensor(A, pivot));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_factor_out_LU_Tensor_pivots_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_lu_factor_out_LU_Tensor_pivots_Tensor_A_Tensor(XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor A, XPtrTorchbool pivot);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_factor_out_LU_Tensor_pivots_Tensor_A_Tensor(SEXP LUSEXP, SEXP pivotsSEXP, SEXP ASEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_factor_out_LU_Tensor_pivots_Tensor_A_Tensor(LU, pivots, A, pivot));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_factor_ex_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_lu_factor_ex_A_Tensor(XPtrTorchTensor A, XPtrTorchbool pivot, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_factor_ex_A_Tensor(SEXP ASEXP, SEXP pivotSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_factor_ex_A_Tensor(A, pivot, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_factor_ex_out_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_lu_factor_ex_out_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor(XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor info, XPtrTorchTensor A, XPtrTorchbool pivot, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_factor_ex_out_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor(SEXP LUSEXP, SEXP pivotsSEXP, SEXP infoSEXP, SEXP ASEXP, SEXP pivotSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_factor_ex_out_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor(LU, pivots, info, A, pivot, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_lu_A_Tensor(XPtrTorchTensor A, XPtrTorchbool pivot);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_A_Tensor(SEXP ASEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_A_Tensor(A, pivot));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_out_P_Tensor_L_Tensor_U_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_lu_out_P_Tensor_L_Tensor_U_Tensor_A_Tensor(XPtrTorchTensor P, XPtrTorchTensor L, XPtrTorchTensor U, XPtrTorchTensor A, XPtrTorchbool pivot);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_out_P_Tensor_L_Tensor_U_Tensor_A_Tensor(SEXP PSEXP, SEXP LSEXP, SEXP USEXP, SEXP ASEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type P(PSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type L(LSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type U(USEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_out_P_Tensor_L_Tensor_U_Tensor_A_Tensor(P, L, U, A, pivot));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_solve_LU_Tensor_pivots_Tensor_B_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_lu_solve_LU_Tensor_pivots_Tensor_B_Tensor(XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor B, XPtrTorchbool left, XPtrTorchbool adjoint);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_solve_LU_Tensor_pivots_Tensor_B_Tensor(SEXP LUSEXP, SEXP pivotsSEXP, SEXP BSEXP, SEXP leftSEXP, SEXP adjointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type adjoint(adjointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_solve_LU_Tensor_pivots_Tensor_B_Tensor(LU, pivots, B, left, adjoint));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lu_solve_out_out_Tensor_LU_Tensor_pivots_Tensor_B_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_lu_solve_out_out_Tensor_LU_Tensor_pivots_Tensor_B_Tensor(XPtrTorchTensor out, XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor B, XPtrTorchbool left, XPtrTorchbool adjoint);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lu_solve_out_out_Tensor_LU_Tensor_pivots_Tensor_B_Tensor(SEXP outSEXP, SEXP LUSEXP, SEXP pivotsSEXP, SEXP BSEXP, SEXP leftSEXP, SEXP adjointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type adjoint(adjointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lu_solve_out_out_Tensor_LU_Tensor_pivots_Tensor_B_Tensor(out, LU, pivots, B, left, adjoint));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_det_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_det_A_Tensor(XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_det_A_Tensor(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_det_A_Tensor(A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_det_out_result_Tensor_LU_Tensor_pivots_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_det_out_result_Tensor_LU_Tensor_pivots_Tensor_A_Tensor(XPtrTorchTensor result, XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_det_out_result_Tensor_LU_Tensor_pivots_Tensor_A_Tensor(SEXP resultSEXP, SEXP LUSEXP, SEXP pivotsSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type result(resultSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_det_out_result_Tensor_LU_Tensor_pivots_Tensor_A_Tensor(result, LU, pivots, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_det_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_det_A_Tensor(XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_det_A_Tensor(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_det_A_Tensor(A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_det_out_out_Tensor_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_det_out_out_Tensor_A_Tensor(XPtrTorchTensor out, XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_det_out_out_Tensor_A_Tensor(SEXP outSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_det_out_out_Tensor_A_Tensor(out, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_det_self_Tensor
XPtrTorchTensor cpp_torch_namespace_det_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_det_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_det_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_ldl_factor_ex_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_ldl_factor_ex_self_Tensor(XPtrTorchTensor self, XPtrTorchbool hermitian, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_ldl_factor_ex_self_Tensor(SEXP selfSEXP, SEXP hermitianSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_ldl_factor_ex_self_Tensor(self, hermitian, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_ldl_factor_ex_out_LD_Tensor_pivots_Tensor_info_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_ldl_factor_ex_out_LD_Tensor_pivots_Tensor_info_Tensor_self_Tensor(XPtrTorchTensor LD, XPtrTorchTensor pivots, XPtrTorchTensor info, XPtrTorchTensor self, XPtrTorchbool hermitian, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_ldl_factor_ex_out_LD_Tensor_pivots_Tensor_info_Tensor_self_Tensor(SEXP LDSEXP, SEXP pivotsSEXP, SEXP infoSEXP, SEXP selfSEXP, SEXP hermitianSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_ldl_factor_ex_out_LD_Tensor_pivots_Tensor_info_Tensor_self_Tensor(LD, pivots, info, self, hermitian, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_ldl_factor_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_ldl_factor_self_Tensor(XPtrTorchTensor self, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_ldl_factor_self_Tensor(SEXP selfSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_ldl_factor_self_Tensor(self, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_ldl_factor_out_LD_Tensor_pivots_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_ldl_factor_out_LD_Tensor_pivots_Tensor_self_Tensor(XPtrTorchTensor LD, XPtrTorchTensor pivots, XPtrTorchTensor self, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_ldl_factor_out_LD_Tensor_pivots_Tensor_self_Tensor(SEXP LDSEXP, SEXP pivotsSEXP, SEXP selfSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_ldl_factor_out_LD_Tensor_pivots_Tensor_self_Tensor(LD, pivots, self, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_ldl_solve_LD_Tensor_pivots_Tensor_B_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_ldl_solve_LD_Tensor_pivots_Tensor_B_Tensor(XPtrTorchTensor LD, XPtrTorchTensor pivots, XPtrTorchTensor B, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_ldl_solve_LD_Tensor_pivots_Tensor_B_Tensor(SEXP LDSEXP, SEXP pivotsSEXP, SEXP BSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_ldl_solve_LD_Tensor_pivots_Tensor_B_Tensor(LD, pivots, B, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_ldl_solve_out_out_Tensor_LD_Tensor_pivots_Tensor_B_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_ldl_solve_out_out_Tensor_LD_Tensor_pivots_Tensor_B_Tensor(XPtrTorchTensor out, XPtrTorchTensor LD, XPtrTorchTensor pivots, XPtrTorchTensor B, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_ldl_solve_out_out_Tensor_LD_Tensor_pivots_Tensor_B_Tensor(SEXP outSEXP, SEXP LDSEXP, SEXP pivotsSEXP, SEXP BSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LD(LDSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_ldl_solve_out_out_Tensor_LD_Tensor_pivots_Tensor_B_Tensor(out, LD, pivots, B, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lstsq_self_Tensor_b_Tensor
Rcpp::List cpp_torch_namespace_linalg_lstsq_self_Tensor_b_Tensor(XPtrTorchTensor self, XPtrTorchTensor b, XPtrTorchOptionaldouble rcond, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lstsq_self_Tensor_b_Tensor(SEXP selfSEXP, SEXP bSEXP, SEXP rcondSEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b(bSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type rcond(rcondSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lstsq_self_Tensor_b_Tensor(self, b, rcond, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_lstsq_out_solution_Tensor_residuals_Tensor_rank_Tensor_singular_values_Tensor_self_Tensor_b_Tensor
Rcpp::List cpp_torch_namespace_linalg_lstsq_out_solution_Tensor_residuals_Tensor_rank_Tensor_singular_values_Tensor_self_Tensor_b_Tensor(XPtrTorchTensor solution, XPtrTorchTensor residuals, XPtrTorchTensor rank, XPtrTorchTensor singular_values, XPtrTorchTensor self, XPtrTorchTensor b, XPtrTorchOptionaldouble rcond, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_lstsq_out_solution_Tensor_residuals_Tensor_rank_Tensor_singular_values_Tensor_self_Tensor_b_Tensor(SEXP solutionSEXP, SEXP residualsSEXP, SEXP rankSEXP, SEXP singular_valuesSEXP, SEXP selfSEXP, SEXP bSEXP, SEXP rcondSEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type solution(solutionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type singular_values(singular_valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type b(bSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type rcond(rcondSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_lstsq_out_solution_Tensor_residuals_Tensor_rank_Tensor_singular_values_Tensor_self_Tensor_b_Tensor(solution, residuals, rank, singular_values, self, b, rcond, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matmul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matmul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matmul_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matmul_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matmul_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matmul_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matmul_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_vecdot_x_Tensor_y_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_vecdot_x_Tensor_y_Tensor(XPtrTorchTensor x, XPtrTorchTensor y, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_vecdot_x_Tensor_y_Tensor(SEXP xSEXP, SEXP ySEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_vecdot_x_Tensor_y_Tensor(x, y, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_vecdot_out_out_Tensor_x_Tensor_y_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_vecdot_out_out_Tensor_x_Tensor_y_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor y, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_vecdot_out_out_Tensor_x_Tensor_y_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP ySEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type y(ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_vecdot_out_out_Tensor_x_Tensor_y_Tensor(out, x, y, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_exp_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_exp_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_exp_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_exp_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_slogdet_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_slogdet_A_Tensor(XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_slogdet_A_Tensor(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_slogdet_A_Tensor(A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_LU_Tensor_pivots_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_LU_Tensor_pivots_Tensor_A_Tensor(XPtrTorchTensor sign, XPtrTorchTensor logabsdet, XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_LU_Tensor_pivots_Tensor_A_Tensor(SEXP signSEXP, SEXP logabsdetSEXP, SEXP LUSEXP, SEXP pivotsSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sign(signSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logabsdet(logabsdetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_LU_Tensor_pivots_Tensor_A_Tensor(sign, logabsdet, LU, pivots, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_slogdet_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_slogdet_A_Tensor(XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_slogdet_A_Tensor(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_slogdet_A_Tensor(A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_A_Tensor(XPtrTorchTensor sign, XPtrTorchTensor logabsdet, XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_A_Tensor(SEXP signSEXP, SEXP logabsdetSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sign(signSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logabsdet(logabsdetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_A_Tensor(sign, logabsdet, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slogdet_self_Tensor
Rcpp::List cpp_torch_namespace_slogdet_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_slogdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slogdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slogdet_out_sign_Tensor_logabsdet_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_slogdet_out_sign_Tensor_logabsdet_Tensor_self_Tensor(XPtrTorchTensor sign, XPtrTorchTensor logabsdet, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_slogdet_out_sign_Tensor_logabsdet_Tensor_self_Tensor(SEXP signSEXP, SEXP logabsdetSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sign(signSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logabsdet(logabsdetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slogdet_out_sign_Tensor_logabsdet_Tensor_self_Tensor(sign, logabsdet, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_logdet_self_Tensor
XPtrTorchTensor cpp_torch_namespace_logdet_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_logdet_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_logdet_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eig_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_eig_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eig_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eig_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eig_out_eigenvalues_Tensor_eigenvectors_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_eig_out_eigenvalues_Tensor_eigenvectors_Tensor_self_Tensor(XPtrTorchTensor eigenvalues, XPtrTorchTensor eigenvectors, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eig_out_eigenvalues_Tensor_eigenvectors_Tensor_self_Tensor(SEXP eigenvaluesSEXP, SEXP eigenvectorsSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type eigenvalues(eigenvaluesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type eigenvectors(eigenvectorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eig_out_eigenvalues_Tensor_eigenvectors_Tensor_self_Tensor(eigenvalues, eigenvectors, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eigvals_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_eigvals_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eigvals_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eigvals_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eigvals_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_eigvals_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eigvals_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eigvals_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_eigh_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_eigh_A_Tensor(XPtrTorchTensor A, XPtrTorchstring_view UPLO, XPtrTorchbool compute_v);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_eigh_A_Tensor(SEXP ASEXP, SEXP UPLOSEXP, SEXP compute_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type UPLO(UPLOSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_v(compute_vSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_eigh_A_Tensor(A, UPLO, compute_v));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_eigh_out_eigenvalues_Tensor_eigenvectors_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_eigh_out_eigenvalues_Tensor_eigenvectors_Tensor_A_Tensor(XPtrTorchTensor eigenvalues, XPtrTorchTensor eigenvectors, XPtrTorchTensor A, XPtrTorchstring_view UPLO, XPtrTorchbool compute_v);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_eigh_out_eigenvalues_Tensor_eigenvectors_Tensor_A_Tensor(SEXP eigenvaluesSEXP, SEXP eigenvectorsSEXP, SEXP ASEXP, SEXP UPLOSEXP, SEXP compute_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type eigenvalues(eigenvaluesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type eigenvectors(eigenvectorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type UPLO(UPLOSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_v(compute_vSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_eigh_out_eigenvalues_Tensor_eigenvectors_Tensor_A_Tensor(eigenvalues, eigenvectors, A, UPLO, compute_v));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eigh_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_eigh_self_Tensor(XPtrTorchTensor self, XPtrTorchstring_view UPLO);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eigh_self_Tensor(SEXP selfSEXP, SEXP UPLOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type UPLO(UPLOSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eigh_self_Tensor(self, UPLO));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eigh_out_eigvals_Tensor_eigvecs_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_linalg_eigh_out_eigvals_Tensor_eigvecs_Tensor_self_Tensor(XPtrTorchTensor eigvals, XPtrTorchTensor eigvecs, XPtrTorchTensor self, XPtrTorchstring_view UPLO);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eigh_out_eigvals_Tensor_eigvecs_Tensor_self_Tensor(SEXP eigvalsSEXP, SEXP eigvecsSEXP, SEXP selfSEXP, SEXP UPLOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type eigvals(eigvalsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type eigvecs(eigvecsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type UPLO(UPLOSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eigh_out_eigvals_Tensor_eigvecs_Tensor_self_Tensor(eigvals, eigvecs, self, UPLO));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eigvalsh_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_eigvalsh_self_Tensor(XPtrTorchTensor self, XPtrTorchstring_view UPLO);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eigvalsh_self_Tensor(SEXP selfSEXP, SEXP UPLOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type UPLO(UPLOSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eigvalsh_self_Tensor(self, UPLO));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_eigvalsh_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_eigvalsh_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchstring_view UPLO);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_eigvalsh_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP UPLOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type UPLO(UPLOSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_eigvalsh_out_out_Tensor_self_Tensor(out, self, UPLO));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_householder_product_input_Tensor_tau_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_householder_product_input_Tensor_tau_Tensor(XPtrTorchTensor input, XPtrTorchTensor tau);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_householder_product_input_Tensor_tau_Tensor(SEXP inputSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_householder_product_input_Tensor_tau_Tensor(input, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_householder_product_out_out_Tensor_input_Tensor_tau_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_householder_product_out_out_Tensor_input_Tensor_tau_Tensor(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor tau);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_householder_product_out_out_Tensor_input_Tensor_tau_Tensor(SEXP outSEXP, SEXP inputSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_householder_product_out_out_Tensor_input_Tensor_tau_Tensor(out, input, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_inv_ex_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_inv_ex_A_Tensor(XPtrTorchTensor A, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_inv_ex_A_Tensor(SEXP ASEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_inv_ex_A_Tensor(A, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_inv_ex_out_inverse_Tensor_info_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_inv_ex_out_inverse_Tensor_info_Tensor_A_Tensor(XPtrTorchTensor inverse, XPtrTorchTensor info, XPtrTorchTensor A, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_inv_ex_out_inverse_Tensor_info_Tensor_A_Tensor(SEXP inverseSEXP, SEXP infoSEXP, SEXP ASEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_inv_ex_out_inverse_Tensor_info_Tensor_A_Tensor(inverse, info, A, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_inv_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_inv_A_Tensor(XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_inv_A_Tensor(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_inv_A_Tensor(A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_inv_out_out_Tensor_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_inv_out_out_Tensor_A_Tensor(XPtrTorchTensor out, XPtrTorchTensor A);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_inv_out_out_Tensor_A_Tensor(SEXP outSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_inv_out_out_Tensor_A_Tensor(out, A));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_inverse_self_Tensor
XPtrTorchTensor cpp_torch_namespace_inverse_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_inverse_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_inverse_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_inner_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_inner_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_inner_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_inner_self_Tensor_other_Tensor(self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_inner_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_inner_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_inner_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_inner_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_outer_self_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_namespace_outer_self_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec2);
RcppExport SEXP _torch_cpp_torch_namespace_outer_self_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_outer_self_Tensor_vec2_Tensor(self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor vec2);
RcppExport SEXP _torch_cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor(out, self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ger_self_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_namespace_ger_self_Tensor_vec2_Tensor(XPtrTorchTensor self, XPtrTorchTensor vec2);
RcppExport SEXP _torch_cpp_torch_namespace_ger_self_Tensor_vec2_Tensor(SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ger_self_Tensor_vec2_Tensor(self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor
XPtrTorchTensor cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor vec2);
RcppExport SEXP _torch_cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor(out, self, vec2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_norm_self_Tensor_ord_Scalar
XPtrTorchTensor cpp_torch_namespace_linalg_norm_self_Tensor_ord_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar ord, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_norm_self_Tensor_ord_Scalar(SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_norm_self_Tensor_ord_Scalar(self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_norm_self_Tensor_ord_c10string_view
XPtrTorchTensor cpp_torch_namespace_linalg_norm_self_Tensor_ord_c10string_view(XPtrTorchTensor self, XPtrTorchstring_view ord, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_norm_self_Tensor_ord_c10string_view(SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_norm_self_Tensor_ord_c10string_view(self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_Scalar
XPtrTorchTensor cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar ord, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_Scalar(out, self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_c10string_view
XPtrTorchTensor cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchstring_view ord, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_c10string_view(out, self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_vector_norm_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_vector_norm_self_Tensor(XPtrTorchTensor self, XPtrTorchScalar ord, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_vector_norm_self_Tensor(SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_vector_norm_self_Tensor(self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_vector_norm_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_vector_norm_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar ord, XPtrTorchOptionalIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_vector_norm_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_vector_norm_out_out_Tensor_self_Tensor(out, self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_Scalar
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_Scalar(XPtrTorchTensor self, XPtrTorchScalar ord, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_Scalar(SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_Scalar(self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_Scalar
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar ord, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_Scalar(out, self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_c10string_view
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_c10string_view(XPtrTorchTensor self, XPtrTorchstring_view ord, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_c10string_view(SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_c10string_view(self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_c10string_view
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchstring_view ord, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP ordSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_c10string_view(out, self, ord, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_svd_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_svd_A_Tensor(XPtrTorchTensor A, XPtrTorchbool full_matrices, XPtrTorchbool compute_uv, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_svd_A_Tensor(SEXP ASEXP, SEXP full_matricesSEXP, SEXP compute_uvSEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type full_matrices(full_matricesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_uv(compute_uvSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_svd_A_Tensor(A, full_matrices, compute_uv, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace__linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor(XPtrTorchTensor U, XPtrTorchTensor S, XPtrTorchTensor Vh, XPtrTorchTensor A, XPtrTorchbool full_matrices, XPtrTorchbool compute_uv, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor(SEXP USEXP, SEXP SSEXP, SEXP VhSEXP, SEXP ASEXP, SEXP full_matricesSEXP, SEXP compute_uvSEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type U(USEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type S(SSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type Vh(VhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type full_matrices(full_matricesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_uv(compute_uvSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor(U, S, Vh, A, full_matrices, compute_uv, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_svd_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_svd_A_Tensor(XPtrTorchTensor A, XPtrTorchbool full_matrices, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_svd_A_Tensor(SEXP ASEXP, SEXP full_matricesSEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type full_matrices(full_matricesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_svd_A_Tensor(A, full_matrices, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor(XPtrTorchTensor U, XPtrTorchTensor S, XPtrTorchTensor Vh, XPtrTorchTensor A, XPtrTorchbool full_matrices, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor(SEXP USEXP, SEXP SSEXP, SEXP VhSEXP, SEXP ASEXP, SEXP full_matricesSEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type U(USEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type S(SSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type Vh(VhSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type full_matrices(full_matricesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor(U, S, Vh, A, full_matrices, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_svdvals_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_svdvals_A_Tensor(XPtrTorchTensor A, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_svdvals_A_Tensor(SEXP ASEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_svdvals_A_Tensor(A, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_svdvals_out_out_Tensor_A_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_svdvals_out_out_Tensor_A_Tensor(XPtrTorchTensor out, XPtrTorchTensor A, XPtrTorchoptional_string_view driver);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_svdvals_out_out_Tensor_A_Tensor(SEXP outSEXP, SEXP ASEXP, SEXP driverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type driver(driverSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_svdvals_out_out_Tensor_A_Tensor(out, A, driver));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cond_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_namespace_linalg_cond_self_Tensor_p_Scalar(XPtrTorchTensor self, XPtrTorchoptional_scalar p);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cond_self_Tensor_p_Scalar(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cond_self_Tensor_p_Scalar(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_Scalar(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cond_self_Tensor_p_c10string_view
XPtrTorchTensor cpp_torch_namespace_linalg_cond_self_Tensor_p_c10string_view(XPtrTorchTensor self, XPtrTorchstring_view p);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cond_self_Tensor_p_c10string_view(SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cond_self_Tensor_p_c10string_view(self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_c10string_view
XPtrTorchTensor cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchstring_view p);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_c10string_view(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_self_Tensor_atol_Tensor_rtol_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_self_Tensor_atol_Tensor_rtol_Tensor(XPtrTorchTensor self, XPtrTorchOptionalTensor atol, XPtrTorchOptionalTensor rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_self_Tensor_atol_Tensor_rtol_Tensor(SEXP selfSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_self_Tensor_atol_Tensor_rtol_Tensor(self, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_Tensor_rtol_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_Tensor_rtol_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalTensor atol, XPtrTorchOptionalTensor rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_Tensor_rtol_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_Tensor_rtol_Tensor(out, self, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_self_Tensor_atol_double_rtol_double
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_self_Tensor_atol_double_rtol_double(XPtrTorchTensor self, XPtrTorchOptionaldouble atol, XPtrTorchOptionaldouble rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_self_Tensor_atol_double_rtol_double(SEXP selfSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_self_Tensor_atol_double_rtol_double(self, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_double_rtol_double
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_double_rtol_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionaldouble atol, XPtrTorchOptionaldouble rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_double_rtol_double(SEXP outSEXP, SEXP selfSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_double_rtol_double(out, self, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_double
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_double(XPtrTorchTensor self, XPtrTorchdouble rcond, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_double(SEXP selfSEXP, SEXP rcondSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rcond(rcondSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_double(self, rcond, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_Tensor(XPtrTorchTensor self, XPtrTorchTensor rcond, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_Tensor(SEXP selfSEXP, SEXP rcondSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rcond(rcondSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_Tensor(self, rcond, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_double
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble rcond, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_double(SEXP outSEXP, SEXP selfSEXP, SEXP rcondSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type rcond(rcondSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_double(out, self, rcond, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor rcond, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP rcondSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rcond(rcondSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_Tensor(out, self, rcond, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_solve_ex_A_Tensor_B_Tensor
Rcpp::List cpp_torch_namespace__linalg_solve_ex_A_Tensor_B_Tensor(XPtrTorchTensor A, XPtrTorchTensor B, XPtrTorchbool left, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_solve_ex_A_Tensor_B_Tensor(SEXP ASEXP, SEXP BSEXP, SEXP leftSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_solve_ex_A_Tensor_B_Tensor(A, B, left, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__linalg_solve_ex_out_result_Tensor_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor_B_Tensor
Rcpp::List cpp_torch_namespace__linalg_solve_ex_out_result_Tensor_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor_B_Tensor(XPtrTorchTensor result, XPtrTorchTensor LU, XPtrTorchTensor pivots, XPtrTorchTensor info, XPtrTorchTensor A, XPtrTorchTensor B, XPtrTorchbool left, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace__linalg_solve_ex_out_result_Tensor_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor_B_Tensor(SEXP resultSEXP, SEXP LUSEXP, SEXP pivotsSEXP, SEXP infoSEXP, SEXP ASEXP, SEXP BSEXP, SEXP leftSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type result(resultSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type LU(LUSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pivots(pivotsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__linalg_solve_ex_out_result_Tensor_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor_B_Tensor(result, LU, pivots, info, A, B, left, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_solve_ex_A_Tensor_B_Tensor
Rcpp::List cpp_torch_namespace_linalg_solve_ex_A_Tensor_B_Tensor(XPtrTorchTensor A, XPtrTorchTensor B, XPtrTorchbool left, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_solve_ex_A_Tensor_B_Tensor(SEXP ASEXP, SEXP BSEXP, SEXP leftSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_solve_ex_A_Tensor_B_Tensor(A, B, left, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_solve_ex_out_result_Tensor_info_Tensor_A_Tensor_B_Tensor
Rcpp::List cpp_torch_namespace_linalg_solve_ex_out_result_Tensor_info_Tensor_A_Tensor_B_Tensor(XPtrTorchTensor result, XPtrTorchTensor info, XPtrTorchTensor A, XPtrTorchTensor B, XPtrTorchbool left, XPtrTorchbool check_errors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_solve_ex_out_result_Tensor_info_Tensor_A_Tensor_B_Tensor(SEXP resultSEXP, SEXP infoSEXP, SEXP ASEXP, SEXP BSEXP, SEXP leftSEXP, SEXP check_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type result(resultSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type info(infoSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type check_errors(check_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_solve_ex_out_result_Tensor_info_Tensor_A_Tensor_B_Tensor(result, info, A, B, left, check_errors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_solve_A_Tensor_B_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_solve_A_Tensor_B_Tensor(XPtrTorchTensor A, XPtrTorchTensor B, XPtrTorchbool left);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_solve_A_Tensor_B_Tensor(SEXP ASEXP, SEXP BSEXP, SEXP leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_solve_A_Tensor_B_Tensor(A, B, left));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_solve_out_out_Tensor_A_Tensor_B_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_solve_out_out_Tensor_A_Tensor_B_Tensor(XPtrTorchTensor out, XPtrTorchTensor A, XPtrTorchTensor B, XPtrTorchbool left);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_solve_out_out_Tensor_A_Tensor_B_Tensor(SEXP outSEXP, SEXP ASEXP, SEXP BSEXP, SEXP leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type B(BSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type left(leftSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_solve_out_out_Tensor_A_Tensor_B_Tensor(out, A, B, left));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_tensorinv_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_tensorinv_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t ind);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_tensorinv_self_Tensor(SEXP selfSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_tensorinv_self_Tensor(self, ind));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_tensorinv_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_tensorinv_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t ind);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_tensorinv_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_tensorinv_out_out_Tensor_self_Tensor(out, self, ind));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_tensorsolve_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_tensorsolve_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchOptionalIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_tensorsolve_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_tensorsolve_self_Tensor_other_Tensor(self, other, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_tensorsolve_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_tensorsolve_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchOptionalIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_tensorsolve_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_tensorsolve_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_qr_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_qr_A_Tensor(XPtrTorchTensor A, XPtrTorchstring_view mode);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_qr_A_Tensor(SEXP ASEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_qr_A_Tensor(A, mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_qr_out_Q_Tensor_R_Tensor_A_Tensor
Rcpp::List cpp_torch_namespace_linalg_qr_out_Q_Tensor_R_Tensor_A_Tensor(XPtrTorchTensor Q, XPtrTorchTensor R, XPtrTorchTensor A, XPtrTorchstring_view mode);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_qr_out_Q_Tensor_R_Tensor_A_Tensor(SEXP QSEXP, SEXP RSEXP, SEXP ASEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type Q(QSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type R(RSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_qr_out_Q_Tensor_R_Tensor_A_Tensor(Q, R, A, mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_power_self_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_power_self_Tensor_n_int64_t(XPtrTorchTensor self, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_power_self_Tensor_n_int64_t(SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_power_self_Tensor_n_int64_t(self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_power_out_out_Tensor_self_Tensor_n_int64_t
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_power_out_out_Tensor_self_Tensor_n_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t n);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_power_out_out_Tensor_self_Tensor_n_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_power_out_out_Tensor_self_Tensor_n_int64_t(out, self, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_input_Tensor_atol_Tensor_rtol_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_input_Tensor_atol_Tensor_rtol_Tensor(XPtrTorchTensor input, XPtrTorchOptionalTensor atol, XPtrTorchOptionalTensor rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_input_Tensor_atol_Tensor_rtol_Tensor(SEXP inputSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_input_Tensor_atol_Tensor_rtol_Tensor(input, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_atol_Tensor_rtol_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_atol_Tensor_rtol_Tensor(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchOptionalTensor atol, XPtrTorchOptionalTensor rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_atol_Tensor_rtol_Tensor(SEXP outSEXP, SEXP inputSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_atol_Tensor_rtol_Tensor(out, input, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_self_Tensor_atol_double_rtol_double
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_self_Tensor_atol_double_rtol_double(XPtrTorchTensor self, XPtrTorchOptionaldouble atol, XPtrTorchOptionaldouble rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_self_Tensor_atol_double_rtol_double(SEXP selfSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_self_Tensor_atol_double_rtol_double(self, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_atol_double_rtol_double
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_atol_double_rtol_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionaldouble atol, XPtrTorchOptionaldouble rtol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_atol_double_rtol_double(SEXP outSEXP, SEXP selfSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionaldouble >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_atol_double_rtol_double(out, self, atol, rtol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_self_Tensor_tol_double
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_self_Tensor_tol_double(XPtrTorchTensor self, XPtrTorchdouble tol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_self_Tensor_tol_double(SEXP selfSEXP, SEXP tolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_self_Tensor_tol_double(self, tol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_tol_double
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_tol_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble tol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_tol_double(SEXP outSEXP, SEXP selfSEXP, SEXP tolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_tol_double(out, self, tol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_input_Tensor_tol_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_input_Tensor_tol_Tensor(XPtrTorchTensor input, XPtrTorchTensor tol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_input_Tensor_tol_Tensor(SEXP inputSEXP, SEXP tolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_input_Tensor_tol_Tensor(input, tol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_tol_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_tol_Tensor(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor tol, XPtrTorchbool hermitian);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_tol_Tensor(SEXP outSEXP, SEXP inputSEXP, SEXP tolSEXP, SEXP hermitianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type hermitian(hermitianSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_tol_Tensor(out, input, tol, hermitian));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_multi_dot_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_linalg_multi_dot_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_multi_dot_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_multi_dot_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_multi_dot_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_linalg_multi_dot_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_multi_dot_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_multi_dot_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nested_to_padded_tensor_self_Tensor_padding_double
XPtrTorchTensor cpp_torch_namespace_nested_to_padded_tensor_self_Tensor_padding_double(XPtrTorchTensor self, XPtrTorchdouble padding, XPtrTorchOptionalIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_nested_to_padded_tensor_self_Tensor_padding_double(SEXP selfSEXP, SEXP paddingSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nested_to_padded_tensor_self_Tensor_padding_double(self, padding, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor(XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor(SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor(self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef(XPtrTorchTensor values, XPtrTorchOptionalIntArrayRef addends);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef(SEXP valuesSEXP, SEXP addendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type addends(addendsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef(values, addends));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef(XPtrTorchTensor values, XPtrTorchOptionalIntArrayRef addends);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef(SEXP valuesSEXP, SEXP addendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type addends(addendsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef(values, addends));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble(XPtrTorchTensor values, XPtrTorchOptionalDoubleArrayRef addends);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble(SEXP valuesSEXP, SEXP addendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type addends(addendsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble(values, addends));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_warn_in_autograd_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_warn_in_autograd_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_warn_in_autograd_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_warn_in_autograd_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor_b_bool
XPtrTorchTensor cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor_b_bool(XPtrTorchTensor self, XPtrTorchbool b);
RcppExport SEXP _torch_cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor_b_bool(SEXP selfSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor_b_bool(self, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_autograd_multiple_dispatch_view_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_autograd_multiple_dispatch_view_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_autograd_multiple_dispatch_view_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_segment_reduce_data_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_segment_reduce_data_Tensor_reduce_c10string_view(XPtrTorchTensor data, XPtrTorchstring_view reduce, XPtrTorchOptionalTensor lengths, XPtrTorchIndexTensor indices, XPtrTorchOptionalTensor offsets, XPtrTorchint64_t axis, XPtrTorchbool unsafe, XPtrTorchoptional_scalar initial);
RcppExport SEXP _torch_cpp_torch_namespace_segment_reduce_data_Tensor_reduce_c10string_view(SEXP dataSEXP, SEXP reduceSEXP, SEXP lengthsSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP axisSEXP, SEXP unsafeSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unsafe(unsafeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_segment_reduce_data_Tensor_reduce_c10string_view(data, reduce, lengths, indices, offsets, axis, unsafe, initial));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__segment_reduce_backward_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace__segment_reduce_backward_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view(XPtrTorchTensor grad, XPtrTorchTensor output, XPtrTorchTensor data, XPtrTorchstring_view reduce, XPtrTorchOptionalTensor lengths, XPtrTorchOptionalTensor offsets, XPtrTorchint64_t axis, XPtrTorchoptional_scalar initial);
RcppExport SEXP _torch_cpp_torch_namespace__segment_reduce_backward_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view(SEXP gradSEXP, SEXP outputSEXP, SEXP dataSEXP, SEXP reduceSEXP, SEXP lengthsSEXP, SEXP offsetsSEXP, SEXP axisSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__segment_reduce_backward_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view(grad, output, data, reduce, lengths, offsets, axis, initial));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pad_sequence_sequences_TensorList
XPtrTorchTensor cpp_torch_namespace_pad_sequence_sequences_TensorList(XPtrTorchTensorList sequences, XPtrTorchbool batch_first, XPtrTorchdouble padding_value);
RcppExport SEXP _torch_cpp_torch_namespace_pad_sequence_sequences_TensorList(SEXP sequencesSEXP, SEXP batch_firstSEXP, SEXP padding_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type padding_value(padding_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pad_sequence_sequences_TensorList(sequences, batch_first, padding_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flatten_dense_tensors_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_flatten_dense_tensors_tensors_TensorList(XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_flatten_dense_tensors_tensors_TensorList(SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flatten_dense_tensors_tensors_TensorList(tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unflatten_dense_tensors_flat_Tensor_tensors_TensorList
XPtrTorchTensorList cpp_torch_namespace_unflatten_dense_tensors_flat_Tensor_tensors_TensorList(XPtrTorchTensor flat, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_unflatten_dense_tensors_flat_Tensor_tensors_TensorList(SEXP flatSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type flat(flatSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unflatten_dense_tensors_flat_Tensor_tensors_TensorList(flat, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_from_tensor_list_list_TensorList
XPtrTorchTensor cpp_torch_namespace__nested_tensor_from_tensor_list_list_TensorList(XPtrTorchTensorList list, XPtrTorchoptional_scalar_type dtype, XPtrTorchLayout layout, XPtrTorchDevice device, XPtrTorchoptional_bool pin_memory);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_from_tensor_list_list_TensorList(SEXP listSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP pin_memorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type list(listSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type pin_memory(pin_memorySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_from_tensor_list_list_TensorList(list, dtype, layout, device, pin_memory));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fw_primal_copy_self_Tensor_level_int64_t
XPtrTorchTensor cpp_torch_namespace__fw_primal_copy_self_Tensor_level_int64_t(XPtrTorchTensor self, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__fw_primal_copy_self_Tensor_level_int64_t(SEXP selfSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fw_primal_copy_self_Tensor_level_int64_t(self, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_dual_copy_primal_Tensor_tangent_Tensor_level_int64_t
XPtrTorchTensor cpp_torch_namespace__make_dual_copy_primal_Tensor_tangent_Tensor_level_int64_t(XPtrTorchTensor primal, XPtrTorchTensor tangent, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__make_dual_copy_primal_Tensor_tangent_Tensor_level_int64_t(SEXP primalSEXP, SEXP tangentSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type primal(primalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tangent(tangentSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_dual_copy_primal_Tensor_tangent_Tensor_level_int64_t(primal, tangent, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_as_real_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_view_as_real_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_view_as_real_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_as_real_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_as_complex_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_view_as_complex_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_view_as_complex_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_as_complex_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conj_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace__conj_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__conj_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conj_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__neg_view_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace__neg_view_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__neg_view_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__neg_view_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_as_strided_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_broadcast_to_copy_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_broadcast_to_copy_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_broadcast_to_copy_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_broadcast_to_copy_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diagonal_copy_self_Tensor(XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_copy_self_Tensor(SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_copy_self_Tensor(self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expand_copy_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_expand_copy_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchbool implicit);
RcppExport SEXP _torch_cpp_torch_namespace_expand_copy_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP implicitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type implicit(implicitSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expand_copy_self_Tensor_size_IntArrayRef(self, size, implicit));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_permute_copy_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_permute_copy_self_Tensor_dims_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_permute_copy_self_Tensor_dims_IntArrayRef(SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_permute_copy_self_Tensor_dims_IntArrayRef(self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__reshape_alias_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__reshape_alias_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace__reshape_alias_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__reshape_alias_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef(self, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_copy_self_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_copy_self_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_copy_self_Tensor_dim_int64_t_index_int64_t(SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_copy_self_Tensor_dim_int64_t_index_int64_t(self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_detach_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_detach_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_detach_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_detach_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_slice_copy_self_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_copy_self_Tensor(SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_copy_self_Tensor(self, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_copy_self_Tensor_split_size_int64_t
XPtrTorchTensorList cpp_torch_namespace_split_copy_self_Tensor_split_size_int64_t(XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_copy_self_Tensor_split_size_int64_t(SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_copy_self_Tensor_split_size_int64_t(self, split_size, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_split_with_sizes_copy_self_Tensor_split_sizes_IntArrayRef
XPtrTorchTensorList cpp_torch_namespace_split_with_sizes_copy_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_with_sizes_copy_self_Tensor_split_sizes_IntArrayRef(SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_split_with_sizes_copy_self_Tensor_split_sizes_IntArrayRef(self, split_sizes, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_squeeze_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_copy_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_squeeze_copy_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_copy_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_copy_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_copy_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_squeeze_copy_self_Tensor_dim_IntArrayRef(XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_copy_self_Tensor_dim_IntArrayRef(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_copy_self_Tensor_dim_IntArrayRef(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_t_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_t_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_t_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_t_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_transpose_copy_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace_transpose_copy_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace_transpose_copy_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_transpose_copy_self_Tensor_dim0_int64_t_dim1_int64_t(self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsqueeze_copy_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_unsqueeze_copy_self_Tensor_dim_int64_t(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsqueeze_copy_self_Tensor_dim_int64_t(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsqueeze_copy_self_Tensor_dim_int64_t(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__indices_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace__indices_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__indices_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__indices_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__values_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace__values_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__values_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__values_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_indices_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_indices_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_indices_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_indices_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_values_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_values_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_values_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_values_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_crow_indices_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_crow_indices_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_crow_indices_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_crow_indices_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col_indices_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_col_indices_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_col_indices_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col_indices_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ccol_indices_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ccol_indices_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_ccol_indices_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ccol_indices_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_row_indices_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_row_indices_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_row_indices_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_row_indices_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unbind_copy_self_Tensor
XPtrTorchTensorList cpp_torch_namespace_unbind_copy_self_Tensor(XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unbind_copy_self_Tensor(SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unbind_copy_self_Tensor(self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unbind_copy_out_out_TensorList_self_Tensor
void cpp_torch_namespace_unbind_copy_out_out_TensorList_self_Tensor(XPtrTorchTensorList out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unbind_copy_out_out_TensorList_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace_unbind_copy_out_out_TensorList_self_Tensor(out, self, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_split_copy_out_out_TensorList_self_Tensor_split_size_int64_t
void cpp_torch_namespace_split_copy_out_out_TensorList_self_Tensor_split_size_int64_t(XPtrTorchTensorList out, XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_copy_out_out_TensorList_self_Tensor_split_size_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace_split_copy_out_out_TensorList_self_Tensor_split_size_int64_t(out, self, split_size, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_split_with_sizes_copy_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef
void cpp_torch_namespace_split_with_sizes_copy_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensorList out, XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_split_with_sizes_copy_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace_split_with_sizes_copy_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef(out, self, split_sizes, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_view_copy_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_view_copy_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_view_copy_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_copy_self_Tensor_size_IntArrayRef(self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_copy_self_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_view_copy_self_Tensor_dtype_ScalarType(XPtrTorchTensor self, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_view_copy_self_Tensor_dtype_ScalarType(SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_copy_self_Tensor_dtype_ScalarType(self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unfold_copy_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_namespace_unfold_copy_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(XPtrTorchTensor self, XPtrTorchint64_t dimension, XPtrTorchint64_t size, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_unfold_copy_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(SEXP selfSEXP, SEXP dimensionSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unfold_copy_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(self, dimension, size, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alias_copy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_alias_copy_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_alias_copy_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alias_copy_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_softmax_with_shape_self_Tensor_query_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_tensor_softmax_with_shape_self_Tensor_query_Tensor(XPtrTorchTensor self, XPtrTorchTensor query);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_softmax_with_shape_self_Tensor_query_Tensor(SEXP selfSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_softmax_with_shape_self_Tensor_query_Tensor(self, query));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__transformer_encoder_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor
XPtrTorchTensor cpp_torch_namespace__transformer_encoder_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(XPtrTorchTensor src, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_heads, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchbool use_gelu, XPtrTorchbool norm_first, XPtrTorchdouble eps, XPtrTorchTensor norm_weight_1, XPtrTorchTensor norm_bias_1, XPtrTorchTensor norm_weight_2, XPtrTorchTensor norm_bias_2, XPtrTorchTensor ffn_weight_1, XPtrTorchTensor ffn_bias_1, XPtrTorchTensor ffn_weight_2, XPtrTorchTensor ffn_bias_2, XPtrTorchOptionalTensor mask, XPtrTorchoptional_int64_t mask_type);
RcppExport SEXP _torch_cpp_torch_namespace__transformer_encoder_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(SEXP srcSEXP, SEXP embed_dimSEXP, SEXP num_headsSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP use_geluSEXP, SEXP norm_firstSEXP, SEXP epsSEXP, SEXP norm_weight_1SEXP, SEXP norm_bias_1SEXP, SEXP norm_weight_2SEXP, SEXP norm_bias_2SEXP, SEXP ffn_weight_1SEXP, SEXP ffn_bias_1SEXP, SEXP ffn_weight_2SEXP, SEXP ffn_bias_2SEXP, SEXP maskSEXP, SEXP mask_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_heads(num_headsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type norm_first(norm_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_1(norm_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_1(norm_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_2(norm_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_2(norm_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_1(ffn_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_1(ffn_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_2(ffn_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_2(ffn_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type mask_type(mask_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__transformer_encoder_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(src, embed_dim, num_heads, qkv_weight, qkv_bias, proj_weight, proj_bias, use_gelu, norm_first, eps, norm_weight_1, norm_bias_1, norm_weight_2, norm_bias_2, ffn_weight_1, ffn_bias_1, ffn_weight_2, ffn_bias_2, mask, mask_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor
Rcpp::List cpp_torch_namespace__native_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_head, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchOptionalTensor mask, XPtrTorchbool need_weights, XPtrTorchbool average_attn_weights, XPtrTorchoptional_int64_t mask_type);
RcppExport SEXP _torch_cpp_torch_namespace__native_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP embed_dimSEXP, SEXP num_headSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP maskSEXP, SEXP need_weightsSEXP, SEXP average_attn_weightsSEXP, SEXP mask_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_head(num_headSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type need_weights(need_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type average_attn_weights(average_attn_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type mask_type(mask_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(query, key, value, embed_dim, num_head, qkv_weight, qkv_bias, proj_weight, proj_bias, mask, need_weights, average_attn_weights, mask_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchOptionalTensor attn_mask, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal);
RcppExport SEXP _torch_cpp_torch_namespace_scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP attn_maskSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type attn_mask(attn_maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor(query, key, value, attn_mask, dropout_p, is_causal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor
Rcpp::List cpp_torch_namespace__scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchOptionalTensor attn_mask, XPtrTorchdouble dropout_p, XPtrTorchbool need_attn_weights, XPtrTorchbool is_causal);
RcppExport SEXP _torch_cpp_torch_namespace__scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP attn_maskSEXP, SEXP dropout_pSEXP, SEXP need_attn_weightsSEXP, SEXP is_causalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type attn_mask(attn_maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type need_attn_weights(need_attn_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor(query, key, value, attn_mask, dropout_p, need_attn_weights, is_causal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_sdp_choice_query_Tensor_key_Tensor_value_Tensor
XPtrTorchint64_t cpp_torch_namespace__fused_sdp_choice_query_Tensor_key_Tensor_value_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchOptionalTensor attn_mask, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal);
RcppExport SEXP _torch_cpp_torch_namespace__fused_sdp_choice_query_Tensor_key_Tensor_value_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP attn_maskSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type attn_mask(attn_maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_sdp_choice_query_Tensor_key_Tensor_value_Tensor(query, key, value, attn_mask, dropout_p, is_causal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__scaled_dot_product_attention_math_query_Tensor_key_Tensor_value_Tensor
Rcpp::List cpp_torch_namespace__scaled_dot_product_attention_math_query_Tensor_key_Tensor_value_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchOptionalTensor attn_mask, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal, XPtrTorchOptionalTensor dropout_mask);
RcppExport SEXP _torch_cpp_torch_namespace__scaled_dot_product_attention_math_query_Tensor_key_Tensor_value_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP attn_maskSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP, SEXP dropout_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type attn_mask(attn_maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_mask(dropout_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__scaled_dot_product_attention_math_query_Tensor_key_Tensor_value_Tensor(query, key, value, attn_mask, dropout_p, is_causal, dropout_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__scaled_dot_product_flash_attention_query_Tensor_key_Tensor_value_Tensor
Rcpp::List cpp_torch_namespace__scaled_dot_product_flash_attention_query_Tensor_key_Tensor_value_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal, XPtrTorchbool return_debug_mask);
RcppExport SEXP _torch_cpp_torch_namespace__scaled_dot_product_flash_attention_query_Tensor_key_Tensor_value_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP, SEXP return_debug_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_debug_mask(return_debug_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__scaled_dot_product_flash_attention_query_Tensor_key_Tensor_value_Tensor(query, key, value, dropout_p, is_causal, return_debug_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__scaled_dot_product_flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t
Rcpp::List cpp_torch_namespace__scaled_dot_product_flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t(XPtrTorchTensor grad_out, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchTensor out, XPtrTorchTensor logsumexp, XPtrTorchTensor cum_seq_q, XPtrTorchTensor cum_seq_k, XPtrTorchint64_t max_q, XPtrTorchint64_t max_k, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal, XPtrTorchint64_t philox_seed, XPtrTorchint64_t philox_offset);
RcppExport SEXP _torch_cpp_torch_namespace__scaled_dot_product_flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t(SEXP grad_outSEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP outSEXP, SEXP logsumexpSEXP, SEXP cum_seq_qSEXP, SEXP cum_seq_kSEXP, SEXP max_qSEXP, SEXP max_kSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP, SEXP philox_seedSEXP, SEXP philox_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logsumexp(logsumexpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cum_seq_q(cum_seq_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cum_seq_k(cum_seq_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_q(max_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_k(max_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type philox_seed(philox_seedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type philox_offset(philox_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__scaled_dot_product_flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t(grad_out, query, key, value, out, logsumexp, cum_seq_q, cum_seq_k, max_q, max_k, dropout_p, is_causal, philox_seed, philox_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__scaled_dot_product_efficient_attention_query_Tensor_key_Tensor_value_Tensor_compute_log_sumexp_bool
Rcpp::List cpp_torch_namespace__scaled_dot_product_efficient_attention_query_Tensor_key_Tensor_value_Tensor_compute_log_sumexp_bool(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchbool compute_log_sumexp, XPtrTorchbool is_causal);
RcppExport SEXP _torch_cpp_torch_namespace__scaled_dot_product_efficient_attention_query_Tensor_key_Tensor_value_Tensor_compute_log_sumexp_bool(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP compute_log_sumexpSEXP, SEXP is_causalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_log_sumexp(compute_log_sumexpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__scaled_dot_product_efficient_attention_query_Tensor_key_Tensor_value_Tensor_compute_log_sumexp_bool(query, key, value, compute_log_sumexp, is_causal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__scaled_dot_product_efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor
Rcpp::List cpp_torch_namespace__scaled_dot_product_efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor(XPtrTorchTensor grad_out_, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchTensor out, XPtrTorchTensor logsumexp, XPtrTorchbool is_causal, XPtrTorchbool chunk_grad_outputs);
RcppExport SEXP _torch_cpp_torch_namespace__scaled_dot_product_efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor(SEXP grad_out_SEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP outSEXP, SEXP logsumexpSEXP, SEXP is_causalSEXP, SEXP chunk_grad_outputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out_(grad_out_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logsumexp(logsumexpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type chunk_grad_outputs(chunk_grad_outputsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__scaled_dot_product_efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor(grad_out_, query, key, value, out, logsumexp, is_causal, chunk_grad_outputs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__chunk_grad_outputs_efficient_attention_query_Tensor_key_Tensor_value_Tensor
XPtrTorchbool cpp_torch_namespace__chunk_grad_outputs_efficient_attention_query_Tensor_key_Tensor_value_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchbool is_causal);
RcppExport SEXP _torch_cpp_torch_namespace__chunk_grad_outputs_efficient_attention_query_Tensor_key_Tensor_value_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP is_causalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__chunk_grad_outputs_efficient_attention_query_Tensor_key_Tensor_value_Tensor(query, key, value, is_causal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__flash_attention_forward_query_Tensor_key_Tensor_value_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_return_debug_mask_bool
Rcpp::List cpp_torch_namespace__flash_attention_forward_query_Tensor_key_Tensor_value_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_return_debug_mask_bool(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchTensor cum_seq_q, XPtrTorchTensor cum_seq_k, XPtrTorchint64_t max_q, XPtrTorchint64_t max_k, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal, XPtrTorchbool return_debug_mask);
RcppExport SEXP _torch_cpp_torch_namespace__flash_attention_forward_query_Tensor_key_Tensor_value_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_return_debug_mask_bool(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP cum_seq_qSEXP, SEXP cum_seq_kSEXP, SEXP max_qSEXP, SEXP max_kSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP, SEXP return_debug_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cum_seq_q(cum_seq_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cum_seq_k(cum_seq_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_q(max_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_k(max_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_debug_mask(return_debug_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__flash_attention_forward_query_Tensor_key_Tensor_value_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_return_debug_mask_bool(query, key, value, cum_seq_q, cum_seq_k, max_q, max_k, dropout_p, is_causal, return_debug_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t
Rcpp::List cpp_torch_namespace__flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t(XPtrTorchTensor grad_out, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchTensor out, XPtrTorchTensor logsumexp, XPtrTorchTensor cum_seq_q, XPtrTorchTensor cum_seq_k, XPtrTorchint64_t max_q, XPtrTorchint64_t max_k, XPtrTorchdouble dropout_p, XPtrTorchbool is_causal, XPtrTorchint64_t philox_seed, XPtrTorchint64_t philox_offset);
RcppExport SEXP _torch_cpp_torch_namespace__flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t(SEXP grad_outSEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP outSEXP, SEXP logsumexpSEXP, SEXP cum_seq_qSEXP, SEXP cum_seq_kSEXP, SEXP max_qSEXP, SEXP max_kSEXP, SEXP dropout_pSEXP, SEXP is_causalSEXP, SEXP philox_seedSEXP, SEXP philox_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logsumexp(logsumexpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cum_seq_q(cum_seq_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cum_seq_k(cum_seq_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_q(max_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type max_k(max_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type philox_seed(philox_seedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type philox_offset(philox_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t(grad_out, query, key, value, out, logsumexp, cum_seq_q, cum_seq_k, max_q, max_k, dropout_p, is_causal, philox_seed, philox_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__efficient_attention_forward_query_Tensor_key_Tensor_value_Tensor_cu_seqlens_q_Tensor_cu_seqlens_k_Tensor_max_seqlen_q_int64_t
Rcpp::List cpp_torch_namespace__efficient_attention_forward_query_Tensor_key_Tensor_value_Tensor_cu_seqlens_q_Tensor_cu_seqlens_k_Tensor_max_seqlen_q_int64_t(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchOptionalTensor cu_seqlens_q, XPtrTorchOptionalTensor cu_seqlens_k, XPtrTorchoptional_int64_t max_seqlen_q, XPtrTorchbool compute_log_sumexp, XPtrTorchbool causal);
RcppExport SEXP _torch_cpp_torch_namespace__efficient_attention_forward_query_Tensor_key_Tensor_value_Tensor_cu_seqlens_q_Tensor_cu_seqlens_k_Tensor_max_seqlen_q_int64_t(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP cu_seqlens_qSEXP, SEXP cu_seqlens_kSEXP, SEXP max_seqlen_qSEXP, SEXP compute_log_sumexpSEXP, SEXP causalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cu_seqlens_q(cu_seqlens_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cu_seqlens_k(cu_seqlens_kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type max_seqlen_q(max_seqlen_qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type compute_log_sumexp(compute_log_sumexpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type causal(causalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__efficient_attention_forward_query_Tensor_key_Tensor_value_Tensor_cu_seqlens_q_Tensor_cu_seqlens_k_Tensor_max_seqlen_q_int64_t(query, key, value, cu_seqlens_q, cu_seqlens_k, max_seqlen_q, compute_log_sumexp, causal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor
Rcpp::List cpp_torch_namespace__efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor(XPtrTorchTensor grad_out_, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchTensor out, XPtrTorchTensor logsumexp, XPtrTorchbool is_causal, XPtrTorchbool chunk_grad_outputs);
RcppExport SEXP _torch_cpp_torch_namespace__efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor(SEXP grad_out_SEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP outSEXP, SEXP logsumexpSEXP, SEXP is_causalSEXP, SEXP chunk_grad_outputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out_(grad_out_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type logsumexp(logsumexpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type is_causal(is_causalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type chunk_grad_outputs(chunk_grad_outputsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor(grad_out_, query, key, value, out, logsumexp, is_causal, chunk_grad_outputs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__triton_scaled_dot_attention_q_Tensor_k_Tensor_v_Tensor
XPtrTorchTensor cpp_torch_namespace__triton_scaled_dot_attention_q_Tensor_k_Tensor_v_Tensor(XPtrTorchTensor q, XPtrTorchTensor k, XPtrTorchTensor v, XPtrTorchdouble dropout_p);
RcppExport SEXP _torch_cpp_torch_namespace__triton_scaled_dot_attention_q_Tensor_k_Tensor_v_Tensor(SEXP qSEXP, SEXP kSEXP, SEXP vSEXP, SEXP dropout_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__triton_scaled_dot_attention_q_Tensor_k_Tensor_v_Tensor(q, k, v, dropout_p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__triton_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor
XPtrTorchTensor cpp_torch_namespace__triton_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_head, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchOptionalTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace__triton_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP embed_dimSEXP, SEXP num_headSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_head(num_headSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__triton_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(query, key, value, embed_dim, num_head, qkv_weight, qkv_bias, proj_weight, proj_bias, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_airy_ai_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_airy_ai_x_Tensor(XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_airy_ai_x_Tensor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_airy_ai_x_Tensor(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_airy_ai_out_out_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_airy_ai_out_out_Tensor_x_Tensor(XPtrTorchTensor out, XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_airy_ai_out_out_Tensor_x_Tensor(SEXP outSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_airy_ai_out_out_Tensor_x_Tensor(out, x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__transformer_decoder_only_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor
Rcpp::List cpp_torch_namespace__transformer_decoder_only_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(XPtrTorchTensor src, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_heads, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchbool use_gelu, XPtrTorchbool norm_first, XPtrTorchdouble eps, XPtrTorchTensor norm_weight_1, XPtrTorchTensor norm_bias_1, XPtrTorchTensor norm_weight_2, XPtrTorchTensor norm_bias_2, XPtrTorchTensor ffn_weight_1, XPtrTorchTensor ffn_bias_1, XPtrTorchTensor ffn_weight_2, XPtrTorchTensor ffn_bias_2, XPtrTorchOptionalTensor mask, XPtrTorchOptionalTensor incr_key, XPtrTorchOptionalTensor incr_value);
RcppExport SEXP _torch_cpp_torch_namespace__transformer_decoder_only_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(SEXP srcSEXP, SEXP embed_dimSEXP, SEXP num_headsSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP use_geluSEXP, SEXP norm_firstSEXP, SEXP epsSEXP, SEXP norm_weight_1SEXP, SEXP norm_bias_1SEXP, SEXP norm_weight_2SEXP, SEXP norm_bias_2SEXP, SEXP ffn_weight_1SEXP, SEXP ffn_bias_1SEXP, SEXP ffn_weight_2SEXP, SEXP ffn_bias_2SEXP, SEXP maskSEXP, SEXP incr_keySEXP, SEXP incr_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_heads(num_headsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type norm_first(norm_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_1(norm_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_1(norm_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_2(norm_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_2(norm_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_1(ffn_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_1(ffn_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_2(ffn_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_2(ffn_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_key(incr_keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_value(incr_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__transformer_decoder_only_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(src, embed_dim, num_heads, qkv_weight, qkv_bias, proj_weight, proj_bias, use_gelu, norm_first, eps, norm_weight_1, norm_bias_1, norm_weight_2, norm_bias_2, ffn_weight_1, ffn_bias_1, ffn_weight_2, ffn_bias_2, mask, incr_key, incr_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_decoder_only_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor
Rcpp::List cpp_torch_namespace__native_decoder_only_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_head, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchOptionalTensor mask, XPtrTorchOptionalTensor incr_key, XPtrTorchOptionalTensor incr_value, XPtrTorchbool need_weights, XPtrTorchbool average_attn_weights);
RcppExport SEXP _torch_cpp_torch_namespace__native_decoder_only_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP embed_dimSEXP, SEXP num_headSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP maskSEXP, SEXP incr_keySEXP, SEXP incr_valueSEXP, SEXP need_weightsSEXP, SEXP average_attn_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_head(num_headSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_key(incr_keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_value(incr_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type need_weights(need_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type average_attn_weights(average_attn_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_decoder_only_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(query, key, value, embed_dim, num_head, qkv_weight, qkv_bias, proj_weight, proj_bias, mask, incr_key, incr_value, need_weights, average_attn_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_j0_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_j0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_j0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_j0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_j0_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_j0_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_j0_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_j0_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_j1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_j1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_j1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_j1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_j1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_j1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_j1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_j1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_y0_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_y0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_y0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_y0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_y0_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_y0_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_y0_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_y0_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_y1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_y1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_y1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_y1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_bessel_y1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_bessel_y1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_bessel_y1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_bessel_y1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_t_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_t_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_t_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_u_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_u_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_u_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_v_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_v_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_v_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_w_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_w_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_w_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_h_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_h_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_h_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_he_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_he_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_he_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_laguerre_polynomial_l_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_laguerre_polynomial_l_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_laguerre_polynomial_l_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_legendre_polynomial_p_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_legendre_polynomial_p_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_legendre_polynomial_p_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_i0_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_i0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_i0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_i0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_i0_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_i0_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_i0_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_i0_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_i1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_i1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_i1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_i1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_i1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_i1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_i1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_i1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_k0_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_k0_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_k0_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_k0_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_k0_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_k0_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_k0_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_k0_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_k1_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_k1_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_k1_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_k1_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_modified_bessel_k1_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_special_modified_bessel_k1_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_special_modified_bessel_k1_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_modified_bessel_k1_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_scaled_modified_bessel_k0_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_scaled_modified_bessel_k0_x_Tensor(XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_scaled_modified_bessel_k0_x_Tensor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_scaled_modified_bessel_k0_x_Tensor(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_scaled_modified_bessel_k0_out_out_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_scaled_modified_bessel_k0_out_out_Tensor_x_Tensor(XPtrTorchTensor out, XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_scaled_modified_bessel_k0_out_out_Tensor_x_Tensor(SEXP outSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_scaled_modified_bessel_k0_out_out_Tensor_x_Tensor(out, x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_scaled_modified_bessel_k1_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_scaled_modified_bessel_k1_x_Tensor(XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_scaled_modified_bessel_k1_x_Tensor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_scaled_modified_bessel_k1_x_Tensor(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_scaled_modified_bessel_k1_out_out_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_scaled_modified_bessel_k1_out_out_Tensor_x_Tensor(XPtrTorchTensor out, XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_scaled_modified_bessel_k1_out_out_Tensor_x_Tensor(SEXP outSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_scaled_modified_bessel_k1_out_out_Tensor_x_Tensor(out, x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Tensor(XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Scalar_n_Tensor(XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Scalar_n_Tensor(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Scalar_n_Tensor(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Scalar(XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Scalar(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Scalar(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor(XPtrTorchTensor out, XPtrTorchScalar x, XPtrTorchTensor n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar
XPtrTorchTensor cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchScalar n);
RcppExport SEXP _torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar(SEXP outSEXP, SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar(out, x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_spherical_bessel_j0_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_spherical_bessel_j0_x_Tensor(XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_spherical_bessel_j0_x_Tensor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_spherical_bessel_j0_x_Tensor(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_special_spherical_bessel_j0_out_out_Tensor_x_Tensor
XPtrTorchTensor cpp_torch_namespace_special_spherical_bessel_j0_out_out_Tensor_x_Tensor(XPtrTorchTensor out, XPtrTorchTensor x);
RcppExport SEXP _torch_cpp_torch_namespace_special_spherical_bessel_j0_out_out_Tensor_x_Tensor(SEXP outSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_special_spherical_bessel_j0_out_out_Tensor_x_Tensor(out, x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foobar_self_Tensor
XPtrTorchTensor cpp_torch_namespace__foobar_self_Tensor(XPtrTorchTensor self, XPtrTorchbool arg1, XPtrTorchbool arg2, XPtrTorchbool arg3);
RcppExport SEXP _torch_cpp_torch_namespace__foobar_self_Tensor(SEXP selfSEXP, SEXP arg1SEXP, SEXP arg2SEXP, SEXP arg3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type arg1(arg1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type arg2(arg2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type arg3(arg3SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foobar_self_Tensor(self, arg1, arg2, arg3));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_adam__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool
void cpp_torch_namespace__fused_adam__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(XPtrTorchTensorList self, XPtrTorchTensorList grads, XPtrTorchTensorList exp_avgs, XPtrTorchTensorList exp_avg_sqs, XPtrTorchTensorList max_exp_avg_sqs, XPtrTorchTensorList state_steps, XPtrTorchdouble lr, XPtrTorchdouble beta1, XPtrTorchdouble beta2, XPtrTorchdouble weight_decay, XPtrTorchdouble eps, XPtrTorchbool amsgrad, XPtrTorchbool maximize, XPtrTorchOptionalTensor grad_scale, XPtrTorchOptionalTensor found_inf);
RcppExport SEXP _torch_cpp_torch_namespace__fused_adam__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(SEXP selfSEXP, SEXP gradsSEXP, SEXP exp_avgsSEXP, SEXP exp_avg_sqsSEXP, SEXP max_exp_avg_sqsSEXP, SEXP state_stepsSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP weight_decaySEXP, SEXP epsSEXP, SEXP amsgradSEXP, SEXP maximizeSEXP, SEXP grad_scaleSEXP, SEXP found_infSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avgs(exp_avgsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avg_sqs(exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type max_exp_avg_sqs(max_exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type state_steps(state_stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type weight_decay(weight_decaySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type maximize(maximizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_scale(grad_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type found_inf(found_infSEXP);
    cpp_torch_namespace__fused_adam__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(self, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, lr, beta1, beta2, weight_decay, eps, amsgrad, maximize, grad_scale, found_inf);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__fused_adamw__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool
void cpp_torch_namespace__fused_adamw__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(XPtrTorchTensorList self, XPtrTorchTensorList grads, XPtrTorchTensorList exp_avgs, XPtrTorchTensorList exp_avg_sqs, XPtrTorchTensorList max_exp_avg_sqs, XPtrTorchTensorList state_steps, XPtrTorchdouble lr, XPtrTorchdouble beta1, XPtrTorchdouble beta2, XPtrTorchdouble weight_decay, XPtrTorchdouble eps, XPtrTorchbool amsgrad, XPtrTorchbool maximize, XPtrTorchOptionalTensor grad_scale, XPtrTorchOptionalTensor found_inf);
RcppExport SEXP _torch_cpp_torch_namespace__fused_adamw__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(SEXP selfSEXP, SEXP gradsSEXP, SEXP exp_avgsSEXP, SEXP exp_avg_sqsSEXP, SEXP max_exp_avg_sqsSEXP, SEXP state_stepsSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP weight_decaySEXP, SEXP epsSEXP, SEXP amsgradSEXP, SEXP maximizeSEXP, SEXP grad_scaleSEXP, SEXP found_infSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avgs(exp_avgsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avg_sqs(exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type max_exp_avg_sqs(max_exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type state_steps(state_stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type weight_decay(weight_decaySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type maximize(maximizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_scale(grad_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type found_inf(found_infSEXP);
    cpp_torch_namespace__fused_adamw__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(self, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, lr, beta1, beta2, weight_decay, eps, amsgrad, maximize, grad_scale, found_inf);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__new_zeros_with_same_feature_meta_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__new_zeros_with_same_feature_meta_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchint64_t self_num_batch_dims);
RcppExport SEXP _torch_cpp_torch_namespace__new_zeros_with_same_feature_meta_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP self_num_batch_dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type self_num_batch_dims(self_num_batch_dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__new_zeros_with_same_feature_meta_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, self_num_batch_dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool
Rcpp::List cpp_torch_namespace__cudnn_ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchint64_t blank, XPtrTorchbool deterministic, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP deterministicSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool(out0, out1, log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_flatten_weight_out_out_Tensor_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool
XPtrTorchTensor cpp_torch_namespace__cudnn_rnn_flatten_weight_out_out_Tensor_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(XPtrTorchTensor out, XPtrTorchTensorList weight_arr, XPtrTorchint64_t weight_stride0, XPtrTorchint64_t input_size, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t proj_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchbool bidirectional);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_out_out_Tensor_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(SEXP outSEXP, SEXP weight_arrSEXP, SEXP weight_stride0SEXP, SEXP input_sizeSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP proj_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP bidirectionalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight_arr(weight_arrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type proj_size(proj_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_flatten_weight_out_out_Tensor_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool(out, weight_arr, weight_stride0, input_size, mode, hidden_size, proj_size, num_layers, batch_first, bidirectional));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor
Rcpp::List cpp_torch_namespace__cudnn_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor out4, XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchOptionalTensor weight_buf, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t proj_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP out4SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP proj_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out4(out4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type proj_size(proj_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(out0, out1, out2, out3, out4, input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cudnn_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4
void cpp_torch_namespace__cudnn_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensorList out3, XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchTensor weight_buf, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchTensor output, XPtrTorchOptionalTensor grad_output, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t proj_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state, XPtrTorchTensor reserve, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP outputSEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP proj_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP, SEXP reserveSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type proj_size(proj_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    cpp_torch_namespace__cudnn_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(out0, out1, out2, out3, input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__cudnn_init_dropout_state_out_out_Tensor_dropout_double_train_bool_dropout_seed_int64_t
XPtrTorchTensor cpp_torch_namespace__cudnn_init_dropout_state_out_out_Tensor_dropout_double_train_bool_dropout_seed_int64_t(XPtrTorchTensor out, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchint64_t dropout_seed);
RcppExport SEXP _torch_cpp_torch_namespace__cudnn_init_dropout_state_out_out_Tensor_dropout_double_train_bool_dropout_seed_int64_t(SEXP outSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP dropout_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dropout_seed(dropout_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cudnn_init_dropout_state_out_out_Tensor_dropout_double_train_bool_dropout_seed_int64_t(out, dropout, train, dropout_seed));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_dropout_out_out0_Tensor_out1_Tensor_self_Tensor_p_double
Rcpp::List cpp_torch_namespace__fused_dropout_out_out0_Tensor_out1_Tensor_self_Tensor_p_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace__fused_dropout_out_out0_Tensor_out1_Tensor_self_Tensor_p_double(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_dropout_out_out0_Tensor_out1_Tensor_self_Tensor_p_double(out0, out1, self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_scale_out_out_Tensor_self_Tensor_mask_Tensor_scale_double
XPtrTorchTensor cpp_torch_namespace__masked_scale_out_out_Tensor_self_Tensor_mask_Tensor_scale_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchdouble scale);
RcppExport SEXP _torch_cpp_torch_namespace__masked_scale_out_out_Tensor_self_Tensor_mask_Tensor_scale_double(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_scale_out_out_Tensor_self_Tensor_mask_Tensor_scale_double(out, self, mask, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_dropout_out_out0_Tensor_out1_Tensor_input_Tensor_p_double_train_bool
Rcpp::List cpp_torch_namespace_native_dropout_out_out0_Tensor_out1_Tensor_input_Tensor_p_double_train_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input, XPtrTorchdouble p, XPtrTorchoptional_bool train);
RcppExport SEXP _torch_cpp_torch_namespace_native_dropout_out_out0_Tensor_out1_Tensor_input_Tensor_p_double_train_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP inputSEXP, SEXP pSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_dropout_out_out0_Tensor_out1_Tensor_input_Tensor_p_double_train_bool(out0, out1, input, p, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_dropout_backward_out_out_Tensor_grad_output_Tensor_mask_Tensor_scale_double
XPtrTorchTensor cpp_torch_namespace_native_dropout_backward_out_out_Tensor_grad_output_Tensor_mask_Tensor_scale_double(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor mask, XPtrTorchdouble scale);
RcppExport SEXP _torch_cpp_torch_namespace_native_dropout_backward_out_out_Tensor_grad_output_Tensor_mask_Tensor_scale_double(SEXP outSEXP, SEXP grad_outputSEXP, SEXP maskSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_dropout_backward_out_out_Tensor_grad_output_Tensor_mask_Tensor_scale_double(out, grad_output, mask, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conj_physical_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__conj_physical_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__conj_physical_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conj_physical_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Scalar(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Scalar(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_affine_grid_generator_out_out_Tensor_theta_Tensor_size_IntArrayRef_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_affine_grid_generator_out_out_Tensor_theta_Tensor_size_IntArrayRef_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor theta, XPtrTorchIntArrayRef size, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_affine_grid_generator_out_out_Tensor_theta_Tensor_size_IntArrayRef_align_corners_bool(SEXP outSEXP, SEXP thetaSEXP, SEXP sizeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_affine_grid_generator_out_out_Tensor_theta_Tensor_size_IntArrayRef_align_corners_bool(out, theta, size, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t(XPtrTorchTensor out, XPtrTorchint64_t window_length);
RcppExport SEXP _torch_cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t(SEXP outSEXP, SEXP window_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t(out, window_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t_periodic_bool(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic);
RcppExport SEXP _torch_cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t_periodic_bool(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t_periodic_bool(out, window_length, periodic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_batch_norm_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t
XPtrTorchTensor cpp_torch_namespace_quantized_batch_norm_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor mean, XPtrTorchTensor var, XPtrTorchdouble eps, XPtrTorchdouble output_scale, XPtrTorchint64_t output_zero_point);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_batch_norm_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP meanSEXP, SEXP varSEXP, SEXP epsSEXP, SEXP output_scaleSEXP, SEXP output_zero_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type var(varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type output_scale(output_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type output_zero_point(output_zero_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_batch_norm_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t(out, input, weight, bias, mean, var, eps, output_scale, output_zero_point));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_Tensor
XPtrTorchTensor cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_Tensor(out, self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_self_Tensor_p_Tensor
XPtrTorchTensor cpp_torch_namespace_bernoulli_self_Tensor_p_Tensor(XPtrTorchTensor self, XPtrTorchTensor p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_self_Tensor_p_Tensor(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_self_Tensor_p_Tensor(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_double
XPtrTorchTensor cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_double(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_double(out, self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binary_cross_entropy_with_logits_out_out_Tensor_self_Tensor_target_Tensor
XPtrTorchTensor cpp_torch_namespace_binary_cross_entropy_with_logits_out_out_Tensor_self_Tensor_target_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor target, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor pos_weight, XPtrTorchint64_t reduction);
RcppExport SEXP _torch_cpp_torch_namespace_binary_cross_entropy_with_logits_out_out_Tensor_self_Tensor_target_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP targetSEXP, SEXP weightSEXP, SEXP pos_weightSEXP, SEXP reductionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target(targetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type pos_weight(pos_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type reduction(reductionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binary_cross_entropy_with_logits_out_out_Tensor_self_Tensor_target_Tensor(out, self, target, weight, pos_weight, reduction));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bincount_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_bincount_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalTensor weights, XPtrTorchint64_t minlength);
RcppExport SEXP _torch_cpp_torch_namespace_bincount_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP weightsSEXP, SEXP minlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type minlength(minlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bincount_out_out_Tensor_self_Tensor(out, self, weights, minlength));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t(XPtrTorchTensor out, XPtrTorchint64_t window_length);
RcppExport SEXP _torch_cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t(SEXP outSEXP, SEXP window_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t(out, window_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t_periodic_bool(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic);
RcppExport SEXP _torch_cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t_periodic_bool(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t_periodic_bool(out, window_length, periodic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_block_diag_out_out_Tensor_tensors_TensorList
XPtrTorchTensor cpp_torch_namespace_block_diag_out_out_Tensor_tensors_TensorList(XPtrTorchTensor out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_block_diag_out_out_Tensor_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_block_diag_out_out_Tensor_tensors_TensorList(out, tensors));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_constant_pad_nd_out_out_Tensor_self_Tensor_pad_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_constant_pad_nd_out_out_Tensor_self_Tensor_pad_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef pad, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_constant_pad_nd_out_out_Tensor_self_Tensor_pad_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP padSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type pad(padSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_constant_pad_nd_out_out_Tensor_self_Tensor_pad_IntArrayRef(out, self, pad, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(out, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalIntArrayRef bias_sizes, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP bias_sizesSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type bias_sizes(bias_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(out0, out1, out2, grad_output, input, weight, bias_sizes, stride, padding, dilation, transposed, output_padding, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_overrideable_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_convolution_overrideable_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_overrideable_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_overrideable_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t(out, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_convolution_backward_overrideable_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_convolution_backward_overrideable_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_convolution_backward_overrideable_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_convolution_backward_overrideable_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(out0, out1, out2, grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool
XPtrTorchTensor cpp_torch_namespace__convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool transposed, XPtrTorchIntArrayRef output_padding, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool cudnn_enabled, XPtrTorchbool allow_tf32);
RcppExport SEXP _torch_cpp_torch_namespace__convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP transposedSEXP, SEXP output_paddingSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP cudnn_enabledSEXP, SEXP allow_tf32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type transposed(transposedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type cudnn_enabled(cudnn_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type allow_tf32(allow_tf32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool(out, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_tbc_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor
XPtrTorchTensor cpp_torch_namespace_conv_tbc_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchTensor bias, XPtrTorchint64_t pad);
RcppExport SEXP _torch_cpp_torch_namespace_conv_tbc_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP padSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type pad(padSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_tbc_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor(out, self, weight, bias, pad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copy_out_out_Tensor_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_copy_out_out_Tensor_self_Tensor_src_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace_copy_out_out_Tensor_self_Tensor_src_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copy_out_out_Tensor_self_Tensor_src_Tensor(out, self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__copy_from_out_out_Tensor_self_Tensor_dst_Tensor
XPtrTorchTensor cpp_torch_namespace__copy_from_out_out_Tensor_self_Tensor_dst_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor dst, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace__copy_from_out_out_Tensor_self_Tensor_dst_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dstSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dst(dstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__copy_from_out_out_Tensor_self_Tensor_dst_Tensor(out, self, dst, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__copy_from_and_resize_out_out_Tensor_self_Tensor_dst_Tensor
XPtrTorchTensor cpp_torch_namespace__copy_from_and_resize_out_out_Tensor_self_Tensor_dst_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor dst);
RcppExport SEXP _torch_cpp_torch_namespace__copy_from_and_resize_out_out_Tensor_self_Tensor_dst_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dst(dstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__copy_from_and_resize_out_out_Tensor_self_Tensor_dst_Tensor(out, self, dst));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_affine_grid_generator_out_out_Tensor_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_affine_grid_generator_out_out_Tensor_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(XPtrTorchTensor out, XPtrTorchTensor theta, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t H, XPtrTorchint64_t W);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_affine_grid_generator_out_out_Tensor_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(SEXP outSEXP, SEXP thetaSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type H(HSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_affine_grid_generator_out_out_Tensor_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(out, theta, False, C, H, W));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_affine_grid_generator_backward_out_out_Tensor_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_affine_grid_generator_backward_out_out_Tensor_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t H, XPtrTorchint64_t W);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_out_out_Tensor_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(SEXP outSEXP, SEXP gradSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type H(HSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_affine_grid_generator_backward_out_out_Tensor_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t(out, grad, False, C, H, W));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double
Rcpp::List cpp_torch_namespace_cudnn_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble exponential_average_factor, XPtrTorchdouble epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP exponential_average_factorSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type exponential_average_factor(exponential_average_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(out0, out1, out2, out3, input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor
Rcpp::List cpp_torch_namespace_cudnn_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor input, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_var, XPtrTorchdouble epsilon, XPtrTorchTensor reserveSpace);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_varSEXP, SEXP epsilonSEXP, SEXP reserveSpaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_var(save_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reserveSpace(reserveSpaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor(out0, out1, out2, input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool allow_tf32);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP allow_tf32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type allow_tf32(allow_tf32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(out, self, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic, XPtrTorchbool allow_tf32);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP, SEXP allow_tf32SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type allow_tf32(allow_tf32SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool(out, self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mps_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace__mps_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace__mps_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mps_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(out, self, weight, padding, output_padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mps_convolution_transpose_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_mps_convolution_transpose_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mps_convolution_transpose_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mps_convolution_transpose_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2(out0, out1, self, grad_output, weight, padding, output_padding, stride, dilation, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_relu_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_relu_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_relu_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_relu_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(out, self, weight, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_convolution_add_relu_out_out_Tensor_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_cudnn_convolution_add_relu_out_out_Tensor_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchTensor z, XPtrTorchoptional_scalar alpha, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_convolution_add_relu_out_out_Tensor_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP zSEXP, SEXP alphaSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type z(zSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_convolution_add_relu_out_out_Tensor_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t(out, self, weight, z, alpha, bias, stride, padding, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_grid_sampler_out_out_Tensor_self_Tensor_grid_Tensor
XPtrTorchTensor cpp_torch_namespace_cudnn_grid_sampler_out_out_Tensor_self_Tensor_grid_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor grid);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_grid_sampler_out_out_Tensor_self_Tensor_grid_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_grid_sampler_out_out_Tensor_self_Tensor_grid_Tensor(out, self, grid));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cudnn_grid_sampler_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grid_Tensor_grad_output_Tensor
Rcpp::List cpp_torch_namespace_cudnn_grid_sampler_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grid_Tensor_grad_output_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchTensor grid, XPtrTorchTensor grad_output);
RcppExport SEXP _torch_cpp_torch_namespace_cudnn_grid_sampler_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grid_Tensor_grad_output_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP gridSEXP, SEXP grad_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cudnn_grid_sampler_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grid_Tensor_grad_output_Tensor(out0, out1, self, grid, grad_output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef
Rcpp::List cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(SEXP out0SEXP, SEXP out1SEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef(out0, out1, log_probs, targets, input_lengths, target_lengths, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor
Rcpp::List cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchTensor input_lengths, XPtrTorchTensor target_lengths, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor(out0, out1, log_probs, targets, input_lengths, target_lengths, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__ctc_loss_backward_out_out_Tensor_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t
XPtrTorchTensor cpp_torch_namespace__ctc_loss_backward_out_out_Tensor_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchTensor log_probs, XPtrTorchTensor targets, XPtrTorchIntArrayRef input_lengths, XPtrTorchIntArrayRef target_lengths, XPtrTorchTensor neg_log_likelihood, XPtrTorchTensor log_alpha, XPtrTorchint64_t blank, XPtrTorchbool zero_infinity);
RcppExport SEXP _torch_cpp_torch_namespace__ctc_loss_backward_out_out_Tensor_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(SEXP outSEXP, SEXP gradSEXP, SEXP log_probsSEXP, SEXP targetsSEXP, SEXP input_lengthsSEXP, SEXP target_lengthsSEXP, SEXP neg_log_likelihoodSEXP, SEXP log_alphaSEXP, SEXP blankSEXP, SEXP zero_infinitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_probs(log_probsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_lengths(input_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type target_lengths(target_lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type neg_log_likelihood(neg_log_likelihoodSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type log_alpha(log_alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type blank(blankSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type zero_infinity(zero_infinitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__ctc_loss_backward_out_out_Tensor_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t(out, grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diag_embed_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diag_embed_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diag_embed_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diag_embed_out_out_Tensor_self_Tensor(out, self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t
XPtrTorchTensor cpp_torch_namespace_diagonal_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef input_sizes, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t(SEXP outSEXP, SEXP grad_outputSEXP, SEXP input_sizesSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t(out, grad_output, input_sizes, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar_rounding_mode_c10string_view
XPtrTorchTensor cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar_rounding_mode_c10string_view(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchoptional_string_view rounding_mode);
RcppExport SEXP _torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar_rounding_mode_c10string_view(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP rounding_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type rounding_mode(rounding_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar_rounding_mode_c10string_view(out, self, other, rounding_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_out_out_Tensor_weight_Tensor_indices_Tensor
XPtrTorchTensor cpp_torch_namespace_embedding_out_out_Tensor_weight_Tensor_indices_Tensor(XPtrTorchTensor out, XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchint64_t padding_idx, XPtrTorchbool scale_grad_by_freq, XPtrTorchbool sparse);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_out_out_Tensor_weight_Tensor_indices_Tensor(SEXP outSEXP, SEXP weightSEXP, SEXP indicesSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_out_out_Tensor_weight_Tensor_indices_Tensor(out, weight, indices, padding_idx, scale_grad_by_freq, sparse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_dense_backward_out_out_Tensor_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool
XPtrTorchTensor cpp_torch_namespace_embedding_dense_backward_out_out_Tensor_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchIndexTensor indices, XPtrTorchint64_t num_weights, XPtrTorchint64_t padding_idx, XPtrTorchbool scale_grad_by_freq);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_dense_backward_out_out_Tensor_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(SEXP outSEXP, SEXP grad_outputSEXP, SEXP indicesSEXP, SEXP num_weightsSEXP, SEXP padding_idxSEXP, SEXP scale_grad_by_freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_dense_backward_out_out_Tensor_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool(out, grad_output, indices, num_weights, padding_idx, scale_grad_by_freq));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_renorm_out_out_Tensor_self_Tensor_indices_Tensor_max_norm_double_norm_type_double
XPtrTorchTensor cpp_torch_namespace_embedding_renorm_out_out_Tensor_self_Tensor_indices_Tensor_max_norm_double_norm_type_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchdouble max_norm, XPtrTorchdouble norm_type);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_renorm_out_out_Tensor_self_Tensor_indices_Tensor_max_norm_double_norm_type_double(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP max_normSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type max_norm(max_normSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_renorm_out_out_Tensor_self_Tensor_indices_Tensor_max_norm_double_norm_type_double(out, self, indices, max_norm, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_embedding_renorm_self_Tensor_indices_Tensor_max_norm_double_norm_type_double
XPtrTorchTensor cpp_torch_namespace_embedding_renorm_self_Tensor_indices_Tensor_max_norm_double_norm_type_double(XPtrTorchTensor self, XPtrTorchIndexTensor indices, XPtrTorchdouble max_norm, XPtrTorchdouble norm_type);
RcppExport SEXP _torch_cpp_torch_namespace_embedding_renorm_self_Tensor_indices_Tensor_max_norm_double_norm_type_double(SEXP selfSEXP, SEXP indicesSEXP, SEXP max_normSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type max_norm(max_normSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_embedding_renorm_self_Tensor_indices_Tensor_max_norm_double_norm_type_double(self, indices, max_norm, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_forward_only_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor
Rcpp::List cpp_torch_namespace__embedding_bag_forward_only_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchbool include_last_offset, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_forward_only_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP include_last_offsetSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_last_offset(include_last_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_forward_only_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor(out0, out1, out2, out3, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor
Rcpp::List cpp_torch_namespace__embedding_bag_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchbool sparse, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchbool include_last_offset, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP sparseSEXP, SEXP per_sample_weightsSEXP, SEXP include_last_offsetSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type include_last_offset(include_last_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor(out0, out1, out2, out3, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_dense_backward_out_out_Tensor_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor
XPtrTorchTensor cpp_torch_namespace__embedding_bag_dense_backward_out_out_Tensor_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchIndexTensor indices, XPtrTorchTensor offset2bag, XPtrTorchTensor bag_size, XPtrTorchTensor maximum_indices, XPtrTorchint64_t num_weights, XPtrTorchbool scale_grad_by_freq, XPtrTorchint64_t mode, XPtrTorchOptionalTensor per_sample_weights, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_dense_backward_out_out_Tensor_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(SEXP outSEXP, SEXP gradSEXP, SEXP indicesSEXP, SEXP offset2bagSEXP, SEXP bag_sizeSEXP, SEXP maximum_indicesSEXP, SEXP num_weightsSEXP, SEXP scale_grad_by_freqSEXP, SEXP modeSEXP, SEXP per_sample_weightsSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type bag_size(bag_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type maximum_indices(maximum_indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_weights(num_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type scale_grad_by_freq(scale_grad_by_freqSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type per_sample_weights(per_sample_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_dense_backward_out_out_Tensor_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor(out, grad, indices, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__embedding_bag_per_sample_weights_backward_out_out_Tensor_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t
XPtrTorchTensor cpp_torch_namespace__embedding_bag_per_sample_weights_backward_out_out_Tensor_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchTensor weight, XPtrTorchIndexTensor indices, XPtrTorchTensor offsets, XPtrTorchTensor offset2bag, XPtrTorchint64_t mode, XPtrTorchint64_t padding_idx);
RcppExport SEXP _torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_out_out_Tensor_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(SEXP outSEXP, SEXP gradSEXP, SEXP weightSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP offset2bagSEXP, SEXP modeSEXP, SEXP padding_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offset2bag(offset2bagSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_idx(padding_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__embedding_bag_per_sample_weights_backward_out_out_Tensor_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t(out, grad, weight, indices, offsets, offset2bag, mode, padding_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP namesSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef_names_DimnameList(out, size, names, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_new_empty_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_new_empty_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_new_empty_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_new_empty_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_new_empty_strided_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_new_empty_strided_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_new_empty_strided_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_new_empty_strided_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(out, self, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_new_full_out_out_Tensor_self_Tensor_size_IntArrayRef_fill_value_Scalar
XPtrTorchTensor cpp_torch_namespace_new_full_out_out_Tensor_self_Tensor_size_IntArrayRef_fill_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchScalar fill_value);
RcppExport SEXP _torch_cpp_torch_namespace_new_full_out_out_Tensor_self_Tensor_size_IntArrayRef_fill_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP fill_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_new_full_out_out_Tensor_self_Tensor_size_IntArrayRef_fill_value_Scalar(out, self, size, fill_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_new_zeros_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_new_zeros_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_new_zeros_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_new_zeros_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_new_ones_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_new_ones_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_new_ones_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_new_ones_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__empty_affine_quantized_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__empty_affine_quantized_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__empty_affine_quantized_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__empty_affine_quantized_out_out_Tensor_size_IntArrayRef(out, size, scale, zero_point, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__empty_per_channel_affine_quantized_out_out_Tensor_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t
XPtrTorchTensor cpp_torch_namespace__empty_per_channel_affine_quantized_out_out_Tensor_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchTensor scales, XPtrTorchTensor zero_points, XPtrTorchint64_t axis, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__empty_per_channel_affine_quantized_out_out_Tensor_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(SEXP outSEXP, SEXP sizeSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP axisSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__empty_per_channel_affine_quantized_out_out_Tensor_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t(out, size, scales, zero_points, axis, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_resize_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_resize_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_resize_self_Tensor_size_IntArrayRef(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_resize_self_Tensor_size_IntArrayRef(SEXP selfSEXP, SEXP sizeSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_self_Tensor_size_IntArrayRef(self, size, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__resize_output_out_out_Tensor_self_Tensor_size_IntArrayRef_device_Device
XPtrTorchTensor cpp_torch_namespace__resize_output_out_out_Tensor_self_Tensor_size_IntArrayRef_device_Device(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_namespace__resize_output_out_out_Tensor_self_Tensor_size_IntArrayRef_device_Device(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__resize_output_out_out_Tensor_self_Tensor_size_IntArrayRef_device_Device(out, self, size, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__resize_output_self_Tensor_size_IntArrayRef_device_Device
XPtrTorchTensor cpp_torch_namespace__resize_output_self_Tensor_size_IntArrayRef_device_Device(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_namespace__resize_output_self_Tensor_size_IntArrayRef_device_Device(SEXP selfSEXP, SEXP sizeSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__resize_output_self_Tensor_size_IntArrayRef_device_Device(self, size, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_quantized_out_out_Tensor_size_IntArrayRef_qtensor_Tensor
XPtrTorchTensor cpp_torch_namespace_empty_quantized_out_out_Tensor_size_IntArrayRef_qtensor_Tensor(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchTensor qtensor, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_quantized_out_out_Tensor_size_IntArrayRef_qtensor_Tensor(SEXP outSEXP, SEXP sizeSEXP, SEXP qtensorSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qtensor(qtensorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_quantized_out_out_Tensor_size_IntArrayRef_qtensor_Tensor(out, size, qtensor, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_like_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_empty_like_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_empty_like_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_like_out_out_Tensor_self_Tensor(out, self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_empty_strided_out_out_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_empty_strided_out_out_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_empty_strided_out_out_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_empty_strided_out_out_Tensor_size_IntArrayRef_stride_IntArrayRef(out, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Scalar(out, self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Tensor(out, self, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchScalar fill_value, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP fill_valueSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar_names_DimnameList(out, size, fill_value, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_full_like_out_out_Tensor_self_Tensor_fill_value_Scalar
XPtrTorchTensor cpp_torch_namespace_full_like_out_out_Tensor_self_Tensor_fill_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar fill_value, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_full_like_out_out_Tensor_self_Tensor_fill_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP fill_valueSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type fill_value(fill_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_full_like_out_out_Tensor_self_Tensor_fill_value_Scalar(out, self, fill_value, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_from_file_out_out_Tensor_filename_c10string_view
XPtrTorchTensor cpp_torch_namespace_from_file_out_out_Tensor_filename_c10string_view(XPtrTorchTensor out, XPtrTorchstring_view filename, XPtrTorchoptional_bool shared, XPtrTorchoptional_int64_t size);
RcppExport SEXP _torch_cpp_torch_namespace_from_file_out_out_Tensor_filename_c10string_view(SEXP outSEXP, SEXP filenameSEXP, SEXP sharedSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type shared(sharedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_from_file_out_out_Tensor_filename_c10string_view(out, filename, shared, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_2d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_grid_sampler_2d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_2d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP outSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_2d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(out, input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_2d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_grid_sampler_2d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_2d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(SEXP out0SEXP, SEXP out1SEXP, SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_2d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(out0, out1, grad_output, input, grid, interpolation_mode, padding_mode, align_corners, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__grid_sampler_2d_cpu_fallback_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace__grid_sampler_2d_cpu_fallback_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP outSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__grid_sampler_2d_cpu_fallback_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(out, input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_3d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool
XPtrTorchTensor cpp_torch_namespace_grid_sampler_3d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_3d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(SEXP outSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_3d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool(out, input, grid, interpolation_mode, padding_mode, align_corners));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_grid_sampler_3d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_grid_sampler_3d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor grid, XPtrTorchint64_t interpolation_mode, XPtrTorchint64_t padding_mode, XPtrTorchbool align_corners, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_grid_sampler_3d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(SEXP out0SEXP, SEXP out1SEXP, SEXP grad_outputSEXP, SEXP inputSEXP, SEXP gridSEXP, SEXP interpolation_modeSEXP, SEXP padding_modeSEXP, SEXP align_cornersSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type interpolation_mode(interpolation_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type padding_mode(padding_modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type align_corners(align_cornersSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_grid_sampler_3d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2(out0, out1, grad_output, input, grid, interpolation_mode, padding_mode, align_corners, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t(XPtrTorchTensor out, XPtrTorchint64_t window_length);
RcppExport SEXP _torch_cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t(SEXP outSEXP, SEXP window_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t(out, window_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t_periodic_bool(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic);
RcppExport SEXP _torch_cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t_periodic_bool(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t_periodic_bool(out, window_length, periodic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t(XPtrTorchTensor out, XPtrTorchint64_t window_length);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t(SEXP outSEXP, SEXP window_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t(out, window_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool(out, window_length, periodic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double
XPtrTorchTensor cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchdouble alpha);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double(out, window_length, periodic, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double_beta_double
XPtrTorchTensor cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double_beta_double(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchdouble alpha, XPtrTorchdouble beta);
RcppExport SEXP _torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double_beta_double(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double_beta_double(out, window_length, periodic, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t
XPtrTorchTensor cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t(XPtrTorchTensor out, XPtrTorchint64_t window_length);
RcppExport SEXP _torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t(SEXP outSEXP, SEXP window_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t(out, window_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool
XPtrTorchTensor cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic);
RcppExport SEXP _torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool(out, window_length, periodic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool_beta_double
XPtrTorchTensor cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool_beta_double(XPtrTorchTensor out, XPtrTorchint64_t window_length, XPtrTorchbool periodic, XPtrTorchdouble beta);
RcppExport SEXP _torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool_beta_double(SEXP outSEXP, SEXP window_lengthSEXP, SEXP periodicSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type window_length(window_lengthSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type periodic(periodicSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool_beta_double(out, window_length, periodic, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_group_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double
Rcpp::List cpp_torch_namespace_native_group_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t HxW, XPtrTorchint64_t group, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_group_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HxWSEXP, SEXP groupSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type HxW(HxWSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type group(groupSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_group_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double(out0, out1, out2, input, weight, bias, False, C, HxW, group, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_group_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_group_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor rstd, XPtrTorchOptionalTensor weight, XPtrTorchint64_t False, XPtrTorchint64_t C, XPtrTorchint64_t HxW, XPtrTorchint64_t group, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_group_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP rstdSEXP, SEXP weightSEXP, SEXP FalseSEXP, SEXP CSEXP, SEXP HxWSEXP, SEXP groupSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rstd(rstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type False(FalseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type C(CSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type HxW(HxWSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type group(groupSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_group_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3(out0, out1, out2, grad_out, input, mean, rstd, weight, False, C, HxW, group, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_put_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace_index_put_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_index_put_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_put_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(out, self, indices, values, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__index_put_impl_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace__index_put_impl_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate, XPtrTorchbool unsafe);
RcppExport SEXP _torch_cpp_torch_namespace__index_put_impl_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP, SEXP unsafeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unsafe(unsafeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__index_put_impl_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(out, self, indices, values, accumulate, unsafe));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__index_put_impl_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace__index_put_impl_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(XPtrTorchTensor self, XPtrTorchOptionalIndexTensorList indices, XPtrTorchTensor values, XPtrTorchbool accumulate, XPtrTorchbool unsafe);
RcppExport SEXP _torch_cpp_torch_namespace__index_put_impl_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(SEXP selfSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP accumulateSEXP, SEXP unsafeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIndexTensorList >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unsafe(unsafeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__index_put_impl_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor(self, indices, values, accumulate, unsafe));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isnan_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isnan_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isnan_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isnan_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_layer_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double
Rcpp::List cpp_torch_namespace_native_layer_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor input, XPtrTorchIntArrayRef normalized_shape, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_native_layer_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP inputSEXP, SEXP normalized_shapeSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type normalized_shape(normalized_shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_layer_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double(out0, out1, out2, input, normalized_shape, weight, bias, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_layer_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_layer_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchIntArrayRef normalized_shape, XPtrTorchTensor mean, XPtrTorchTensor rstd, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_layer_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_outSEXP, SEXP inputSEXP, SEXP normalized_shapeSEXP, SEXP meanSEXP, SEXP rstdSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type normalized_shape(normalized_shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type rstd(rstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_layer_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3(out0, out1, out2, grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(out0, out1, out2, self, grad_output, weight, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_out_out_Tensor_self_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_linear_out_out_Tensor_self_Tensor_weight_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_out_out_Tensor_self_Tensor_weight_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_out_out_Tensor_self_Tensor_weight_Tensor(out, self, weight, bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_backward_input_out_out_Tensor_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_linear_backward_input_out_out_Tensor_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor(XPtrTorchTensor out, XPtrTorchIntArrayRef input_size, XPtrTorchTensor grad_output, XPtrTorchTensor weight);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_backward_input_out_out_Tensor_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor(SEXP outSEXP, SEXP input_sizeSEXP, SEXP grad_outputSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_size(input_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_backward_input_out_out_Tensor_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor(out, input_size, grad_output, weight));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_backward_weights_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool
Rcpp::List cpp_torch_namespace_mkldnn_linear_backward_weights_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor grad_output, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchbool bias_defined);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_backward_weights_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP grad_outputSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP bias_definedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bias_defined(bias_definedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_backward_weights_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool(out0, out1, grad_output, input, weight, bias_defined));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_mkldnn_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3(out0, out1, out2, self, grad_output, weight, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_matmul_backward_out_out0_Tensor_out1_Tensor_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2
Rcpp::List cpp_torch_namespace_matmul_backward_out_out0_Tensor_out1_Tensor_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchTensor other, std::vector<bool> mask);
RcppExport SEXP _torch_cpp_torch_namespace_matmul_backward_out_out0_Tensor_out1_Tensor_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2(SEXP out0SEXP, SEXP out1SEXP, SEXP gradSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_matmul_backward_out_out0_Tensor_out1_Tensor_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2(out0, out1, grad, self, other, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor(out0, out1, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool keepdim);
RcppExport SEXP _torch_cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor_dim_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor_dim_int64_t(out0, out1, self, dim, keepdim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef(out, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchTensor input, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP inputSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(out, grad_output, output, input, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_max_pool3d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_mkldnn_max_pool3d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchTensor input, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_max_pool3d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP inputSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_max_pool3d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef(out, grad_output, output, input, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_max_pool1d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_quantized_max_pool1d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_max_pool1d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_max_pool1d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantized_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_quantized_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation, XPtrTorchbool ceil_mode);
RcppExport SEXP _torch_cpp_torch_namespace_quantized_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP, SEXP ceil_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type ceil_mode(ceil_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantized_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef(out, self, kernel_size, stride, padding, dilation, ceil_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_median_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_median_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_median_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_median_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_nanmedian_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_nanmedian_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_nanmedian_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_nanmedian_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mps_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace__mps_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace__mps_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mps_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(out, self, weight, bias, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mps_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_mps_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_mps_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mps_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3(out0, out1, out2, self, grad_output, weight, padding, stride, dilation, groups, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_mkldnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t(out, self, weight, bias, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_rnn_layer_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool
Rcpp::List cpp_torch_namespace_mkldnn_rnn_layer_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor input, XPtrTorchTensor weight0, XPtrTorchTensor weight1, XPtrTorchTensor weight2, XPtrTorchTensor weight3, XPtrTorchTensor hx_, XPtrTorchTensor cx_, XPtrTorchbool reverse, XPtrTorchIntArrayRef batch_sizes, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool has_biases, XPtrTorchbool bidirectional, XPtrTorchbool batch_first, XPtrTorchbool train);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_rnn_layer_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP inputSEXP, SEXP weight0SEXP, SEXP weight1SEXP, SEXP weight2SEXP, SEXP weight3SEXP, SEXP hx_SEXP, SEXP cx_SEXP, SEXP reverseSEXP, SEXP batch_sizesSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP has_biasesSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight0(weight0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight1(weight1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight2(weight2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight3(weight3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx_(hx_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx_(cx_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_rnn_layer_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool(out0, out1, out2, out3, input, weight0, weight1, weight2, weight3, hx_, cx_, reverse, batch_sizes, mode, hidden_size, num_layers, has_biases, bidirectional, batch_first, train));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_rnn_layer_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_out6_Tensor_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor
Rcpp::List cpp_torch_namespace_mkldnn_rnn_layer_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_out6_Tensor_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor out4, XPtrTorchTensor out5, XPtrTorchTensor out6, XPtrTorchTensor input, XPtrTorchTensor weight1, XPtrTorchTensor weight2, XPtrTorchTensor weight3, XPtrTorchTensor weight4, XPtrTorchTensor hx_, XPtrTorchTensor cx_tmp, XPtrTorchTensor output, XPtrTorchTensor hy_, XPtrTorchTensor cy_, XPtrTorchOptionalTensor grad_output, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchbool reverse, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool has_biases, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchbool batch_first, XPtrTorchTensor workspace);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_rnn_layer_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_out6_Tensor_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP out4SEXP, SEXP out5SEXP, SEXP out6SEXP, SEXP inputSEXP, SEXP weight1SEXP, SEXP weight2SEXP, SEXP weight3SEXP, SEXP weight4SEXP, SEXP hx_SEXP, SEXP cx_tmpSEXP, SEXP outputSEXP, SEXP hy_SEXP, SEXP cy_SEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP reverseSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP has_biasesSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP batch_firstSEXP, SEXP workspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out4(out4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out5(out5SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out6(out6SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight1(weight1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight2(weight2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight3(weight3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight4(weight4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx_(hx_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx_tmp(cx_tmpSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hy_(hy_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cy_(cy_SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_rnn_layer_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_out6_Tensor_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor(out0, out1, out2, out3, out4, out5, out6, input, weight1, weight2, weight3, weight4, hx_, cx_tmp, output, hy_, cy_, grad_output, grad_hy, grad_cy, reverse, mode, hidden_size, num_layers, has_biases, train, bidirectional, batch_sizes, batch_first, workspace));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double
Rcpp::List cpp_torch_namespace_miopen_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchbool training, XPtrTorchdouble exponential_average_factor, XPtrTorchdouble epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP exponential_average_factorSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type exponential_average_factor(exponential_average_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double(out0, out1, out2, input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double
Rcpp::List cpp_torch_namespace_miopen_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor input, XPtrTorchTensor grad_output, XPtrTorchTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_var, XPtrTorchdouble epsilon);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP inputSEXP, SEXP grad_outputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_varSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_var(save_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double(out0, out1, out2, input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
XPtrTorchTensor cpp_torch_namespace_miopen_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(out, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
XPtrTorchTensor cpp_torch_namespace_miopen_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef output_padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP output_paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_padding(output_paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(out, self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_depthwise_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool
XPtrTorchTensor cpp_torch_namespace_miopen_depthwise_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchbool benchmark, XPtrTorchbool deterministic);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_depthwise_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP benchmarkSEXP, SEXP deterministicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type deterministic(deterministicSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_depthwise_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool(out, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor
Rcpp::List cpp_torch_namespace_miopen_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor out4, XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP out4SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out4(out4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_miopen_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor(out0, out1, out2, out3, out4, input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_miopen_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4
void cpp_torch_namespace_miopen_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensorList out3, XPtrTorchTensor input, XPtrTorchTensorList weight, XPtrTorchint64_t weight_stride0, XPtrTorchTensor weight_buf, XPtrTorchTensor hx, XPtrTorchOptionalTensor cx, XPtrTorchTensor output, XPtrTorchOptionalTensor grad_output, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchint64_t mode, XPtrTorchint64_t hidden_size, XPtrTorchint64_t num_layers, XPtrTorchbool batch_first, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchIntArrayRef batch_sizes, XPtrTorchOptionalTensor dropout_state, XPtrTorchTensor reserve, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_miopen_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP weight_stride0SEXP, SEXP weight_bufSEXP, SEXP hxSEXP, SEXP cxSEXP, SEXP outputSEXP, SEXP grad_outputSEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP modeSEXP, SEXP hidden_sizeSEXP, SEXP num_layersSEXP, SEXP batch_firstSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_sizesSEXP, SEXP dropout_stateSEXP, SEXP reserveSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type weight_stride0(weight_stride0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight_buf(weight_bufSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type hidden_size(hidden_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type dropout_state(dropout_stateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    cpp_torch_namespace_miopen_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4(out0, out1, out2, out3, input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__sparse_sparse_matmul_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_sparse_matmul_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sparse_matmul_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sparse_matmul_out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_batch_norm_legit_functional_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double
Rcpp::List cpp_torch_namespace__native_batch_norm_legit_functional_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchTensor running_mean, XPtrTorchTensor running_var, XPtrTorchbool training, XPtrTorchdouble momentum, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace__native_batch_norm_legit_functional_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP trainingSEXP, SEXP momentumSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_batch_norm_legit_functional_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double(input, weight, bias, running_mean, running_var, training, momentum, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_stats_out_out0_Tensor_out1_Tensor_input_Tensor_eps_double
Rcpp::List cpp_torch_namespace_batch_norm_stats_out_out0_Tensor_out1_Tensor_input_Tensor_eps_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input, XPtrTorchdouble eps);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_stats_out_out0_Tensor_out1_Tensor_input_Tensor_eps_double(SEXP out0SEXP, SEXP out1SEXP, SEXP inputSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_stats_out_out0_Tensor_out1_Tensor_input_Tensor_eps_double(out0, out1, input, eps));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_gather_stats_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t
Rcpp::List cpp_torch_namespace_batch_norm_gather_stats_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchint64_t count);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_gather_stats_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_gather_stats_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t(out0, out1, input, mean, invstd, running_mean, running_var, momentum, eps, count));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_gather_stats_with_counts_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor
Rcpp::List cpp_torch_namespace_batch_norm_gather_stats_with_counts_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchdouble momentum, XPtrTorchdouble eps, XPtrTorchTensor counts);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP, SEXP epsSEXP, SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_gather_stats_with_counts_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor(out0, out1, input, mean, invstd, running_mean, running_var, momentum, eps, counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace_native_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchOptionalTensor weight, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchOptionalTensor save_mean, XPtrTorchOptionalTensor save_invstd, XPtrTorchbool train, XPtrTorchdouble eps, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace_native_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP save_meanSEXP, SEXP save_invstdSEXP, SEXP trainSEXP, SEXP epsSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_mean(save_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type save_invstd(save_invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3(out0, out1, out2, grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_backward_reduce_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool
Rcpp::List cpp_torch_namespace_batch_norm_backward_reduce_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor weight, XPtrTorchbool input_g, XPtrTorchbool weight_g, XPtrTorchbool bias_g);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_backward_reduce_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP weightSEXP, SEXP input_gSEXP, SEXP weight_gSEXP, SEXP bias_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type input_g(input_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type weight_g(weight_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bias_g(bias_gSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_backward_reduce_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool(out0, out1, out2, out3, grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_backward_elemt_out_out_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor
XPtrTorchTensor cpp_torch_namespace_batch_norm_backward_elemt_out_out_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_out, XPtrTorchTensor input, XPtrTorchTensor mean, XPtrTorchTensor invstd, XPtrTorchOptionalTensor weight, XPtrTorchTensor mean_dy, XPtrTorchTensor mean_dy_xmu, XPtrTorchTensor count);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_backward_elemt_out_out_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor(SEXP outSEXP, SEXP grad_outSEXP, SEXP inputSEXP, SEXP meanSEXP, SEXP invstdSEXP, SEXP weightSEXP, SEXP mean_dySEXP, SEXP mean_dy_xmuSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_out(grad_outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type invstd(invstdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean_dy(mean_dySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mean_dy_xmu(mean_dy_xmuSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_backward_elemt_out_out_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor(out, grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu, count));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_batch_norm_update_stats_out_out0_Tensor_out1_Tensor_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double
Rcpp::List cpp_torch_namespace_batch_norm_update_stats_out_out0_Tensor_out1_Tensor_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input, XPtrTorchOptionalTensor running_mean, XPtrTorchOptionalTensor running_var, XPtrTorchdouble momentum);
RcppExport SEXP _torch_cpp_torch_namespace_batch_norm_update_stats_out_out0_Tensor_out1_Tensor_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(SEXP out0SEXP, SEXP out1SEXP, SEXP inputSEXP, SEXP running_meanSEXP, SEXP running_varSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_mean(running_meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type running_var(running_varSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_batch_norm_update_stats_out_out0_Tensor_out1_Tensor_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double(out0, out1, input, running_mean, running_var, momentum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nnpack_spatial_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__nnpack_spatial_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor input, XPtrTorchTensor weight, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace__nnpack_spatial_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(SEXP outSEXP, SEXP inputSEXP, SEXP weightSEXP, SEXP biasSEXP, SEXP paddingSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nnpack_spatial_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef(out, input, weight, bias, padding, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef_names_DimnameList(out, size, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ones_like_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ones_like_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_ones_like_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ones_like_out_out_Tensor_self_Tensor(out, self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__euclidean_dist_out_out_Tensor_x1_Tensor_x2_Tensor
XPtrTorchTensor cpp_torch_namespace__euclidean_dist_out_out_Tensor_x1_Tensor_x2_Tensor(XPtrTorchTensor out, XPtrTorchTensor x1, XPtrTorchTensor x2);
RcppExport SEXP _torch_cpp_torch_namespace__euclidean_dist_out_out_Tensor_x1_Tensor_x2_Tensor(SEXP outSEXP, SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__euclidean_dist_out_out_Tensor_x1_Tensor_x2_Tensor(out, x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cdist_forward_out_out_Tensor_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t
XPtrTorchTensor cpp_torch_namespace__cdist_forward_out_out_Tensor_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t(XPtrTorchTensor out, XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchdouble p, XPtrTorchoptional_int64_t compute_mode);
RcppExport SEXP _torch_cpp_torch_namespace__cdist_forward_out_out_Tensor_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t(SEXP outSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP compute_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type compute_mode(compute_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cdist_forward_out_out_Tensor_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t(out, x1, x2, p, compute_mode));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cdist_backward_out_out_Tensor_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor
XPtrTorchTensor cpp_torch_namespace__cdist_backward_out_out_Tensor_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchTensor x1, XPtrTorchTensor x2, XPtrTorchdouble p, XPtrTorchTensor cdist);
RcppExport SEXP _torch_cpp_torch_namespace__cdist_backward_out_out_Tensor_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(SEXP outSEXP, SEXP gradSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP pSEXP, SEXP cdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cdist(cdistSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cdist_backward_out_out_Tensor_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor(out, grad, x1, x2, p, cdist));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pdist_forward_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__pdist_forward_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble p);
RcppExport SEXP _torch_cpp_torch_namespace__pdist_forward_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pdist_forward_out_out_Tensor_self_Tensor(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pdist_backward_out_out_Tensor_grad_Tensor_self_Tensor_p_double_pdist_Tensor
XPtrTorchTensor cpp_torch_namespace__pdist_backward_out_out_Tensor_grad_Tensor_self_Tensor_p_double_pdist_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchTensor pdist);
RcppExport SEXP _torch_cpp_torch_namespace__pdist_backward_out_out_Tensor_grad_Tensor_self_Tensor_p_double_pdist_Tensor(SEXP outSEXP, SEXP gradSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP pdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type pdist(pdistSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pdist_backward_out_out_Tensor_grad_Tensor_self_Tensor_p_double_pdist_Tensor(out, grad, self, p, pdist));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pixel_shuffle_out_out_Tensor_self_Tensor_upscale_factor_int64_t
XPtrTorchTensor cpp_torch_namespace_pixel_shuffle_out_out_Tensor_self_Tensor_upscale_factor_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t upscale_factor);
RcppExport SEXP _torch_cpp_torch_namespace_pixel_shuffle_out_out_Tensor_self_Tensor_upscale_factor_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP upscale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type upscale_factor(upscale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pixel_shuffle_out_out_Tensor_self_Tensor_upscale_factor_int64_t(out, self, upscale_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_pixel_unshuffle_out_out_Tensor_self_Tensor_downscale_factor_int64_t
XPtrTorchTensor cpp_torch_namespace_pixel_unshuffle_out_out_Tensor_self_Tensor_downscale_factor_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t downscale_factor);
RcppExport SEXP _torch_cpp_torch_namespace_pixel_unshuffle_out_out_Tensor_self_Tensor_downscale_factor_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP downscale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type downscale_factor(downscale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_pixel_unshuffle_out_out_Tensor_self_Tensor_downscale_factor_int64_t(out, self, downscale_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_channel_shuffle_out_out_Tensor_self_Tensor_groups_int64_t
XPtrTorchTensor cpp_torch_namespace_channel_shuffle_out_out_Tensor_self_Tensor_groups_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_channel_shuffle_out_out_Tensor_self_Tensor_groups_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_channel_shuffle_out_out_Tensor_self_Tensor_groups_int64_t(out, self, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pin_memory_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__pin_memory_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDevice device);
RcppExport SEXP _torch_cpp_torch_namespace__pin_memory_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pin_memory_out_out_Tensor_self_Tensor(out, self, device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_scalar_tensor_out_out_Tensor_s_Scalar
XPtrTorchTensor cpp_torch_namespace_scalar_tensor_out_out_Tensor_s_Scalar(XPtrTorchTensor out, XPtrTorchScalar s);
RcppExport SEXP _torch_cpp_torch_namespace_scalar_tensor_out_out_Tensor_s_Scalar(SEXP outSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_scalar_tensor_out_out_Tensor_s_Scalar(out, s));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_names_DimnameList(out, size, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList(out, size, generator, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rand_like_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rand_like_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_rand_like_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rand_like_out_out_Tensor_self_Tensor(out, self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_high_int64_t
XPtrTorchTensor cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_high_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t high, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_high_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP highSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_high_int64_t(out, self, high, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_low_int64_t_high_int64_t
XPtrTorchTensor cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_low_int64_t_high_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t low, XPtrTorchint64_t high, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_low_int64_t_high_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP lowSEXP, SEXP highSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type low(lowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type high(highSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_low_int64_t_high_int64_t(out, self, low, high, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_names_DimnameList(out, size, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalGenerator generator, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList(out, size, generator, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_randn_like_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_randn_like_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_randn_like_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_randn_like_out_out_Tensor_self_Tensor(out, self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_out_out_Tensor_self_Tensor_repeats_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_repeat_out_out_Tensor_self_Tensor_repeats_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef repeats);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_out_out_Tensor_self_Tensor_repeats_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP repeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type repeats(repeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_out_out_Tensor_self_Tensor_repeats_IntArrayRef(out, self, repeats));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_repeat_interleave_out_out_Tensor_repeats_Tensor
XPtrTorchTensor cpp_torch_namespace_repeat_interleave_out_out_Tensor_repeats_Tensor(XPtrTorchTensor out, XPtrTorchTensor repeats, XPtrTorchoptional_int64_t output_size);
RcppExport SEXP _torch_cpp_torch_namespace_repeat_interleave_out_out_Tensor_repeats_Tensor(SEXP outSEXP, SEXP repeatsSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_repeat_interleave_out_out_Tensor_repeats_Tensor(out, repeats, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_reshape_out_out_Tensor_self_Tensor_shape_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__mkldnn_reshape_out_out_Tensor_self_Tensor_shape_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef shape);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_reshape_out_out_Tensor_self_Tensor_shape_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_reshape_out_out_Tensor_self_Tensor_shape_IntArrayRef(out, self, shape));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_relu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_relu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_relu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_relu_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef input_sizes, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t(SEXP outSEXP, SEXP grad_outputSEXP, SEXP input_sizesSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t(out, grad_output, input_sizes, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_celu_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_celu_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_celu_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_celu_out_out_Tensor_self_Tensor(out, self, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_namespace_slice_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchIntArrayRef input_sizes, XPtrTorchindex_int64_t dim, XPtrTorchint64_t start, XPtrTorchint64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t(SEXP outSEXP, SEXP grad_outputSEXP, SEXP input_sizesSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t(out, grad_output, input_sizes, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_scatter_out_out_Tensor_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_slice_scatter_out_out_Tensor_self_Tensor_src_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_scatter_out_out_Tensor_self_Tensor_src_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP srcSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_scatter_out_out_Tensor_self_Tensor_src_Tensor(out, self, src, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_scatter_out_out_Tensor_self_Tensor_src_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_scatter_out_out_Tensor_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_scatter_out_out_Tensor_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP srcSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_scatter_out_out_Tensor_self_Tensor_src_Tensor_dim_int64_t_index_int64_t(out, self, src, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_scatter_out_out_Tensor_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_diagonal_scatter_out_out_Tensor_self_Tensor_src_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_scatter_out_out_Tensor_self_Tensor_src_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP srcSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_scatter_out_out_Tensor_self_Tensor_src_Tensor(out, self, src, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided_scatter_out_out_Tensor_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_as_strided_scatter_out_out_Tensor_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided_scatter_out_out_Tensor_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP srcSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided_scatter_out_out_Tensor_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef(out, self, src, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsafe_split_out_out_TensorList_self_Tensor_split_size_int64_t
void cpp_torch_namespace_unsafe_split_out_out_TensorList_self_Tensor_split_size_int64_t(XPtrTorchTensorList out, XPtrTorchTensor self, XPtrTorchint64_t split_size, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsafe_split_out_out_TensorList_self_Tensor_split_size_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP split_sizeSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type split_size(split_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace_unsafe_split_out_out_TensorList_self_Tensor_split_size_int64_t(out, self, split_size, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_unsafe_split_with_sizes_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef
void cpp_torch_namespace_unsafe_split_with_sizes_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef(XPtrTorchTensorList out, XPtrTorchTensor self, XPtrTorchIntArrayRef split_sizes, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsafe_split_with_sizes_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP split_sizesSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type split_sizes(split_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    cpp_torch_namespace_unsafe_split_with_sizes_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef(out, self, split_sizes, dim);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_sum_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_sum_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sum_out_out_Tensor_self_Tensor(out, self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_prod_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_prod_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_prod_out_out_Tensor_self_Tensor(out, self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__mkldnn_transpose_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace__mkldnn_transpose_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace__mkldnn_transpose_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__mkldnn_transpose_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t(out, self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_flip_out_out_Tensor_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_flip_out_out_Tensor_self_Tensor_dims_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_flip_out_out_Tensor_self_Tensor_dims_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_flip_out_out_Tensor_self_Tensor_dims_IntArrayRef(out, self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_roll_out_out_Tensor_self_Tensor_shifts_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_roll_out_out_Tensor_self_Tensor_shifts_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef shifts, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_roll_out_out_Tensor_self_Tensor_shifts_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP shiftsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shifts(shiftsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_roll_out_out_Tensor_self_Tensor_shifts_IntArrayRef(out, self, shifts, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rot90_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_rot90_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t k, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_rot90_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP kSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rot90_out_out_Tensor_self_Tensor(out, self, k, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__transform_bias_rescale_qkv_out_out0_Tensor_out1_Tensor_out2_Tensor_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t
Rcpp::List cpp_torch_namespace__transform_bias_rescale_qkv_out_out0_Tensor_out1_Tensor_out2_Tensor_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor qkv, XPtrTorchTensor qkv_bias, XPtrTorchint64_t num_heads);
RcppExport SEXP _torch_cpp_torch_namespace__transform_bias_rescale_qkv_out_out0_Tensor_out1_Tensor_out2_Tensor_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP qkvSEXP, SEXP qkv_biasSEXP, SEXP num_headsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv(qkvSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_heads(num_headsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__transform_bias_rescale_qkv_out_out0_Tensor_out1_Tensor_out2_Tensor_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t(out0, out1, out2, qkv, qkv_bias, num_heads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_from_mask_out_out_Tensor_t_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_tensor_from_mask_out_out_Tensor_t_Tensor_mask_Tensor(XPtrTorchTensor out, XPtrTorchTensor t, XPtrTorchTensor mask, XPtrTorchbool mask_check);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_from_mask_out_out_Tensor_t_Tensor_mask_Tensor(SEXP outSEXP, SEXP tSEXP, SEXP maskSEXP, SEXP mask_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type t(tSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type mask_check(mask_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_from_mask_out_out_Tensor_t_Tensor_mask_Tensor(out, t, mask, mask_check));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_from_padded_out_out_Tensor_padded_Tensor_cpu_nested_shape_example_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_from_padded_out_out_Tensor_padded_Tensor_cpu_nested_shape_example_Tensor(XPtrTorchTensor out, XPtrTorchTensor padded, XPtrTorchTensor cpu_nested_shape_example, XPtrTorchbool fuse_transform_0213);
RcppExport SEXP _torch_cpp_torch_namespace__nested_from_padded_out_out_Tensor_padded_Tensor_cpu_nested_shape_example_Tensor(SEXP outSEXP, SEXP paddedSEXP, SEXP cpu_nested_shape_exampleSEXP, SEXP fuse_transform_0213SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type padded(paddedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cpu_nested_shape_example(cpu_nested_shape_exampleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type fuse_transform_0213(fuse_transform_0213SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_from_padded_out_out_Tensor_padded_Tensor_cpu_nested_shape_example_Tensor(out, padded, cpu_nested_shape_example, fuse_transform_0213));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_size_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_tensor_size_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_size_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_size_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_strides_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_tensor_strides_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_strides_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_strides_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_from_padded_and_nested_example_out_out_Tensor_padded_Tensor_nt_example_Tensor
XPtrTorchTensor cpp_torch_namespace__nested_from_padded_and_nested_example_out_out_Tensor_padded_Tensor_nt_example_Tensor(XPtrTorchTensor out, XPtrTorchTensor padded, XPtrTorchTensor nt_example);
RcppExport SEXP _torch_cpp_torch_namespace__nested_from_padded_and_nested_example_out_out_Tensor_padded_Tensor_nt_example_Tensor(SEXP outSEXP, SEXP paddedSEXP, SEXP nt_exampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type padded(paddedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nt_example(nt_exampleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_from_padded_and_nested_example_out_out_Tensor_padded_Tensor_nt_example_Tensor(out, padded, nt_example));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_view_from_buffer_copy_out_out_Tensor_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__nested_view_from_buffer_copy_out_out_Tensor_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor nested_size, XPtrTorchTensor nested_strides, XPtrTorchIntArrayRef offsets);
RcppExport SEXP _torch_cpp_torch_namespace__nested_view_from_buffer_copy_out_out_Tensor_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP nested_sizeSEXP, SEXP nested_stridesSEXP, SEXP offsetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nested_size(nested_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type nested_strides(nested_stridesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type offsets(offsetsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_view_from_buffer_copy_out_out_Tensor_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef(out, self, nested_size, nested_strides, offsets));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__trilinear_out_out_Tensor_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__trilinear_out_out_Tensor_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor i1, XPtrTorchTensor i2, XPtrTorchTensor i3, XPtrTorchIntArrayRef expand1, XPtrTorchIntArrayRef expand2, XPtrTorchIntArrayRef expand3, XPtrTorchIntArrayRef sumdim, XPtrTorchint64_t unroll_dim);
RcppExport SEXP _torch_cpp_torch_namespace__trilinear_out_out_Tensor_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(SEXP outSEXP, SEXP i1SEXP, SEXP i2SEXP, SEXP i3SEXP, SEXP expand1SEXP, SEXP expand2SEXP, SEXP expand3SEXP, SEXP sumdimSEXP, SEXP unroll_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type i2(i2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type i3(i3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type expand1(expand1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type expand2(expand2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type expand3(expand3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type sumdim(sumdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type unroll_dim(unroll_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__trilinear_out_out_Tensor_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef(out, i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unique_out_out0_Tensor_out1_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace__unique_out_out0_Tensor_out1_Tensor_self_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchbool sorted, XPtrTorchbool return_inverse);
RcppExport SEXP _torch_cpp_torch_namespace__unique_out_out0_Tensor_out1_Tensor_self_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unique_out_out0_Tensor_out1_Tensor_self_Tensor(out0, out1, self, sorted, return_inverse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_dim_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_unique_dim_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool sorted, XPtrTorchbool return_inverse, XPtrTorchbool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace_unique_dim_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_dim_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t(out0, out1, out2, self, dim, sorted, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace_unique_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchbool return_inverse, XPtrTorchbool return_counts, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unique_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor(out0, out1, out2, self, return_inverse, return_counts, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unique_dim_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace_unique_dim_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool return_inverse, XPtrTorchbool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace_unique_dim_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unique_dim_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t(out0, out1, out2, self, dim, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unique2_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor
Rcpp::List cpp_torch_namespace__unique2_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor self, XPtrTorchbool sorted, XPtrTorchbool return_inverse, XPtrTorchbool return_counts);
RcppExport SEXP _torch_cpp_torch_namespace__unique2_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP selfSEXP, SEXP sortedSEXP, SEXP return_inverseSEXP, SEXP return_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_inverse(return_inverseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type return_counts(return_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unique2_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor(out0, out1, out2, self, sorted, return_inverse, return_counts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__unsafe_view_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__unsafe_view_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__unsafe_view_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__unsafe_view_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_interface_out_out0_Tensor_out1_Tensor_v_Tensor_g_Tensor
Rcpp::List cpp_torch_namespace__weight_norm_interface_out_out0_Tensor_out1_Tensor_v_Tensor_g_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor v, XPtrTorchTensor g, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_interface_out_out0_Tensor_out1_Tensor_v_Tensor_g_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP vSEXP, SEXP gSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type g(gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_interface_out_out0_Tensor_out1_Tensor_v_Tensor_g_Tensor(out0, out1, v, g, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__weight_norm_interface_backward_out_out0_Tensor_out1_Tensor_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t
Rcpp::List cpp_torch_namespace__weight_norm_interface_backward_out_out0_Tensor_out1_Tensor_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor grad_w, XPtrTorchTensor saved_v, XPtrTorchTensor saved_g, XPtrTorchTensor saved_norms, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__weight_norm_interface_backward_out_out0_Tensor_out1_Tensor_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP grad_wSEXP, SEXP saved_vSEXP, SEXP saved_gSEXP, SEXP saved_normsSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_w(grad_wSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_v(saved_vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_g(saved_gSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type saved_norms(saved_normsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__weight_norm_interface_backward_out_out0_Tensor_out1_Tensor_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t(out0, out1, grad_w, saved_v, saved_g, saved_norms, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef_names_DimnameList
XPtrTorchTensor cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef_names_DimnameList(XPtrTorchTensor out, XPtrTorchIntArrayRef size, XPtrTorchOptionalDimnameList names);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef_names_DimnameList(SEXP outSEXP, SEXP sizeSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDimnameList >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef_names_DimnameList(out, size, names));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__efficientzerotensor_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__efficientzerotensor_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__efficientzerotensor_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__efficientzerotensor_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zeros_like_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_zeros_like_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_zeros_like_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zeros_like_out_out_Tensor_self_Tensor(out, self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__standard_gamma_grad_out_out_Tensor_self_Tensor_output_Tensor
XPtrTorchTensor cpp_torch_namespace__standard_gamma_grad_out_out_Tensor_self_Tensor_output_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor output);
RcppExport SEXP _torch_cpp_torch_namespace__standard_gamma_grad_out_out_Tensor_self_Tensor_output_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__standard_gamma_grad_out_out_Tensor_self_Tensor_output_Tensor(out, self, output));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__standard_gamma_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__standard_gamma_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace__standard_gamma_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__standard_gamma_out_out_Tensor_self_Tensor(out, self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__dirichlet_grad_out_out_Tensor_x_Tensor_alpha_Tensor_total_Tensor
XPtrTorchTensor cpp_torch_namespace__dirichlet_grad_out_out_Tensor_x_Tensor_alpha_Tensor_total_Tensor(XPtrTorchTensor out, XPtrTorchTensor x, XPtrTorchTensor alpha, XPtrTorchTensor total);
RcppExport SEXP _torch_cpp_torch_namespace__dirichlet_grad_out_out_Tensor_x_Tensor_alpha_Tensor_total_Tensor(SEXP outSEXP, SEXP xSEXP, SEXP alphaSEXP, SEXP totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type total(totalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__dirichlet_grad_out_out_Tensor_x_Tensor_alpha_Tensor_total_Tensor(out, x, alpha, total));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sample_dirichlet_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sample_dirichlet_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace__sample_dirichlet_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sample_dirichlet_out_out_Tensor_self_Tensor(out, self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_poisson_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_poisson_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_poisson_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_poisson_out_out_Tensor_self_Tensor(out, self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_binomial_out_out_Tensor_count_Tensor_prob_Tensor
XPtrTorchTensor cpp_torch_namespace_binomial_out_out_Tensor_count_Tensor_prob_Tensor(XPtrTorchTensor out, XPtrTorchTensor count, XPtrTorchTensor prob, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_binomial_out_out_Tensor_count_Tensor_prob_Tensor(SEXP outSEXP, SEXP countSEXP, SEXP probSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type count(countSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type prob(probSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_binomial_out_out_Tensor_count_Tensor_prob_Tensor(out, count, prob, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType(out, self, p, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_sum_backward_out_out_Tensor_grad_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_sum_backward_out_out_Tensor_grad_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_sum_backward_out_out_Tensor_grad_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP gradSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_sum_backward_out_out_Tensor_grad_Tensor_self_Tensor_dim_IntArrayRef(out, grad, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_csr_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_csr_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_csr_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_csr_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_csr_prod_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_csr_prod_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim, XPtrTorchbool keepdim, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_csr_prod_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP keepdimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type keepdim(keepdimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_csr_prod_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim, keepdim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__sparse_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(out, self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(out, grad_output, output, dim, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool
XPtrTorchTensor cpp_torch_namespace__sparse_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchbool half_to_float);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP half_to_floatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type half_to_float(half_to_floatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool(out, self, dim, half_to_float));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchindex_int64_t dim, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP dimSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor(out, grad_output, output, dim, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__spdiags_out_out_Tensor_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__spdiags_out_out_Tensor_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor diagonals, XPtrTorchTensor offsets, XPtrTorchIntArrayRef shape, XPtrTorchLayout layout);
RcppExport SEXP _torch_cpp_torch_namespace__spdiags_out_out_Tensor_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef(SEXP outSEXP, SEXP diagonalsSEXP, SEXP offsetsSEXP, SEXP shapeSEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type diagonals(diagonalsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__spdiags_out_out_Tensor_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef(out, diagonals, offsets, shape, layout));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar p, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dtype_ScalarType(out, self, p, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar
XPtrTorchTensor cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar(out, self, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_clone_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_clone_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_clone_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_clone_out_out_Tensor_self_Tensor(out, self, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as_out_out_Tensor_self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_namespace_resize_as_out_out_Tensor_self_Tensor_the_template_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor the_template, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as_out_out_Tensor_self_Tensor_the_template_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP the_templateSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as_out_out_Tensor_self_Tensor_the_template_Tensor(out, self, the_template, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as_self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_namespace_resize_as_self_Tensor_the_template_Tensor(XPtrTorchTensor self, XPtrTorchTensor the_template, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as_self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as_self_Tensor_the_template_Tensor(self, the_template, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as_sparse_out_out_Tensor_self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_namespace_resize_as_sparse_out_out_Tensor_self_Tensor_the_template_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor the_template);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as_sparse_out_out_Tensor_self_Tensor_the_template_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP the_templateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as_sparse_out_out_Tensor_self_Tensor_the_template_Tensor(out, self, the_template));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_resize_as_sparse_self_Tensor_the_template_Tensor
XPtrTorchTensor cpp_torch_namespace_resize_as_sparse_self_Tensor_the_template_Tensor(XPtrTorchTensor self, XPtrTorchTensor the_template);
RcppExport SEXP _torch_cpp_torch_namespace_resize_as_sparse_self_Tensor_the_template_Tensor(SEXP selfSEXP, SEXP the_templateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type the_template(the_templateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_resize_as_sparse_self_Tensor_the_template_Tensor(self, the_template));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zero_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_zero_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_zero_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zero_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_zero_self_Tensor
XPtrTorchTensor cpp_torch_namespace_zero_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_zero_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_zero_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Scalar(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Scalar(out, self, other, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mat1, XPtrTorchTensor mat2, XPtrTorchScalar beta, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP mat1SEXP, SEXP mat2SEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor(out, self, mat1, mat2, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_coo_tensor_out_out_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_sparse_coo_tensor_out_out_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_coo_tensor_out_out_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_coo_tensor_out_out_Tensor_size_IntArrayRef(out, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_with_dims_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_coo_tensor_with_dims_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef(SEXP outSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_with_dims_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef(out, sparse_dim, dense_dim, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor
XPtrTorchTensor cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor(XPtrTorchTensor out, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim, XPtrTorchIntArrayRef size, XPtrTorchIndexTensor indices, XPtrTorchTensor values);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor(SEXP outSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP, SEXP sizeSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor(out, sparse_dim, dense_dim, size, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_resize_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_sparse_resize_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_resize_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_resize_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(out, self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_resize_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_sparse_resize_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_resize_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_resize_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_resize_and_clear_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_sparse_resize_and_clear_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_resize_and_clear_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_resize_and_clear_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(out, self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_resize_and_clear_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_sparse_resize_and_clear_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchint64_t sparse_dim, XPtrTorchint64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_resize_and_clear_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(SEXP selfSEXP, SEXP sizeSEXP, SEXP sparse_dimSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_resize_and_clear_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t(self, size, sparse_dim, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_sparse_mask_out_out_Tensor_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace_sparse_mask_out_out_Tensor_self_Tensor_mask_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace_sparse_mask_out_out_Tensor_self_Tensor_mask_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_sparse_mask_out_out_Tensor_self_Tensor_mask_Tensor(out, self, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__to_dense_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__to_dense_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace__to_dense_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__to_dense_out_out_Tensor_self_Tensor(out, self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__coalesce_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__coalesce_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__coalesce_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__coalesce_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__coalesced_out_out_Tensor_self_Tensor_coalesced_bool
XPtrTorchTensor cpp_torch_namespace__coalesced_out_out_Tensor_self_Tensor_coalesced_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool coalesced);
RcppExport SEXP _torch_cpp_torch_namespace__coalesced_out_out_Tensor_self_Tensor_coalesced_bool(SEXP outSEXP, SEXP selfSEXP, SEXP coalescedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type coalesced(coalescedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__coalesced_out_out_Tensor_self_Tensor_coalesced_bool(out, self, coalesced));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__coalesced_self_Tensor_coalesced_bool
XPtrTorchTensor cpp_torch_namespace__coalesced_self_Tensor_coalesced_bool(XPtrTorchTensor self, XPtrTorchbool coalesced);
RcppExport SEXP _torch_cpp_torch_namespace__coalesced_self_Tensor_coalesced_bool(SEXP selfSEXP, SEXP coalescedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type coalesced(coalescedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__coalesced_self_Tensor_coalesced_bool(self, coalesced));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copy_sparse_to_sparse_out_out_Tensor_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_copy_sparse_to_sparse_out_out_Tensor_self_Tensor_src_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace_copy_sparse_to_sparse_out_out_Tensor_self_Tensor_src_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copy_sparse_to_sparse_out_out_Tensor_self_Tensor_src_Tensor(out, self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_copy_sparse_to_sparse_self_Tensor_src_Tensor
XPtrTorchTensor cpp_torch_namespace_copy_sparse_to_sparse_self_Tensor_src_Tensor(XPtrTorchTensor self, XPtrTorchTensor src, XPtrTorchbool non_blocking);
RcppExport SEXP _torch_cpp_torch_namespace_copy_sparse_to_sparse_self_Tensor_src_Tensor(SEXP selfSEXP, SEXP srcSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_copy_sparse_to_sparse_self_Tensor_src_Tensor(self, src, non_blocking));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor_sparse_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor_sparse_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t sparse_dim);
RcppExport SEXP _torch_cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor_sparse_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP sparse_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type sparse_dim(sparse_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor_sparse_dim_int64_t(out, self, sparse_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchLayout layout, XPtrTorchOptionalIntArrayRef blocksize, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP layoutSEXP, SEXP blocksizeSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor(out, self, layout, blocksize, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_sparse_csr_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_to_sparse_csr_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_to_sparse_csr_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_sparse_csr_out_out_Tensor_self_Tensor(out, self, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_sparse_csc_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_to_sparse_csc_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_to_sparse_csc_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_sparse_csc_out_out_Tensor_self_Tensor(out, self, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_sparse_bsr_out_out_Tensor_self_Tensor_blocksize_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_to_sparse_bsr_out_out_Tensor_self_Tensor_blocksize_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef blocksize, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_to_sparse_bsr_out_out_Tensor_self_Tensor_blocksize_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP blocksizeSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_sparse_bsr_out_out_Tensor_self_Tensor_blocksize_IntArrayRef(out, self, blocksize, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_sparse_bsc_out_out_Tensor_self_Tensor_blocksize_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_to_sparse_bsc_out_out_Tensor_self_Tensor_blocksize_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef blocksize, XPtrTorchoptional_int64_t dense_dim);
RcppExport SEXP _torch_cpp_torch_namespace_to_sparse_bsc_out_out_Tensor_self_Tensor_blocksize_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP blocksizeSEXP, SEXP dense_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type dense_dim(dense_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_sparse_bsc_out_out_Tensor_self_Tensor_blocksize_IntArrayRef(out, self, blocksize, dense_dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_mkldnn_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_to_mkldnn_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchoptional_scalar_type dtype);
RcppExport SEXP _torch_cpp_torch_namespace_to_mkldnn_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_mkldnn_out_out_Tensor_self_Tensor(out, self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_reorder_conv2d_weight_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_reorder_conv2d_weight_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups, XPtrTorchOptionalIntArrayRef input_size);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP, SEXP input_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type input_size(input_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_reorder_conv2d_weight_out_out_Tensor_self_Tensor(out, self, padding, stride, dilation, groups, input_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_reorder_conv3d_weight_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_reorder_conv3d_weight_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef dilation, XPtrTorchint64_t groups);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_reorder_conv3d_weight_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP strideSEXP, SEXP dilationSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_reorder_conv3d_weight_out_out_Tensor_self_Tensor(out, self, padding, stride, dilation, groups));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_dynamic_out_out_Tensor_self_Tensor_dtype_ScalarType_reduce_range_bool
XPtrTorchTensor cpp_torch_namespace_quantize_per_tensor_dynamic_out_out_Tensor_self_Tensor_dtype_ScalarType_reduce_range_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDtype dtype, XPtrTorchbool reduce_range);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_dynamic_out_out_Tensor_self_Tensor_dtype_ScalarType_reduce_range_bool(SEXP outSEXP, SEXP selfSEXP, SEXP dtypeSEXP, SEXP reduce_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type reduce_range(reduce_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_dynamic_out_out_Tensor_self_Tensor_dtype_ScalarType_reduce_range_bool(out, self, dtype, reduce_range));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType(out, self, scale, zero_point, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType(out, self, scale, zero_point, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_quantize_per_tensor_out_out_TensorList_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType
void cpp_torch_namespace_quantize_per_tensor_out_out_TensorList_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType(XPtrTorchTensorList out, XPtrTorchTensorList tensors, XPtrTorchTensor scales, XPtrTorchTensor zero_points, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_tensor_out_out_TensorList_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType(SEXP outSEXP, SEXP tensorsSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    cpp_torch_namespace_quantize_per_tensor_out_out_TensorList_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType(out, tensors, scales, zero_points, dtype);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_quantize_per_channel_out_out_Tensor_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_quantize_per_channel_out_out_Tensor_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor scales, XPtrTorchTensor zero_points, XPtrTorchint64_t axis, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_quantize_per_channel_out_out_Tensor_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP scalesSEXP, SEXP zero_pointsSEXP, SEXP axisSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_points(zero_pointsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_quantize_per_channel_out_out_Tensor_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType(out, self, scales, zero_points, axis, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dequantize_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_dequantize_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_dequantize_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dequantize_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dequantize_out_out_TensorList_tensors_TensorList
void cpp_torch_namespace_dequantize_out_out_TensorList_tensors_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList tensors);
RcppExport SEXP _torch_cpp_torch_namespace_dequantize_out_out_TensorList_tensors_TensorList(SEXP outSEXP, SEXP tensorsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors(tensorsSEXP);
    cpp_torch_namespace_dequantize_out_out_TensorList_tensors_TensorList(out, tensors);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_scales_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_q_per_channel_scales_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_scales_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_scales_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_q_per_channel_zero_points_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_q_per_channel_zero_points_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_q_per_channel_zero_points_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_q_per_channel_zero_points_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_int_repr_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_int_repr_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_int_repr_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_int_repr_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_per_tensor_quantized_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t
XPtrTorchTensor cpp_torch_namespace__make_per_tensor_quantized_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point);
RcppExport SEXP _torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_per_tensor_quantized_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t(out, self, scale, zero_point));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_per_channel_quantized_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t
XPtrTorchTensor cpp_torch_namespace__make_per_channel_quantized_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis);
RcppExport SEXP _torch_cpp_torch_namespace__make_per_channel_quantized_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_per_channel_quantized_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t(out, self, scale, zero_point, axis));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchdouble scale, XPtrTorchint64_t zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t(out0, out1, self, scale, zero_point, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchTensor fake_quant_enabled, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP fake_quant_enabledSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type fake_quant_enabled(fake_quant_enabledSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t(out0, out1, self, scale, zero_point, fake_quant_enabled, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchdouble grad_factor);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP grad_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type grad_factor(grad_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t(out, self, scale, zero_point, quant_min, quant_max, grad_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
Rcpp::List cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max);
RcppExport SEXP _torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(out0, out1, self, scale, zero_point, axis, quant_min, quant_max));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t
XPtrTorchTensor cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchint64_t axis, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchdouble grad_factor);
RcppExport SEXP _torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP axisSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP grad_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type grad_factor(grad_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t(out, self, scale, zero_point, axis, quant_min, quant_max, grad_factor));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_moving_avg_obs_fq_helper_out_out0_Tensor_out1_Tensor_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t
Rcpp::List cpp_torch_namespace__fused_moving_avg_obs_fq_helper_out_out0_Tensor_out1_Tensor_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor self, XPtrTorchTensor observer_on, XPtrTorchTensor fake_quant_on, XPtrTorchTensor running_min, XPtrTorchTensor running_max, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchdouble averaging_const, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchint64_t ch_axis, XPtrTorchbool per_row_fake_quant, XPtrTorchbool symmetric_quant);
RcppExport SEXP _torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_out_out0_Tensor_out1_Tensor_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(SEXP out0SEXP, SEXP out1SEXP, SEXP selfSEXP, SEXP observer_onSEXP, SEXP fake_quant_onSEXP, SEXP running_minSEXP, SEXP running_maxSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP averaging_constSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP ch_axisSEXP, SEXP per_row_fake_quantSEXP, SEXP symmetric_quantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type observer_on(observer_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type fake_quant_on(fake_quant_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_min(running_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_max(running_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type averaging_const(averaging_constSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ch_axis(ch_axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type per_row_fake_quant(per_row_fake_quantSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type symmetric_quant(symmetric_quantSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_moving_avg_obs_fq_helper_out_out0_Tensor_out1_Tensor_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(out0, out1, self, observer_on, fake_quant_on, running_min, running_max, scale, zero_point, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_moving_avg_obs_fq_helper_functional_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t
Rcpp::List cpp_torch_namespace__fused_moving_avg_obs_fq_helper_functional_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(XPtrTorchTensor self, XPtrTorchTensor observer_on, XPtrTorchTensor fake_quant_on, XPtrTorchTensor running_min, XPtrTorchTensor running_max, XPtrTorchTensor scale, XPtrTorchTensor zero_point, XPtrTorchdouble averaging_const, XPtrTorchint64_t quant_min, XPtrTorchint64_t quant_max, XPtrTorchint64_t ch_axis, XPtrTorchbool per_row_fake_quant, XPtrTorchbool symmetric_quant);
RcppExport SEXP _torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_functional_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(SEXP selfSEXP, SEXP observer_onSEXP, SEXP fake_quant_onSEXP, SEXP running_minSEXP, SEXP running_maxSEXP, SEXP scaleSEXP, SEXP zero_pointSEXP, SEXP averaging_constSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP ch_axisSEXP, SEXP per_row_fake_quantSEXP, SEXP symmetric_quantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type observer_on(observer_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type fake_quant_on(fake_quant_onSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_min(running_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type running_max(running_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type zero_point(zero_pointSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type averaging_const(averaging_constSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type ch_axis(ch_axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type per_row_fake_quant(per_row_fake_quantSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type symmetric_quant(symmetric_quantSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_moving_avg_obs_fq_helper_functional_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t(self, observer_on, fake_quant_on, running_min, running_max, scale, zero_point, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__to_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__to_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool non_blocking, XPtrTorchoptional_memory_format memory_format);
RcppExport SEXP _torch_cpp_torch_namespace__to_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP non_blockingSEXP, SEXP memory_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type non_blocking(non_blockingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_memory_format >::type memory_format(memory_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__to_copy_out_out_Tensor_self_Tensor(out, self, non_blocking, memory_format));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__lstm_mps_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
Rcpp::List cpp_torch_namespace__lstm_mps_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor out4, XPtrTorchTensor out5, XPtrTorchTensor input, XPtrTorchTensorList hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__lstm_mps_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP out4SEXP, SEXP out5SEXP, SEXP inputSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out4(out4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out5(out5SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__lstm_mps_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(out0, out1, out2, out3, out4, out5, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lstm_mps_backward_out_out0_Tensor_out1_TensorList_out2_TensorList_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool
void cpp_torch_namespace_lstm_mps_backward_out_out0_Tensor_out1_TensorList_out2_TensorList_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(XPtrTorchTensor out0, XPtrTorchTensorList out1, XPtrTorchTensorList out2, XPtrTorchTensor grad_y, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchTensor z_state, XPtrTorchTensor cell_state_fwd, XPtrTorchTensor input, XPtrTorchTensor layersOutputs, XPtrTorchTensorList hx, XPtrTorchTensorList params, XPtrTorchbool has_biases, XPtrTorchint64_t num_layers, XPtrTorchdouble dropout, XPtrTorchbool train, XPtrTorchbool bidirectional, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace_lstm_mps_backward_out_out0_Tensor_out1_TensorList_out2_TensorList_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_ySEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP z_stateSEXP, SEXP cell_state_fwdSEXP, SEXP inputSEXP, SEXP layersOutputsSEXP, SEXP hxSEXP, SEXP paramsSEXP, SEXP has_biasesSEXP, SEXP num_layersSEXP, SEXP dropoutSEXP, SEXP trainSEXP, SEXP bidirectionalSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_y(grad_ySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type z_state(z_stateSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cell_state_fwd(cell_state_fwdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type layersOutputs(layersOutputsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_biases(has_biasesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_layers(num_layersSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout(dropoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type train(trainSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type bidirectional(bidirectionalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    cpp_torch_namespace_lstm_mps_backward_out_out0_Tensor_out1_TensorList_out2_TensorList_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool(out0, out1, out2, grad_y, grad_hy, grad_cy, z_state, cell_state_fwd, input, layersOutputs, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_out_out0_Tensor_out1_Tensor_out2_Tensor_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_out_out0_Tensor_out1_Tensor_out2_Tensor_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor input_gates, XPtrTorchTensor hidden_gates, XPtrTorchTensor cx, XPtrTorchOptionalTensor input_bias, XPtrTorchOptionalTensor hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_out_out0_Tensor_out1_Tensor_out2_Tensor_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP cxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_out_out0_Tensor_out1_Tensor_out2_Tensor_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor(out0, out1, out2, input_gates, hidden_gates, cx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchOptionalTensor grad_hy, XPtrTorchOptionalTensor grad_cy, XPtrTorchTensor cx, XPtrTorchTensor cy, XPtrTorchTensor workspace, XPtrTorchbool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_hySEXP, SEXP grad_cySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_cy(grad_cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type cy(cySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool(out0, out1, out2, grad_hy, grad_cy, cx, cy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_gru_cell_out_out0_Tensor_out1_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor
Rcpp::List cpp_torch_namespace__thnn_fused_gru_cell_out_out0_Tensor_out1_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input_gates, XPtrTorchTensor hidden_gates, XPtrTorchTensor hx, XPtrTorchOptionalTensor input_bias, XPtrTorchOptionalTensor hidden_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_gru_cell_out_out0_Tensor_out1_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP input_gatesSEXP, SEXP hidden_gatesSEXP, SEXP hxSEXP, SEXP input_biasSEXP, SEXP hidden_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input_gates(input_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hidden_gates(hidden_gatesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type input_bias(input_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type hidden_bias(hidden_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_gru_cell_out_out0_Tensor_out1_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor(out0, out1, input_gates, hidden_gates, hx, input_bias, hidden_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__thnn_fused_gru_cell_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_grad_hy_Tensor_workspace_Tensor_has_bias_bool
Rcpp::List cpp_torch_namespace__thnn_fused_gru_cell_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_grad_hy_Tensor_workspace_Tensor_has_bias_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor out4, XPtrTorchTensor grad_hy, XPtrTorchTensor workspace, XPtrTorchbool has_bias);
RcppExport SEXP _torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_grad_hy_Tensor_workspace_Tensor_has_bias_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP out4SEXP, SEXP grad_hySEXP, SEXP workspaceSEXP, SEXP has_biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out4(out4SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_hy(grad_hySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type has_bias(has_biasSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__thnn_fused_gru_cell_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_grad_hy_Tensor_workspace_Tensor_has_bias_bool(out0, out1, out2, out3, out4, grad_hy, workspace, has_bias));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__pack_padded_sequence_out_out0_Tensor_out1_Tensor_input_Tensor_lengths_Tensor_batch_first_bool
Rcpp::List cpp_torch_namespace__pack_padded_sequence_out_out0_Tensor_out1_Tensor_input_Tensor_lengths_Tensor_batch_first_bool(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor input, XPtrTorchTensor lengths, XPtrTorchbool batch_first);
RcppExport SEXP _torch_cpp_torch_namespace__pack_padded_sequence_out_out0_Tensor_out1_Tensor_input_Tensor_lengths_Tensor_batch_first_bool(SEXP out0SEXP, SEXP out1SEXP, SEXP inputSEXP, SEXP lengthsSEXP, SEXP batch_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type batch_first(batch_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__pack_padded_sequence_out_out0_Tensor_out1_Tensor_input_Tensor_lengths_Tensor_batch_first_bool(out0, out1, input, lengths, batch_first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage
XPtrTorchTensor cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage(XPtrTorchTensor out, XPtrTorchTensor self, Rcpp::XPtr<XPtrTorch> source);
RcppExport SEXP _torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage(SEXP outSEXP, SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage(out, self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_self_Tensor_source_Storage
XPtrTorchTensor cpp_torch_namespace_set_self_Tensor_source_Storage(XPtrTorchTensor self, Rcpp::XPtr<XPtrTorch> source);
RcppExport SEXP _torch_cpp_torch_namespace_set_self_Tensor_source_Storage(SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_self_Tensor_source_Storage(self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, Rcpp::XPtr<XPtrTorch> source, XPtrTorchint64_t storage_offset, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sourceSEXP, SEXP storage_offsetSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type storage_offset(storage_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(out, self, source, storage_offset, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_set_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(XPtrTorchTensor self, Rcpp::XPtr<XPtrTorch> source, XPtrTorchint64_t storage_offset, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace_set_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(SEXP selfSEXP, SEXP sourceSEXP, SEXP storage_offsetSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type storage_offset(storage_offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef(self, source, storage_offset, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Tensor(out, self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_self_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_set_self_Tensor_source_Tensor(XPtrTorchTensor self, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_set_self_Tensor_source_Tensor(SEXP selfSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_self_Tensor_source_Tensor(self, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_set_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_set_self_Tensor
XPtrTorchTensor cpp_torch_namespace_set_self_Tensor(XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_set_self_Tensor(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_set_self_Tensor(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lift_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lift_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lift_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lift_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_lift_fresh_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_lift_fresh_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_lift_fresh_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_lift_fresh_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Scalar(out, self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Tensor(out, self, mask, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_masked_scatter_out_out_Tensor_self_Tensor_mask_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_masked_scatter_out_out_Tensor_self_Tensor_mask_Tensor_source_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchTensor source);
RcppExport SEXP _torch_cpp_torch_namespace_masked_scatter_out_out_Tensor_self_Tensor_mask_Tensor_source_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_masked_scatter_out_out_Tensor_self_Tensor_mask_Tensor_source_Tensor(out, self, mask, source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_softmax_out_out_Tensor_self_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace__masked_softmax_out_out_Tensor_self_Tensor_mask_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor mask, XPtrTorchoptional_index_int64_t dim, XPtrTorchoptional_int64_t mask_type);
RcppExport SEXP _torch_cpp_torch_namespace__masked_softmax_out_out_Tensor_self_Tensor_mask_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP maskSEXP, SEXP dimSEXP, SEXP mask_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type mask_type(mask_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_softmax_out_out_Tensor_self_Tensor_mask_Tensor(out, self, mask, dim, mask_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__masked_softmax_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_mask_Tensor
XPtrTorchTensor cpp_torch_namespace__masked_softmax_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_mask_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor output, XPtrTorchTensor mask, XPtrTorchoptional_index_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace__masked_softmax_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_mask_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP outputSEXP, SEXP maskSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_index_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__masked_softmax_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_mask_Tensor(out, grad_output, output, mask, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_put_out_out_Tensor_self_Tensor_index_Tensor_source_Tensor
XPtrTorchTensor cpp_torch_namespace_put_out_out_Tensor_self_Tensor_index_Tensor_source_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexTensor index, XPtrTorchTensor source, XPtrTorchbool accumulate);
RcppExport SEXP _torch_cpp_torch_namespace_put_out_out_Tensor_self_Tensor_index_Tensor_source_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP indexSEXP, SEXP sourceSEXP, SEXP accumulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type accumulate(accumulateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_put_out_out_Tensor_self_Tensor_index_Tensor_source_Tensor(out, self, index, source, accumulate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar
XPtrTorchTensor cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar(out, self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Tensor
XPtrTorchTensor cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchIndexTensor index, XPtrTorchTensor value);
RcppExport SEXP _torch_cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Tensor(out, self, dim, index, value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Scalar
XPtrTorchTensor cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Scalar(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchScalar other);
RcppExport SEXP _torch_cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Scalar(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_random_out_out_Tensor_self_Tensor_from_int64_t_to_int64_t
XPtrTorchTensor cpp_torch_namespace_random_out_out_Tensor_self_Tensor_from_int64_t_to_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t from, XPtrTorchoptional_int64_t to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor_from_int64_t_to_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_random_out_out_Tensor_self_Tensor_from_int64_t_to_int64_t(out, self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_random_self_Tensor_from_int64_t_to_int64_t
XPtrTorchTensor cpp_torch_namespace_random_self_Tensor_from_int64_t_to_int64_t(XPtrTorchTensor self, XPtrTorchint64_t from, XPtrTorchoptional_int64_t to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_random_self_Tensor_from_int64_t_to_int64_t(SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_random_self_Tensor_from_int64_t_to_int64_t(self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_random_out_out_Tensor_self_Tensor_to_int64_t
XPtrTorchTensor cpp_torch_namespace_random_out_out_Tensor_self_Tensor_to_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor_to_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_random_out_out_Tensor_self_Tensor_to_int64_t(out, self, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_random_self_Tensor_to_int64_t
XPtrTorchTensor cpp_torch_namespace_random_self_Tensor_to_int64_t(XPtrTorchTensor self, XPtrTorchint64_t to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_random_self_Tensor_to_int64_t(SEXP selfSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_random_self_Tensor_to_int64_t(self, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_random_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_random_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_random_out_out_Tensor_self_Tensor(out, self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_random_self_Tensor
XPtrTorchTensor cpp_torch_namespace_random_self_Tensor(XPtrTorchTensor self, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_random_self_Tensor(SEXP selfSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_random_self_Tensor(self, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_uniform_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_uniform_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble from, XPtrTorchdouble to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_uniform_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_uniform_out_out_Tensor_self_Tensor(out, self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_uniform_self_Tensor
XPtrTorchTensor cpp_torch_namespace_uniform_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble from, XPtrTorchdouble to, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_uniform_self_Tensor(SEXP selfSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type from(fromSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type to(toSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_uniform_self_Tensor(self, from, to, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cauchy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cauchy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble median, XPtrTorchdouble sigma, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_cauchy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP medianSEXP, SEXP sigmaSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type median(medianSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cauchy_out_out_Tensor_self_Tensor(out, self, median, sigma, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_cauchy_self_Tensor
XPtrTorchTensor cpp_torch_namespace_cauchy_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble median, XPtrTorchdouble sigma, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_cauchy_self_Tensor(SEXP selfSEXP, SEXP medianSEXP, SEXP sigmaSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type median(medianSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_cauchy_self_Tensor(self, median, sigma, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_normal_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log_normal_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_log_normal_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_normal_out_out_Tensor_self_Tensor(out, self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_log_normal_self_Tensor
XPtrTorchTensor cpp_torch_namespace_log_normal_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_log_normal_self_Tensor(SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_log_normal_self_Tensor(self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exponential_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_exponential_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble lambd, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_exponential_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP lambdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lambd(lambdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exponential_out_out_Tensor_self_Tensor(out, self, lambd, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_exponential_self_Tensor
XPtrTorchTensor cpp_torch_namespace_exponential_self_Tensor(XPtrTorchTensor self, XPtrTorchdouble lambd, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_exponential_self_Tensor(SEXP selfSEXP, SEXP lambdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lambd(lambdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_exponential_self_Tensor(self, lambd, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_geometric_out_out_Tensor_self_Tensor_p_double
XPtrTorchTensor cpp_torch_namespace_geometric_out_out_Tensor_self_Tensor_p_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_geometric_out_out_Tensor_self_Tensor_p_double(SEXP outSEXP, SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_geometric_out_out_Tensor_self_Tensor_p_double(out, self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_geometric_self_Tensor_p_double
XPtrTorchTensor cpp_torch_namespace_geometric_self_Tensor_p_double(XPtrTorchTensor self, XPtrTorchdouble p, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_geometric_self_Tensor_p_double(SEXP selfSEXP, SEXP pSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type p(pSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_geometric_self_Tensor_p_double(self, p, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_tril_indices_out_out_Tensor_row_int64_t_col_int64_t
XPtrTorchTensor cpp_torch_namespace_tril_indices_out_out_Tensor_row_int64_t_col_int64_t(XPtrTorchTensor out, XPtrTorchint64_t row, XPtrTorchint64_t col, XPtrTorchint64_t offset);
RcppExport SEXP _torch_cpp_torch_namespace_tril_indices_out_out_Tensor_row_int64_t_col_int64_t(SEXP outSEXP, SEXP rowSEXP, SEXP colSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type row(rowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type col(colSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_tril_indices_out_out_Tensor_row_int64_t_col_int64_t(out, row, col, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_triu_indices_out_out_Tensor_row_int64_t_col_int64_t
XPtrTorchTensor cpp_torch_namespace_triu_indices_out_out_Tensor_row_int64_t_col_int64_t(XPtrTorchTensor out, XPtrTorchint64_t row, XPtrTorchint64_t col, XPtrTorchint64_t offset);
RcppExport SEXP _torch_cpp_torch_namespace_triu_indices_out_out_Tensor_row_int64_t_col_int64_t(SEXP outSEXP, SEXP rowSEXP, SEXP colSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type row(rowSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type col(colSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_triu_indices_out_out_Tensor_row_int64_t_col_int64_t(out, row, col, offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_trace_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_trace_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_trace_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_trace_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__cholesky_solve_helper_out_out_Tensor_self_Tensor_A_Tensor_upper_bool
XPtrTorchTensor cpp_torch_namespace__cholesky_solve_helper_out_out_Tensor_self_Tensor_A_Tensor_upper_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor A, XPtrTorchbool upper);
RcppExport SEXP _torch_cpp_torch_namespace__cholesky_solve_helper_out_out_Tensor_self_Tensor_A_Tensor_upper_bool(SEXP outSEXP, SEXP selfSEXP, SEXP ASEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type A(ASEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__cholesky_solve_helper_out_out_Tensor_self_Tensor_A_Tensor_upper_bool(out, self, A, upper));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_dist_out_out_Tensor_self_Tensor_other_Tensor
XPtrTorchTensor cpp_torch_namespace_dist_out_out_Tensor_self_Tensor_other_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor other, XPtrTorchScalar p);
RcppExport SEXP _torch_cpp_torch_namespace_dist_out_out_Tensor_self_Tensor_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_dist_out_out_Tensor_self_Tensor_other_Tensor(out, self, other, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__histogramdd_bin_edges_out_out_TensorList_self_Tensor_bins_IntArrayRef
void cpp_torch_namespace__histogramdd_bin_edges_out_out_TensorList_self_Tensor_bins_IntArrayRef(XPtrTorchTensorList out, XPtrTorchTensor self, XPtrTorchIntArrayRef bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace__histogramdd_bin_edges_out_out_TensorList_self_Tensor_bins_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    cpp_torch_namespace__histogramdd_bin_edges_out_out_TensorList_self_Tensor_bins_IntArrayRef(out, self, bins, range, weight, density);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__histogramdd_from_bin_cts_out_out_Tensor_self_Tensor_bins_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__histogramdd_from_bin_cts_out_out_Tensor_self_Tensor_bins_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef bins, XPtrTorchOptionalDoubleArrayRef range, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace__histogramdd_from_bin_cts_out_out_Tensor_self_Tensor_bins_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP rangeSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__histogramdd_from_bin_cts_out_out_Tensor_self_Tensor_bins_IntArrayRef(out, self, bins, range, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__histogramdd_from_bin_tensors_out_out_Tensor_self_Tensor_bins_TensorList
XPtrTorchTensor cpp_torch_namespace__histogramdd_from_bin_tensors_out_out_Tensor_self_Tensor_bins_TensorList(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensorList bins, XPtrTorchOptionalTensor weight, XPtrTorchbool density);
RcppExport SEXP _torch_cpp_torch_namespace__histogramdd_from_bin_tensors_out_out_Tensor_self_Tensor_bins_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP binsSEXP, SEXP weightSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__histogramdd_from_bin_tensors_out_out_Tensor_self_Tensor_bins_TensorList(out, self, bins, weight, density));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_remainder_out_out_Tensor_self_Scalar_other_Tensor
XPtrTorchTensor cpp_torch_namespace_remainder_out_out_Tensor_self_Scalar_other_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor other);
RcppExport SEXP _torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Scalar_other_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_remainder_out_out_Tensor_self_Scalar_other_Tensor(out, self, other));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_argsort_out_out_Tensor_self_Tensor_stable_bool
XPtrTorchTensor cpp_torch_namespace_argsort_out_out_Tensor_self_Tensor_stable_bool(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool stable, XPtrTorchindex_int64_t dim, XPtrTorchbool descending);
RcppExport SEXP _torch_cpp_torch_namespace_argsort_out_out_Tensor_self_Tensor_stable_bool(SEXP outSEXP, SEXP selfSEXP, SEXP stableSEXP, SEXP dimSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type stable(stableSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_argsort_out_out_Tensor_self_Tensor_stable_bool(out, self, stable, dim, descending));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unfold_backward_out_out_Tensor_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_namespace_unfold_backward_out_out_Tensor_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad_in, XPtrTorchIntArrayRef input_sizes, XPtrTorchindex_int64_t dim, XPtrTorchint64_t size, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_unfold_backward_out_out_Tensor_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t(SEXP outSEXP, SEXP grad_inSEXP, SEXP input_sizesSEXP, SEXP dimSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_in(grad_inSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type input_sizes(input_sizesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unfold_backward_out_out_Tensor_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t(out, grad_in, input_sizes, dim, size, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_normal_out_out_Tensor_self_Tensor_mean_double_std_double
XPtrTorchTensor cpp_torch_namespace_normal_out_out_Tensor_self_Tensor_mean_double_std_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble mean, XPtrTorchdouble std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_torch_namespace_normal_out_out_Tensor_self_Tensor_mean_double_std_double(SEXP outSEXP, SEXP selfSEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_normal_out_out_Tensor_self_Tensor_mean_double_std_double(out, self, mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_out_out_TensorList_self_TensorList_found_inf_Tensor_inv_scale_Tensor
void cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_out_out_TensorList_self_TensorList_found_inf_Tensor_inv_scale_Tensor(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensor found_inf, XPtrTorchTensor inv_scale);
RcppExport SEXP _torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_out_out_TensorList_self_TensorList_found_inf_Tensor_inv_scale_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP found_infSEXP, SEXP inv_scaleSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type inv_scale(inv_scaleSEXP);
    cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_out_out_TensorList_self_TensorList_found_inf_Tensor_inv_scale_Tensor(out, self, found_inf, inv_scale);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_self_TensorList_found_inf_Tensor_inv_scale_Tensor
Rcpp::List cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_self_TensorList_found_inf_Tensor_inv_scale_Tensor(XPtrTorchTensorList self, XPtrTorchTensor found_inf, XPtrTorchTensor inv_scale);
RcppExport SEXP _torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_self_TensorList_found_inf_Tensor_inv_scale_Tensor(SEXP selfSEXP, SEXP found_infSEXP, SEXP inv_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type inv_scale(inv_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_self_TensorList_found_inf_Tensor_inv_scale_Tensor(self, found_inf, inv_scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__amp_update_scale_out_out_Tensor_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t
XPtrTorchTensor cpp_torch_namespace__amp_update_scale_out_out_Tensor_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor growth_tracker, XPtrTorchTensor found_inf, XPtrTorchdouble scale_growth_factor, XPtrTorchdouble scale_backoff_factor, XPtrTorchint64_t growth_interval);
RcppExport SEXP _torch_cpp_torch_namespace__amp_update_scale_out_out_Tensor_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP growth_trackerSEXP, SEXP found_infSEXP, SEXP scale_growth_factorSEXP, SEXP scale_backoff_factorSEXP, SEXP growth_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type growth_tracker(growth_trackerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale_growth_factor(scale_growth_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale_backoff_factor(scale_backoff_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type growth_interval(growth_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__amp_update_scale_out_out_Tensor_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(out, self, growth_tracker, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__amp_update_scale_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t
Rcpp::List cpp_torch_namespace__amp_update_scale_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(XPtrTorchTensor self, XPtrTorchTensor growth_tracker, XPtrTorchTensor found_inf, XPtrTorchdouble scale_growth_factor, XPtrTorchdouble scale_backoff_factor, XPtrTorchint64_t growth_interval);
RcppExport SEXP _torch_cpp_torch_namespace__amp_update_scale_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(SEXP selfSEXP, SEXP growth_trackerSEXP, SEXP found_infSEXP, SEXP scale_growth_factorSEXP, SEXP scale_backoff_factorSEXP, SEXP growth_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type growth_tracker(growth_trackerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type found_inf(found_infSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale_growth_factor(scale_growth_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type scale_backoff_factor(scale_backoff_factorSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type growth_interval(growth_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__amp_update_scale_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t(self, growth_tracker, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalar_Scalar
void cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalar_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar scalar);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalar_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type scalar(scalarSEXP);
    cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalar_Scalar(out, self, scalar);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_other_TensorList(out, self, other, alpha);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other, XPtrTorchScalar alpha);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type alpha(alphaSEXP);
    cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_other_TensorList(out, self, other, alpha);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_other_TensorList(out, self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_other_TensorList(out, self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_other_TensorList(out, self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_other_TensorList(out, self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_other_TensorList(out, self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_other_TensorList
void cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_other_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList other);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_other_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type other(otherSEXP);
    cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_other_TensorList(out, self, other);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar(out, self, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_exp_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_exp_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_exp_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_exp_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_zero_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_zero_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_zero_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_zero_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_zero_self_TensorList
XPtrTorchTensorList cpp_torch_namespace__foreach_zero_self_TensorList(XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_zero_self_TensorList(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foreach_zero_self_TensorList(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foreach_sqrt_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_sqrt_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sqrt_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sqrt_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_abs_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_abs_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_abs_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_abs_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_acos_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_acos_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_acos_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_acos_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_asin_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_asin_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_asin_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_asin_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_atan_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_atan_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_atan_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_atan_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_ceil_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_ceil_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_ceil_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_ceil_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_cos_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_cos_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_cos_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_cos_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_cosh_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_cosh_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_cosh_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_cosh_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_erf_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_erf_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_erf_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_erf_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_erfc_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_erfc_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_erfc_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_erfc_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_expm1_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_expm1_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_expm1_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_expm1_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_floor_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_floor_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_floor_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_floor_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_log_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log10_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_log10_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log10_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log10_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log1p_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_log1p_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log1p_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log1p_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_log2_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_log2_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_log2_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_log2_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_neg_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_neg_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_neg_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_neg_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_tan_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_tan_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_tan_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_tan_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_tanh_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_tanh_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_tanh_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_tanh_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sin_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_sin_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sin_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sin_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sinh_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_sinh_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sinh_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sinh_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_round_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_round_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_round_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_round_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_lgamma_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_lgamma_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lgamma_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_lgamma_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_frac_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_frac_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_frac_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_frac_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_reciprocal_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_reciprocal_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_reciprocal_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_reciprocal_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_sigmoid_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_sigmoid_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_sigmoid_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_sigmoid_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_trunc_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_trunc_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_trunc_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    cpp_torch_namespace__foreach_trunc_out_out_TensorList_self_TensorList(out, self);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList
void cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList(out, self, tensor1, tensor2, value);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList
void cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchScalar value);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type value(valueSEXP);
    cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList(out, self, tensor1, tensor2, value);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(out, self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor
void cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchTensor scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(out, self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar
void cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchvector_Scalar scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchvector_Scalar >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar(out, self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor
void cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensor1, XPtrTorchTensorList tensor2, XPtrTorchTensor scalars);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP tensor1SEXP, SEXP tensor2SEXP, SEXP scalarsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor1(tensor1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensor2(tensor2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type scalars(scalarsSEXP);
    cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor(out, self, tensor1, tensor2, scalars);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_norm_out_out_TensorList_self_TensorList
void cpp_torch_namespace__foreach_norm_out_out_TensorList_self_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchScalar ord);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_norm_out_out_TensorList_self_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type ord(ordSEXP);
    cpp_torch_namespace__foreach_norm_out_out_TensorList_self_TensorList(out, self, ord);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weights_TensorList
void cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weights_TensorList(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensors1, XPtrTorchTensorList weights);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weights_TensorList(SEXP outSEXP, SEXP selfSEXP, SEXP tensors1SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors1(tensors1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type weights(weightsSEXP);
    cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weights_TensorList(out, self, tensors1, weights);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weight_Scalar
void cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weight_Scalar(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList tensors1, XPtrTorchScalar weight);
RcppExport SEXP _torch_cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weight_Scalar(SEXP outSEXP, SEXP selfSEXP, SEXP tensors1SEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type tensors1(tensors1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type weight(weightSEXP);
    cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weight_Scalar(out, self, tensors1, weight);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace_bucketize_out_out_Tensor_self_Scalar_boundaries_Tensor
XPtrTorchTensor cpp_torch_namespace_bucketize_out_out_Tensor_self_Scalar_boundaries_Tensor(XPtrTorchTensor out, XPtrTorchScalar self, XPtrTorchTensor boundaries, XPtrTorchbool out_int32, XPtrTorchbool right);
RcppExport SEXP _torch_cpp_torch_namespace_bucketize_out_out_Tensor_self_Scalar_boundaries_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP boundariesSEXP, SEXP out_int32SEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type boundaries(boundariesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_bucketize_out_out_Tensor_self_Scalar_boundaries_Tensor(out, self, boundaries, out_int32, right));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Scalar
XPtrTorchTensor cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Scalar(XPtrTorchTensor out, XPtrTorchTensor sorted_sequence, XPtrTorchScalar self, XPtrTorchbool out_int32, XPtrTorchbool right, XPtrTorchoptional_string_view side, XPtrTorchOptionalTensor sorter);
RcppExport SEXP _torch_cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Scalar(SEXP outSEXP, SEXP sorted_sequenceSEXP, SEXP selfSEXP, SEXP out_int32SEXP, SEXP rightSEXP, SEXP sideSEXP, SEXP sorterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type sorted_sequence(sorted_sequenceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type out_int32(out_int32SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type right(rightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_string_view >::type side(sideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type sorter(sorterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Scalar(out, sorted_sequence, self, out_int32, right, side, sorter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_jvp_out_out_Tensor_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_glu_jvp_out_out_Tensor_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor glu, XPtrTorchTensor x, XPtrTorchTensor dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_jvp_out_out_Tensor_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t(SEXP outSEXP, SEXP gluSEXP, SEXP xSEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type glu(gluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_jvp_out_out_Tensor_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t(out, glu, x, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_glu_backward_jvp_out_out_Tensor_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_glu_backward_jvp_out_out_Tensor_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor grad_x, XPtrTorchTensor grad_glu, XPtrTorchTensor x, XPtrTorchTensor dgrad_glu, XPtrTorchTensor dx, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_glu_backward_jvp_out_out_Tensor_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t(SEXP outSEXP, SEXP grad_xSEXP, SEXP grad_gluSEXP, SEXP xSEXP, SEXP dgrad_gluSEXP, SEXP dxSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_x(grad_xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_glu(grad_gluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dgrad_glu(dgrad_gluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_glu_backward_jvp_out_out_Tensor_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t(out, grad_x, grad_glu, x, dgrad_glu, dx, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_hardswish_backward_out_out_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_hardswish_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_hardswish_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_hardswish_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(out, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_rrelu_with_noise_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool
XPtrTorchTensor cpp_torch_namespace_rrelu_with_noise_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor noise, XPtrTorchScalar lower, XPtrTorchScalar upper, XPtrTorchbool training, XPtrTorchbool self_is_result);
RcppExport SEXP _torch_cpp_torch_namespace_rrelu_with_noise_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool(SEXP outSEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP noiseSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP trainingSEXP, SEXP self_is_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScalar >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type training(trainingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type self_is_result(self_is_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_rrelu_with_noise_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool(out, grad_output, self, noise, lower, upper, training, self_is_result));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(out, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(out, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef(out, self, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__adaptive_avg_pool3d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__adaptive_avg_pool3d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor grad_output, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__adaptive_avg_pool3d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(SEXP outSEXP, SEXP grad_outputSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__adaptive_avg_pool3d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor(out, grad_output, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__slow_conv2d_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3
Rcpp::List cpp_torch_namespace__slow_conv2d_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor grad_output, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, std::vector<bool> output_mask);
RcppExport SEXP _torch_cpp_torch_namespace__slow_conv2d_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP grad_outputSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP output_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad_output(grad_outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type output_mask(output_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__slow_conv2d_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3(out0, out1, out2, grad_output, self, weight, kernel_size, stride, padding, output_mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_conv_depthwise3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_conv_depthwise3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_conv_depthwise3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_conv_depthwise3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_dilated2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slow_conv_dilated3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_slow_conv_dilated3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchTensor weight, XPtrTorchIntArrayRef kernel_size, XPtrTorchOptionalTensor bias, XPtrTorchIntArrayRef stride, XPtrTorchIntArrayRef padding, XPtrTorchIntArrayRef dilation);
RcppExport SEXP _torch_cpp_torch_namespace_slow_conv_dilated3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP weightSEXP, SEXP kernel_sizeSEXP, SEXP biasSEXP, SEXP strideSEXP, SEXP paddingSEXP, SEXP dilationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type dilation(dilationSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slow_conv_dilated3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef(out, self, weight, kernel_size, bias, stride, padding, dilation));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_isinf_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_isinf_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_isinf_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_isinf_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_linalg_matrix_exp_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_linalg_matrix_exp_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_linalg_matrix_exp_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_linalg_matrix_exp_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__test_optional_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor values, XPtrTorchOptionalIntArrayRef addends);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef(SEXP outSEXP, SEXP valuesSEXP, SEXP addendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type addends(addendsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef(out, values, addends));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_filled_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__test_optional_filled_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor values, XPtrTorchOptionalIntArrayRef addends);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_filled_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef(SEXP outSEXP, SEXP valuesSEXP, SEXP addendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type addends(addendsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_filled_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef(out, values, addends));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_optional_floatlist_out_out_Tensor_values_Tensor_addends_ArrayRefdouble
XPtrTorchTensor cpp_torch_namespace__test_optional_floatlist_out_out_Tensor_values_Tensor_addends_ArrayRefdouble(XPtrTorchTensor out, XPtrTorchTensor values, XPtrTorchOptionalDoubleArrayRef addends);
RcppExport SEXP _torch_cpp_torch_namespace__test_optional_floatlist_out_out_Tensor_values_Tensor_addends_ArrayRefdouble(SEXP outSEXP, SEXP valuesSEXP, SEXP addendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDoubleArrayRef >::type addends(addendsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_optional_floatlist_out_out_Tensor_values_Tensor_addends_ArrayRefdouble(out, values, addends));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_warn_in_autograd_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_warn_in_autograd_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_warn_in_autograd_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_warn_in_autograd_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_autograd_multiple_dispatch_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_autograd_multiple_dispatch_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_autograd_multiple_dispatch_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_autograd_multiple_dispatch_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_segment_reduce_out_out_Tensor_data_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace_segment_reduce_out_out_Tensor_data_Tensor_reduce_c10string_view(XPtrTorchTensor out, XPtrTorchTensor data, XPtrTorchstring_view reduce, XPtrTorchOptionalTensor lengths, XPtrTorchIndexTensor indices, XPtrTorchOptionalTensor offsets, XPtrTorchint64_t axis, XPtrTorchbool unsafe, XPtrTorchoptional_scalar initial);
RcppExport SEXP _torch_cpp_torch_namespace_segment_reduce_out_out_Tensor_data_Tensor_reduce_c10string_view(SEXP outSEXP, SEXP dataSEXP, SEXP reduceSEXP, SEXP lengthsSEXP, SEXP indicesSEXP, SEXP offsetsSEXP, SEXP axisSEXP, SEXP unsafeSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexTensor >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type unsafe(unsafeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_segment_reduce_out_out_Tensor_data_Tensor_reduce_c10string_view(out, data, reduce, lengths, indices, offsets, axis, unsafe, initial));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__segment_reduce_backward_out_out_Tensor_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view
XPtrTorchTensor cpp_torch_namespace__segment_reduce_backward_out_out_Tensor_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view(XPtrTorchTensor out, XPtrTorchTensor grad, XPtrTorchTensor output, XPtrTorchTensor data, XPtrTorchstring_view reduce, XPtrTorchOptionalTensor lengths, XPtrTorchOptionalTensor offsets, XPtrTorchint64_t axis, XPtrTorchoptional_scalar initial);
RcppExport SEXP _torch_cpp_torch_namespace__segment_reduce_backward_out_out_Tensor_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view(SEXP outSEXP, SEXP gradSEXP, SEXP outputSEXP, SEXP dataSEXP, SEXP reduceSEXP, SEXP lengthsSEXP, SEXP offsetsSEXP, SEXP axisSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type output(outputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type data(dataSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring_view >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__segment_reduce_backward_out_out_Tensor_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view(out, grad, output, data, reduce, lengths, offsets, axis, initial));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__nested_tensor_from_tensor_list_out_out_Tensor_list_TensorList
XPtrTorchTensor cpp_torch_namespace__nested_tensor_from_tensor_list_out_out_Tensor_list_TensorList(XPtrTorchTensor out, XPtrTorchTensorList list, XPtrTorchoptional_scalar_type dtype, XPtrTorchLayout layout, XPtrTorchDevice device, XPtrTorchoptional_bool pin_memory);
RcppExport SEXP _torch_cpp_torch_namespace__nested_tensor_from_tensor_list_out_out_Tensor_list_TensorList(SEXP outSEXP, SEXP listSEXP, SEXP dtypeSEXP, SEXP layoutSEXP, SEXP deviceSEXP, SEXP pin_memorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type list(listSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_scalar_type >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout(layoutSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_bool >::type pin_memory(pin_memorySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__nested_tensor_from_tensor_list_out_out_Tensor_list_TensorList(out, list, dtype, layout, device, pin_memory));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fw_primal_copy_out_out_Tensor_self_Tensor_level_int64_t
XPtrTorchTensor cpp_torch_namespace__fw_primal_copy_out_out_Tensor_self_Tensor_level_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__fw_primal_copy_out_out_Tensor_self_Tensor_level_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fw_primal_copy_out_out_Tensor_self_Tensor_level_int64_t(out, self, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__make_dual_copy_out_out_Tensor_primal_Tensor_tangent_Tensor_level_int64_t
XPtrTorchTensor cpp_torch_namespace__make_dual_copy_out_out_Tensor_primal_Tensor_tangent_Tensor_level_int64_t(XPtrTorchTensor out, XPtrTorchTensor primal, XPtrTorchTensor tangent, XPtrTorchint64_t level);
RcppExport SEXP _torch_cpp_torch_namespace__make_dual_copy_out_out_Tensor_primal_Tensor_tangent_Tensor_level_int64_t(SEXP outSEXP, SEXP primalSEXP, SEXP tangentSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type primal(primalSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type tangent(tangentSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__make_dual_copy_out_out_Tensor_primal_Tensor_tangent_Tensor_level_int64_t(out, primal, tangent, level));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_as_real_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_view_as_real_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_view_as_real_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_as_real_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_as_complex_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_view_as_complex_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_view_as_complex_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_as_complex_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__conj_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__conj_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__conj_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__conj_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__neg_view_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__neg_view_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__neg_view_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__neg_view_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_as_strided_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_as_strided_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride, XPtrTorchoptional_int64_t storage_offset);
RcppExport SEXP _torch_cpp_torch_namespace_as_strided_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP, SEXP storage_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type storage_offset(storage_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_as_strided_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(out, self, size, stride, storage_offset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__sparse_broadcast_to_copy_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__sparse_broadcast_to_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace__sparse_broadcast_to_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__sparse_broadcast_to_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_diagonal_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_diagonal_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t offset, XPtrTorchindex_int64_t dim1, XPtrTorchindex_int64_t dim2);
RcppExport SEXP _torch_cpp_torch_namespace_diagonal_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP offsetSEXP, SEXP dim1SEXP, SEXP dim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim2(dim2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_diagonal_copy_out_out_Tensor_self_Tensor(out, self, offset, dim1, dim2));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_expand_copy_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_expand_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchbool implicit);
RcppExport SEXP _torch_cpp_torch_namespace_expand_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP implicitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type implicit(implicitSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_expand_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size, implicit));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_permute_copy_out_out_Tensor_self_Tensor_dims_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_permute_copy_out_out_Tensor_self_Tensor_dims_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dims);
RcppExport SEXP _torch_cpp_torch_namespace_permute_copy_out_out_Tensor_self_Tensor_dims_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_permute_copy_out_out_Tensor_self_Tensor_dims_IntArrayRef(out, self, dims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__reshape_alias_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef
XPtrTorchTensor cpp_torch_namespace__reshape_alias_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size, XPtrTorchIntArrayRef stride);
RcppExport SEXP _torch_cpp_torch_namespace__reshape_alias_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP, SEXP strideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type stride(strideSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__reshape_alias_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef(out, self, size, stride));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_select_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_int64_t
XPtrTorchTensor cpp_torch_namespace_select_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchindex_int64_t index);
RcppExport SEXP _torch_cpp_torch_namespace_select_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_select_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_int64_t(out, self, dim, index));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_detach_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_detach_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_detach_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_detach_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_slice_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_slice_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim, XPtrTorchoptional_int64_t start, XPtrTorchoptional_int64_t end, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_slice_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP, SEXP startSEXP, SEXP endSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_slice_copy_out_out_Tensor_self_Tensor(out, self, dim, start, end, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIndexIntArrayRef dim);
RcppExport SEXP _torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIndexIntArrayRef >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_IntArrayRef(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_t_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_t_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_t_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_t_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_transpose_copy_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t
XPtrTorchTensor cpp_torch_namespace_transpose_copy_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim0, XPtrTorchindex_int64_t dim1);
RcppExport SEXP _torch_cpp_torch_namespace_transpose_copy_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dim0SEXP, SEXP dim1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim0(dim0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim1(dim1SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_transpose_copy_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t(out, self, dim0, dim1));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unsqueeze_copy_out_out_Tensor_self_Tensor_dim_int64_t
XPtrTorchTensor cpp_torch_namespace_unsqueeze_copy_out_out_Tensor_self_Tensor_dim_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchindex_int64_t dim);
RcppExport SEXP _torch_cpp_torch_namespace_unsqueeze_copy_out_out_Tensor_self_Tensor_dim_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchindex_int64_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unsqueeze_copy_out_out_Tensor_self_Tensor_dim_int64_t(out, self, dim));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__indices_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__indices_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__indices_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__indices_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__values_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__values_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace__values_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__values_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_indices_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_indices_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_indices_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_indices_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_values_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_values_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_values_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_values_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_crow_indices_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_crow_indices_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_crow_indices_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_crow_indices_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_col_indices_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_col_indices_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_col_indices_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_col_indices_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_ccol_indices_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_ccol_indices_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_ccol_indices_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_ccol_indices_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_row_indices_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_row_indices_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_row_indices_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_row_indices_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_size_IntArrayRef
XPtrTorchTensor cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchIntArrayRef size);
RcppExport SEXP _torch_cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(SEXP outSEXP, SEXP selfSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_size_IntArrayRef(out, self, size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_dtype_ScalarType
XPtrTorchTensor cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_dtype_ScalarType(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchDtype dtype);
RcppExport SEXP _torch_cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_dtype_ScalarType(SEXP outSEXP, SEXP selfSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDtype >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_dtype_ScalarType(out, self, dtype));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_unfold_copy_out_out_Tensor_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t
XPtrTorchTensor cpp_torch_namespace_unfold_copy_out_out_Tensor_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchint64_t dimension, XPtrTorchint64_t size, XPtrTorchint64_t step);
RcppExport SEXP _torch_cpp_torch_namespace_unfold_copy_out_out_Tensor_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(SEXP outSEXP, SEXP selfSEXP, SEXP dimensionSEXP, SEXP sizeSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_unfold_copy_out_out_Tensor_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t(out, self, dimension, size, step));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_alias_copy_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace_alias_copy_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self);
RcppExport SEXP _torch_cpp_torch_namespace_alias_copy_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_alias_copy_out_out_Tensor_self_Tensor(out, self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace_to_padded_tensor_out_out_Tensor_self_Tensor_padding_double
XPtrTorchTensor cpp_torch_namespace_to_padded_tensor_out_out_Tensor_self_Tensor_padding_double(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchdouble padding, XPtrTorchOptionalIntArrayRef output_size);
RcppExport SEXP _torch_cpp_torch_namespace_to_padded_tensor_out_out_Tensor_self_Tensor_padding_double(SEXP outSEXP, SEXP selfSEXP, SEXP paddingSEXP, SEXP output_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalIntArrayRef >::type output_size(output_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace_to_padded_tensor_out_out_Tensor_self_Tensor_padding_double(out, self, padding, output_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__transformer_encoder_layer_fwd_out_out_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor
XPtrTorchTensor cpp_torch_namespace__transformer_encoder_layer_fwd_out_out_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(XPtrTorchTensor out, XPtrTorchTensor src, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_heads, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchbool use_gelu, XPtrTorchbool norm_first, XPtrTorchdouble eps, XPtrTorchTensor norm_weight_1, XPtrTorchTensor norm_bias_1, XPtrTorchTensor norm_weight_2, XPtrTorchTensor norm_bias_2, XPtrTorchTensor ffn_weight_1, XPtrTorchTensor ffn_bias_1, XPtrTorchTensor ffn_weight_2, XPtrTorchTensor ffn_bias_2, XPtrTorchOptionalTensor mask, XPtrTorchoptional_int64_t mask_type);
RcppExport SEXP _torch_cpp_torch_namespace__transformer_encoder_layer_fwd_out_out_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(SEXP outSEXP, SEXP srcSEXP, SEXP embed_dimSEXP, SEXP num_headsSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP use_geluSEXP, SEXP norm_firstSEXP, SEXP epsSEXP, SEXP norm_weight_1SEXP, SEXP norm_bias_1SEXP, SEXP norm_weight_2SEXP, SEXP norm_bias_2SEXP, SEXP ffn_weight_1SEXP, SEXP ffn_bias_1SEXP, SEXP ffn_weight_2SEXP, SEXP ffn_bias_2SEXP, SEXP maskSEXP, SEXP mask_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_heads(num_headsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type norm_first(norm_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_1(norm_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_1(norm_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_2(norm_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_2(norm_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_1(ffn_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_1(ffn_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_2(ffn_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_2(ffn_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type mask_type(mask_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__transformer_encoder_layer_fwd_out_out_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(out, src, embed_dim, num_heads, qkv_weight, qkv_bias, proj_weight, proj_bias, use_gelu, norm_first, eps, norm_weight_1, norm_bias_1, norm_weight_2, norm_bias_2, ffn_weight_1, ffn_bias_1, ffn_weight_2, ffn_bias_2, mask, mask_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_multi_head_attention_out_out0_Tensor_out1_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor
Rcpp::List cpp_torch_namespace__native_multi_head_attention_out_out0_Tensor_out1_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_head, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchOptionalTensor mask, XPtrTorchbool need_weights, XPtrTorchbool average_attn_weights, XPtrTorchoptional_int64_t mask_type);
RcppExport SEXP _torch_cpp_torch_namespace__native_multi_head_attention_out_out0_Tensor_out1_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP embed_dimSEXP, SEXP num_headSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP maskSEXP, SEXP need_weightsSEXP, SEXP average_attn_weightsSEXP, SEXP mask_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_head(num_headSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type need_weights(need_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type average_attn_weights(average_attn_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type mask_type(mask_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_multi_head_attention_out_out0_Tensor_out1_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(out0, out1, query, key, value, embed_dim, num_head, qkv_weight, qkv_bias, proj_weight, proj_bias, mask, need_weights, average_attn_weights, mask_type));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__triton_scaled_dot_attention_out_out_Tensor_q_Tensor_k_Tensor_v_Tensor
XPtrTorchTensor cpp_torch_namespace__triton_scaled_dot_attention_out_out_Tensor_q_Tensor_k_Tensor_v_Tensor(XPtrTorchTensor out, XPtrTorchTensor q, XPtrTorchTensor k, XPtrTorchTensor v, XPtrTorchdouble dropout_p);
RcppExport SEXP _torch_cpp_torch_namespace__triton_scaled_dot_attention_out_out_Tensor_q_Tensor_k_Tensor_v_Tensor(SEXP outSEXP, SEXP qSEXP, SEXP kSEXP, SEXP vSEXP, SEXP dropout_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type q(qSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type k(kSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type dropout_p(dropout_pSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__triton_scaled_dot_attention_out_out_Tensor_q_Tensor_k_Tensor_v_Tensor(out, q, k, v, dropout_p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__triton_multi_head_attention_out_out_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor
XPtrTorchTensor cpp_torch_namespace__triton_multi_head_attention_out_out_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(XPtrTorchTensor out, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_head, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchOptionalTensor mask);
RcppExport SEXP _torch_cpp_torch_namespace__triton_multi_head_attention_out_out_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(SEXP outSEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP embed_dimSEXP, SEXP num_headSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_head(num_headSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__triton_multi_head_attention_out_out_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(out, query, key, value, embed_dim, num_head, qkv_weight, qkv_bias, proj_weight, proj_bias, mask));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__transformer_decoder_only_layer_fwd_out_out0_Tensor_out1_Tensor_out2_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor
Rcpp::List cpp_torch_namespace__transformer_decoder_only_layer_fwd_out_out0_Tensor_out1_Tensor_out2_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor src, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_heads, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchbool use_gelu, XPtrTorchbool norm_first, XPtrTorchdouble eps, XPtrTorchTensor norm_weight_1, XPtrTorchTensor norm_bias_1, XPtrTorchTensor norm_weight_2, XPtrTorchTensor norm_bias_2, XPtrTorchTensor ffn_weight_1, XPtrTorchTensor ffn_bias_1, XPtrTorchTensor ffn_weight_2, XPtrTorchTensor ffn_bias_2, XPtrTorchOptionalTensor mask, XPtrTorchOptionalTensor incr_key, XPtrTorchOptionalTensor incr_value);
RcppExport SEXP _torch_cpp_torch_namespace__transformer_decoder_only_layer_fwd_out_out0_Tensor_out1_Tensor_out2_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP srcSEXP, SEXP embed_dimSEXP, SEXP num_headsSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP use_geluSEXP, SEXP norm_firstSEXP, SEXP epsSEXP, SEXP norm_weight_1SEXP, SEXP norm_bias_1SEXP, SEXP norm_weight_2SEXP, SEXP norm_bias_2SEXP, SEXP ffn_weight_1SEXP, SEXP ffn_bias_1SEXP, SEXP ffn_weight_2SEXP, SEXP ffn_bias_2SEXP, SEXP maskSEXP, SEXP incr_keySEXP, SEXP incr_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type src(srcSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_heads(num_headsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type use_gelu(use_geluSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type norm_first(norm_firstSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_1(norm_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_1(norm_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_weight_2(norm_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type norm_bias_2(norm_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_1(ffn_weight_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_1(ffn_bias_1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_weight_2(ffn_weight_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type ffn_bias_2(ffn_bias_2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_key(incr_keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_value(incr_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__transformer_decoder_only_layer_fwd_out_out0_Tensor_out1_Tensor_out2_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor(out0, out1, out2, src, embed_dim, num_heads, qkv_weight, qkv_bias, proj_weight, proj_bias, use_gelu, norm_first, eps, norm_weight_1, norm_bias_1, norm_weight_2, norm_bias_2, ffn_weight_1, ffn_bias_1, ffn_weight_2, ffn_bias_2, mask, incr_key, incr_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__native_decoder_only_multi_head_attention_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor
Rcpp::List cpp_torch_namespace__native_decoder_only_multi_head_attention_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(XPtrTorchTensor out0, XPtrTorchTensor out1, XPtrTorchTensor out2, XPtrTorchTensor out3, XPtrTorchTensor query, XPtrTorchTensor key, XPtrTorchTensor value, XPtrTorchint64_t embed_dim, XPtrTorchint64_t num_head, XPtrTorchTensor qkv_weight, XPtrTorchTensor qkv_bias, XPtrTorchTensor proj_weight, XPtrTorchTensor proj_bias, XPtrTorchOptionalTensor mask, XPtrTorchOptionalTensor incr_key, XPtrTorchOptionalTensor incr_value, XPtrTorchbool need_weights, XPtrTorchbool average_attn_weights);
RcppExport SEXP _torch_cpp_torch_namespace__native_decoder_only_multi_head_attention_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(SEXP out0SEXP, SEXP out1SEXP, SEXP out2SEXP, SEXP out3SEXP, SEXP querySEXP, SEXP keySEXP, SEXP valueSEXP, SEXP embed_dimSEXP, SEXP num_headSEXP, SEXP qkv_weightSEXP, SEXP qkv_biasSEXP, SEXP proj_weightSEXP, SEXP proj_biasSEXP, SEXP maskSEXP, SEXP incr_keySEXP, SEXP incr_valueSEXP, SEXP need_weightsSEXP, SEXP average_attn_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out0(out0SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out1(out1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out2(out2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out3(out3SEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type key(keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type value(valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type embed_dim(embed_dimSEXP);
    Rcpp::traits::input_parameter< XPtrTorchint64_t >::type num_head(num_headSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_weight(qkv_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type qkv_bias(qkv_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_weight(proj_weightSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type proj_bias(proj_biasSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_key(incr_keySEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type incr_value(incr_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type need_weights(need_weightsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type average_attn_weights(average_attn_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__native_decoder_only_multi_head_attention_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor(out0, out1, out2, out3, query, key, value, embed_dim, num_head, qkv_weight, qkv_bias, proj_weight, proj_bias, mask, incr_key, incr_value, need_weights, average_attn_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__foobar_out_out_Tensor_self_Tensor
XPtrTorchTensor cpp_torch_namespace__foobar_out_out_Tensor_self_Tensor(XPtrTorchTensor out, XPtrTorchTensor self, XPtrTorchbool arg1, XPtrTorchbool arg2, XPtrTorchbool arg3);
RcppExport SEXP _torch_cpp_torch_namespace__foobar_out_out_Tensor_self_Tensor(SEXP outSEXP, SEXP selfSEXP, SEXP arg1SEXP, SEXP arg2SEXP, SEXP arg3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type arg1(arg1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type arg2(arg2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type arg3(arg3SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__foobar_out_out_Tensor_self_Tensor(out, self, arg1, arg2, arg3));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_adam_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool
void cpp_torch_namespace__fused_adam_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList grads, XPtrTorchTensorList exp_avgs, XPtrTorchTensorList exp_avg_sqs, XPtrTorchTensorList max_exp_avg_sqs, XPtrTorchTensorList state_steps, XPtrTorchdouble lr, XPtrTorchdouble beta1, XPtrTorchdouble beta2, XPtrTorchdouble weight_decay, XPtrTorchdouble eps, XPtrTorchbool amsgrad, XPtrTorchbool maximize, XPtrTorchOptionalTensor grad_scale, XPtrTorchOptionalTensor found_inf);
RcppExport SEXP _torch_cpp_torch_namespace__fused_adam_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(SEXP outSEXP, SEXP selfSEXP, SEXP gradsSEXP, SEXP exp_avgsSEXP, SEXP exp_avg_sqsSEXP, SEXP max_exp_avg_sqsSEXP, SEXP state_stepsSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP weight_decaySEXP, SEXP epsSEXP, SEXP amsgradSEXP, SEXP maximizeSEXP, SEXP grad_scaleSEXP, SEXP found_infSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avgs(exp_avgsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avg_sqs(exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type max_exp_avg_sqs(max_exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type state_steps(state_stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type weight_decay(weight_decaySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type maximize(maximizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_scale(grad_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type found_inf(found_infSEXP);
    cpp_torch_namespace__fused_adam_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(out, self, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, lr, beta1, beta2, weight_decay, eps, amsgrad, maximize, grad_scale, found_inf);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__fused_adam_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool
Rcpp::List cpp_torch_namespace__fused_adam_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(XPtrTorchTensorList self, XPtrTorchTensorList grads, XPtrTorchTensorList exp_avgs, XPtrTorchTensorList exp_avg_sqs, XPtrTorchTensorList max_exp_avg_sqs, XPtrTorchTensorList state_steps, XPtrTorchdouble lr, XPtrTorchdouble beta1, XPtrTorchdouble beta2, XPtrTorchdouble weight_decay, XPtrTorchdouble eps, XPtrTorchbool amsgrad, XPtrTorchbool maximize, XPtrTorchOptionalTensor grad_scale, XPtrTorchOptionalTensor found_inf);
RcppExport SEXP _torch_cpp_torch_namespace__fused_adam_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(SEXP selfSEXP, SEXP gradsSEXP, SEXP exp_avgsSEXP, SEXP exp_avg_sqsSEXP, SEXP max_exp_avg_sqsSEXP, SEXP state_stepsSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP weight_decaySEXP, SEXP epsSEXP, SEXP amsgradSEXP, SEXP maximizeSEXP, SEXP grad_scaleSEXP, SEXP found_infSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avgs(exp_avgsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avg_sqs(exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type max_exp_avg_sqs(max_exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type state_steps(state_stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type weight_decay(weight_decaySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type maximize(maximizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_scale(grad_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type found_inf(found_infSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_adam_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(self, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, lr, beta1, beta2, weight_decay, eps, amsgrad, maximize, grad_scale, found_inf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__fused_adamw_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool
void cpp_torch_namespace__fused_adamw_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(XPtrTorchTensorList out, XPtrTorchTensorList self, XPtrTorchTensorList grads, XPtrTorchTensorList exp_avgs, XPtrTorchTensorList exp_avg_sqs, XPtrTorchTensorList max_exp_avg_sqs, XPtrTorchTensorList state_steps, XPtrTorchdouble lr, XPtrTorchdouble beta1, XPtrTorchdouble beta2, XPtrTorchdouble weight_decay, XPtrTorchdouble eps, XPtrTorchbool amsgrad, XPtrTorchbool maximize, XPtrTorchOptionalTensor grad_scale, XPtrTorchOptionalTensor found_inf);
RcppExport SEXP _torch_cpp_torch_namespace__fused_adamw_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(SEXP outSEXP, SEXP selfSEXP, SEXP gradsSEXP, SEXP exp_avgsSEXP, SEXP exp_avg_sqsSEXP, SEXP max_exp_avg_sqsSEXP, SEXP state_stepsSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP weight_decaySEXP, SEXP epsSEXP, SEXP amsgradSEXP, SEXP maximizeSEXP, SEXP grad_scaleSEXP, SEXP found_infSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type out(outSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avgs(exp_avgsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avg_sqs(exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type max_exp_avg_sqs(max_exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type state_steps(state_stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type weight_decay(weight_decaySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type maximize(maximizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_scale(grad_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type found_inf(found_infSEXP);
    cpp_torch_namespace__fused_adamw_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(out, self, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, lr, beta1, beta2, weight_decay, eps, amsgrad, maximize, grad_scale, found_inf);
    return R_NilValue;
END_RCPP
}
// cpp_torch_namespace__fused_adamw_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool
Rcpp::List cpp_torch_namespace__fused_adamw_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(XPtrTorchTensorList self, XPtrTorchTensorList grads, XPtrTorchTensorList exp_avgs, XPtrTorchTensorList exp_avg_sqs, XPtrTorchTensorList max_exp_avg_sqs, XPtrTorchTensorList state_steps, XPtrTorchdouble lr, XPtrTorchdouble beta1, XPtrTorchdouble beta2, XPtrTorchdouble weight_decay, XPtrTorchdouble eps, XPtrTorchbool amsgrad, XPtrTorchbool maximize, XPtrTorchOptionalTensor grad_scale, XPtrTorchOptionalTensor found_inf);
RcppExport SEXP _torch_cpp_torch_namespace__fused_adamw_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(SEXP selfSEXP, SEXP gradsSEXP, SEXP exp_avgsSEXP, SEXP exp_avg_sqsSEXP, SEXP max_exp_avg_sqsSEXP, SEXP state_stepsSEXP, SEXP lrSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP weight_decaySEXP, SEXP epsSEXP, SEXP amsgradSEXP, SEXP maximizeSEXP, SEXP grad_scaleSEXP, SEXP found_infSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avgs(exp_avgsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type exp_avg_sqs(exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type max_exp_avg_sqs(max_exp_avg_sqsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type state_steps(state_stepsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type weight_decay(weight_decaySEXP);
    Rcpp::traits::input_parameter< XPtrTorchdouble >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< XPtrTorchbool >::type maximize(maximizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type grad_scale(grad_scaleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalTensor >::type found_inf(found_infSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__fused_adamw_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool(self, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, lr, beta1, beta2, weight_decay, eps, amsgrad, maximize, grad_scale, found_inf));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_generator
XPtrTorchGenerator cpp_torch_generator();
RcppExport SEXP _torch_cpp_torch_generator() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_generator());
    return rcpp_result_gen;
END_RCPP
}
// cpp_generator_current_seed
std::string cpp_generator_current_seed(XPtrTorchGenerator generator);
RcppExport SEXP _torch_cpp_generator_current_seed(SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_generator_current_seed(generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_generator_set_current_seed
void cpp_generator_set_current_seed(XPtrTorchGenerator generator, std::string seed);
RcppExport SEXP _torch_cpp_generator_set_current_seed(SEXP generatorSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< std::string >::type seed(seedSEXP);
    cpp_generator_set_current_seed(generator, seed);
    return R_NilValue;
END_RCPP
}
// cpp_torch_manual_seed
void cpp_torch_manual_seed(std::string seed);
RcppExport SEXP _torch_cpp_torch_manual_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seed(seedSEXP);
    cpp_torch_manual_seed(seed);
    return R_NilValue;
END_RCPP
}
// cpp_torch_get_rng_state
torch::Tensor cpp_torch_get_rng_state();
RcppExport SEXP _torch_cpp_torch_get_rng_state() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_get_rng_state());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_set_rng_state
void cpp_torch_set_rng_state(torch::Tensor state);
RcppExport SEXP _torch_cpp_torch_set_rng_state(SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type state(stateSEXP);
    cpp_torch_set_rng_state(state);
    return R_NilValue;
END_RCPP
}
// cpp_torch_cuda_get_rng_state
torch::Tensor cpp_torch_cuda_get_rng_state(int device);
RcppExport SEXP _torch_cpp_torch_cuda_get_rng_state(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_cuda_get_rng_state(device));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_cuda_set_rng_state
void cpp_torch_cuda_set_rng_state(int device, torch::Tensor state);
RcppExport SEXP _torch_cpp_torch_cuda_set_rng_state(SEXP deviceSEXP, SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< torch::Tensor >::type state(stateSEXP);
    cpp_torch_cuda_set_rng_state(device, state);
    return R_NilValue;
END_RCPP
}
// enquos0
std::vector<Rcpp::RObject> enquos0(Rcpp::Environment env);
RcppExport SEXP _torch_enquos0(SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(enquos0(env));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_slices
std::vector<Rcpp::RObject> evaluate_slices(std::vector<Rcpp::RObject> quosures, Rcpp::List mask);
RcppExport SEXP _torch_evaluate_slices(SEXP quosuresSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Rcpp::RObject> >::type quosures(quosuresSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_slices(quosures, mask));
    return rcpp_result_gen;
END_RCPP
}
// Tensor_slice
XPtrTorchTensor Tensor_slice(XPtrTorchTensor self, Rcpp::Environment e, bool drop, Rcpp::List mask);
RcppExport SEXP _torch_Tensor_slice(SEXP selfSEXP, SEXP eSEXP, SEXP dropSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type e(eSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(Tensor_slice(self, e, drop, mask));
    return rcpp_result_gen;
END_RCPP
}
// Tensor_slice_put
void Tensor_slice_put(Rcpp::XPtr<XPtrTorchTensor> self, Rcpp::Environment e, SEXP rhs, Rcpp::List mask);
RcppExport SEXP _torch_Tensor_slice_put(SEXP selfSEXP, SEXP eSEXP, SEXP rhsSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type e(eSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mask(maskSEXP);
    Tensor_slice_put(self, e, rhs, mask);
    return R_NilValue;
END_RCPP
}
// ivalue_test_function
XPtrTorchIValue ivalue_test_function(XPtrTorchIValue x);
RcppExport SEXP _torch_ivalue_test_function(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchIValue >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ivalue_test_function(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_compile
XPtrTorchCompilationUnit cpp_jit_compile(XPtrTorchstring source);
RcppExport SEXP _torch_cpp_jit_compile(SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchstring >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_compile(source));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_compile_list_methods
XPtrTorchvector_string cpp_jit_compile_list_methods(XPtrTorchCompilationUnit cu);
RcppExport SEXP _torch_cpp_jit_compile_list_methods(SEXP cuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchCompilationUnit >::type cu(cuSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_compile_list_methods(cu));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_compile_get_function
SEXP cpp_jit_compile_get_function(SEXP cu, XPtrTorchstring name);
RcppExport SEXP _torch_cpp_jit_compile_get_function(SEXP cuSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cu(cuSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_compile_get_function(cu, name));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_all_operators
torch::vector::string cpp_jit_all_operators();
RcppExport SEXP _torch_cpp_jit_all_operators() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_jit_all_operators());
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_operator_info
torch::jit::FunctionSchema cpp_jit_operator_info(torch::string name);
RcppExport SEXP _torch_cpp_jit_operator_info(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_operator_info(name));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_all_schemas_for
torch::jit::FunctionSchemaList cpp_jit_all_schemas_for(torch::string name);
RcppExport SEXP _torch_cpp_jit_all_schemas_for(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_all_schemas_for(name));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_execute
torch::jit::Stack cpp_jit_execute(torch::string name, torch::jit::Stack stack);
RcppExport SEXP _torch_cpp_jit_execute(SEXP nameSEXP, SEXP stackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< torch::jit::Stack >::type stack(stackSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_execute(name, stack));
    return rcpp_result_gen;
END_RCPP
}
// function_schema_name
torch::string function_schema_name(XPtrTorchFunctionSchema schema);
RcppExport SEXP _torch_function_schema_name(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchFunctionSchema >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(function_schema_name(schema));
    return rcpp_result_gen;
END_RCPP
}
// function_schema_arguments
torch::jit::ArgumentList function_schema_arguments(XPtrTorchFunctionSchema schema);
RcppExport SEXP _torch_function_schema_arguments(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchFunctionSchema >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(function_schema_arguments(schema));
    return rcpp_result_gen;
END_RCPP
}
// function_schema_argument_name
torch::string function_schema_argument_name(XPtrTorchFunctionSchemaArgument arg);
RcppExport SEXP _torch_function_schema_argument_name(SEXP argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchFunctionSchemaArgument >::type arg(argSEXP);
    rcpp_result_gen = Rcpp::wrap(function_schema_argument_name(arg));
    return rcpp_result_gen;
END_RCPP
}
// function_schema_argument_type
torch::string function_schema_argument_type(XPtrTorchFunctionSchemaArgument arg);
RcppExport SEXP _torch_function_schema_argument_type(SEXP argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchFunctionSchemaArgument >::type arg(argSEXP);
    rcpp_result_gen = Rcpp::wrap(function_schema_argument_type(arg));
    return rcpp_result_gen;
END_RCPP
}
// function_schema_returns
torch::jit::ArgumentList function_schema_returns(XPtrTorchFunctionSchema schema);
RcppExport SEXP _torch_function_schema_returns(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchFunctionSchema >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(function_schema_returns(schema));
    return rcpp_result_gen;
END_RCPP
}
// function_schema_return_type
torch::string function_schema_return_type(XPtrTorchFunctionSchemaArgument ret);
RcppExport SEXP _torch_function_schema_return_type(SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchFunctionSchemaArgument >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(function_schema_return_type(ret));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lantern_configure
void cpp_lantern_configure(int log);
RcppExport SEXP _torch_cpp_lantern_configure(SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type log(logSEXP);
    cpp_lantern_configure(log);
    return R_NilValue;
END_RCPP
}
// cpp_lantern_version
std::string cpp_lantern_version();
RcppExport SEXP _torch_cpp_lantern_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_lantern_version());
    return rcpp_result_gen;
END_RCPP
}
// cpp_lantern_init
void cpp_lantern_init(std::string path);
RcppExport SEXP _torch_cpp_lantern_init(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    cpp_lantern_init(path);
    return R_NilValue;
END_RCPP
}
// cpp_lantern_test
void cpp_lantern_test();
RcppExport SEXP _torch_cpp_lantern_test() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cpp_lantern_test();
    return R_NilValue;
END_RCPP
}
// cpp_lantern_has_error
bool cpp_lantern_has_error();
RcppExport SEXP _torch_cpp_lantern_has_error() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_lantern_has_error());
    return rcpp_result_gen;
END_RCPP
}
// cpp_lantern_last_error
std::string cpp_lantern_last_error();
RcppExport SEXP _torch_cpp_lantern_last_error() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_lantern_last_error());
    return rcpp_result_gen;
END_RCPP
}
// cpp_lantern_error_clear
void cpp_lantern_error_clear();
RcppExport SEXP _torch_cpp_lantern_error_clear() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cpp_lantern_error_clear();
    return R_NilValue;
END_RCPP
}
// cpp_layout_to_string
std::string cpp_layout_to_string(XPtrTorchLayout layout_ptr);
RcppExport SEXP _torch_cpp_layout_to_string(SEXP layout_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchLayout >::type layout_ptr(layout_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_layout_to_string(layout_ptr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_strided
XPtrTorchLayout cpp_torch_strided();
RcppExport SEXP _torch_cpp_torch_strided() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_strided());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_sparse
XPtrTorchLayout cpp_torch_sparse();
RcppExport SEXP _torch_cpp_torch_sparse() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_sparse());
    return rcpp_result_gen;
END_RCPP
}
// cpp_memory_format_to_string
std::string cpp_memory_format_to_string(Rcpp::XPtr<XPtrTorchMemoryFormat> x);
RcppExport SEXP _torch_cpp_memory_format_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchMemoryFormat> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_memory_format_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_contiguous_format
XPtrTorchMemoryFormat cpp_torch_contiguous_format();
RcppExport SEXP _torch_cpp_torch_contiguous_format() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_contiguous_format());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_preserve_format
XPtrTorchMemoryFormat cpp_torch_preserve_format();
RcppExport SEXP _torch_cpp_torch_preserve_format() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_preserve_format());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_channels_last_format
XPtrTorchMemoryFormat cpp_torch_channels_last_format();
RcppExport SEXP _torch_cpp_torch_channels_last_format() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_channels_last_format());
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_rnn_pack_padded_sequence
Rcpp::XPtr<XPtrTorchPackedSequence> cpp_nn_utils_rnn_pack_padded_sequence(Rcpp::XPtr<XPtrTorchTensor> input, Rcpp::XPtr<XPtrTorchTensor> lengths, bool batch_first, bool enforce_sorted);
RcppExport SEXP _torch_cpp_nn_utils_rnn_pack_padded_sequence(SEXP inputSEXP, SEXP lengthsSEXP, SEXP batch_firstSEXP, SEXP enforce_sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< bool >::type enforce_sorted(enforce_sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_rnn_pack_padded_sequence(input, lengths, batch_first, enforce_sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_pack_sequence
Rcpp::XPtr<XPtrTorchPackedSequence> cpp_nn_utils_pack_sequence(XPtrTorchTensorList sequence, bool enforce_sorted);
RcppExport SEXP _torch_cpp_nn_utils_pack_sequence(SEXP sequenceSEXP, SEXP enforce_sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< bool >::type enforce_sorted(enforce_sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_pack_sequence(sequence, enforce_sorted));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_pad_packed_sequence
XPtrTorchTensorList cpp_nn_utils_pad_packed_sequence(Rcpp::XPtr<XPtrTorchPackedSequence> sequence, bool batch_first, double padding_value, XPtrTorchoptional_int64_t total_length);
RcppExport SEXP _torch_cpp_nn_utils_pad_packed_sequence(SEXP sequenceSEXP, SEXP batch_firstSEXP, SEXP padding_valueSEXP, SEXP total_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchPackedSequence> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< double >::type padding_value(padding_valueSEXP);
    Rcpp::traits::input_parameter< XPtrTorchoptional_int64_t >::type total_length(total_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_pad_packed_sequence(sequence, batch_first, padding_value, total_length));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_pad_sequence
XPtrTorchTensor cpp_nn_utils_pad_sequence(XPtrTorchTensorList sequence, bool batch_first, double padding_value);
RcppExport SEXP _torch_cpp_nn_utils_pad_sequence(SEXP sequenceSEXP, SEXP batch_firstSEXP, SEXP padding_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensorList >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< bool >::type batch_first(batch_firstSEXP);
    Rcpp::traits::input_parameter< double >::type padding_value(padding_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_pad_sequence(sequence, batch_first, padding_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_PackedSequence_new
Rcpp::XPtr<XPtrTorchPackedSequence> cpp_nn_utils_PackedSequence_new(Rcpp::XPtr<XPtrTorchTensor> data, Rcpp::XPtr<XPtrTorchTensor> batch_sizes, Rcpp::XPtr<XPtrTorchTensor> sorted_indices, Rcpp::XPtr<XPtrTorchTensor> unsorted_indices);
RcppExport SEXP _torch_cpp_nn_utils_PackedSequence_new(SEXP dataSEXP, SEXP batch_sizesSEXP, SEXP sorted_indicesSEXP, SEXP unsorted_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type batch_sizes(batch_sizesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type sorted_indices(sorted_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type unsorted_indices(unsorted_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_PackedSequence_new(data, batch_sizes, sorted_indices, unsorted_indices));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_PackedSequence_data
XPtrTorchTensor cpp_nn_utils_PackedSequence_data(Rcpp::XPtr<XPtrTorchPackedSequence> x);
RcppExport SEXP _torch_cpp_nn_utils_PackedSequence_data(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchPackedSequence> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_PackedSequence_data(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_PackedSequence_batch_sizes
XPtrTorchTensor cpp_nn_utils_PackedSequence_batch_sizes(Rcpp::XPtr<XPtrTorchPackedSequence> x);
RcppExport SEXP _torch_cpp_nn_utils_PackedSequence_batch_sizes(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchPackedSequence> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_PackedSequence_batch_sizes(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_PackedSequence_sorted_indices
XPtrTorchTensor cpp_nn_utils_PackedSequence_sorted_indices(Rcpp::XPtr<XPtrTorchPackedSequence> x);
RcppExport SEXP _torch_cpp_nn_utils_PackedSequence_sorted_indices(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchPackedSequence> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_PackedSequence_sorted_indices(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nn_utils_PackedSequence_unsorted_indices
XPtrTorchTensor cpp_nn_utils_PackedSequence_unsorted_indices(Rcpp::XPtr<XPtrTorchPackedSequence> x);
RcppExport SEXP _torch_cpp_nn_utils_PackedSequence_unsorted_indices(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchPackedSequence> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nn_utils_PackedSequence_unsorted_indices(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qscheme_to_string
std::string cpp_qscheme_to_string(Rcpp::XPtr<XPtrTorchQScheme> x);
RcppExport SEXP _torch_cpp_qscheme_to_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchQScheme> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qscheme_to_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_channel_affine
Rcpp::XPtr<XPtrTorchQScheme> cpp_torch_per_channel_affine();
RcppExport SEXP _torch_cpp_torch_per_channel_affine() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_channel_affine());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_tensor_affine
Rcpp::XPtr<XPtrTorchQScheme> cpp_torch_per_tensor_affine();
RcppExport SEXP _torch_cpp_torch_per_tensor_affine() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_tensor_affine());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_channel_symmetric
Rcpp::XPtr<XPtrTorchQScheme> cpp_torch_per_channel_symmetric();
RcppExport SEXP _torch_cpp_torch_per_channel_symmetric() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_channel_symmetric());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_per_tensor_symmetric
Rcpp::XPtr<XPtrTorchQScheme> cpp_torch_per_tensor_symmetric();
RcppExport SEXP _torch_cpp_torch_per_tensor_symmetric() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_per_tensor_symmetric());
    return rcpp_result_gen;
END_RCPP
}
// cpp_Tensor_is_quantized
bool cpp_Tensor_is_quantized(Rcpp::XPtr<XPtrTorchTensor> self);
RcppExport SEXP _torch_cpp_Tensor_is_quantized(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_Tensor_is_quantized(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_reduction_mean
std::int64_t cpp_torch_reduction_mean();
RcppExport SEXP _torch_cpp_torch_reduction_mean() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_reduction_mean());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_reduction_none
std::int64_t cpp_torch_reduction_none();
RcppExport SEXP _torch_cpp_torch_reduction_none() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_reduction_none());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_reduction_sum
std::int64_t cpp_torch_reduction_sum();
RcppExport SEXP _torch_cpp_torch_reduction_sum() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_reduction_sum());
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_save
SEXP cpp_tensor_save(Rcpp::XPtr<XPtrTorchTensor> x, bool base64);
RcppExport SEXP _torch_cpp_tensor_save(SEXP xSEXP, SEXP base64SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type base64(base64SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_save(x, base64));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_load
XPtrTorchTensor cpp_tensor_load(SEXP input, XPtrTorchOptionalDevice device, bool base64);
RcppExport SEXP _torch_cpp_tensor_load(SEXP inputSEXP, SEXP deviceSEXP, SEXP base64SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalDevice >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type base64(base64SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_load(input, device, base64));
    return rcpp_result_gen;
END_RCPP
}
// cpp_load_state_dict
Rcpp::List cpp_load_state_dict(torch::string path, bool legacy_stream);
RcppExport SEXP _torch_cpp_load_state_dict(SEXP pathSEXP, SEXP legacy_streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type legacy_stream(legacy_streamSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_load_state_dict(path, legacy_stream));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar
XPtrTorchScalar cpp_torch_scalar(SEXP x);
RcppExport SEXP _torch_cpp_torch_scalar(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar_dtype
Rcpp::XPtr<XPtrTorchScalarType> cpp_torch_scalar_dtype(Rcpp::XPtr<XPtrTorchScalar> self);
RcppExport SEXP _torch_cpp_torch_scalar_dtype(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchScalar> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar_dtype(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar_to_int
int cpp_torch_scalar_to_int(Rcpp::XPtr<XPtrTorchScalar> self);
RcppExport SEXP _torch_cpp_torch_scalar_to_int(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchScalar> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar_to_int(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar_to_double
double cpp_torch_scalar_to_double(Rcpp::XPtr<XPtrTorchScalar> self);
RcppExport SEXP _torch_cpp_torch_scalar_to_double(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchScalar> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar_to_double(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar_to_float
float cpp_torch_scalar_to_float(Rcpp::XPtr<XPtrTorchScalar> self);
RcppExport SEXP _torch_cpp_torch_scalar_to_float(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchScalar> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar_to_float(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_scalar_to_bool
bool cpp_torch_scalar_to_bool(Rcpp::XPtr<XPtrTorchScalar> self);
RcppExport SEXP _torch_cpp_torch_scalar_to_bool(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchScalar> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_scalar_to_bool(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_parameters
XPtrTorchjit_named_parameter_list cpp_jit_script_module_parameters(XPtrTorchScriptModule self, bool recurse);
RcppExport SEXP _torch_cpp_jit_script_module_parameters(SEXP selfSEXP, SEXP recurseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type recurse(recurseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_parameters(self, recurse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_buffers
XPtrTorchjit_named_buffer_list cpp_jit_script_module_buffers(XPtrTorchScriptModule self, bool recurse);
RcppExport SEXP _torch_cpp_jit_script_module_buffers(SEXP selfSEXP, SEXP recurseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type recurse(recurseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_buffers(self, recurse));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_train
void cpp_jit_script_module_train(XPtrTorchScriptModule self, bool on);
RcppExport SEXP _torch_cpp_jit_script_module_train(SEXP selfSEXP, SEXP onSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type on(onSEXP);
    cpp_jit_script_module_train(self, on);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_set_optimized
void cpp_jit_script_module_set_optimized(XPtrTorchScriptModule self, bool on);
RcppExport SEXP _torch_cpp_jit_script_module_set_optimized(SEXP selfSEXP, SEXP onSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< bool >::type on(onSEXP);
    cpp_jit_script_module_set_optimized(self, on);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_is_training
bool cpp_jit_script_module_is_training(XPtrTorchScriptModule self);
RcppExport SEXP _torch_cpp_jit_script_module_is_training(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_is_training(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_is_optimized
bool cpp_jit_script_module_is_optimized(XPtrTorchScriptModule self);
RcppExport SEXP _torch_cpp_jit_script_module_is_optimized(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_is_optimized(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_register_parameter
void cpp_jit_script_module_register_parameter(XPtrTorchScriptModule self, XPtrTorchstring name, XPtrTorchTensor v, bool is_buffer);
RcppExport SEXP _torch_cpp_jit_script_module_register_parameter(SEXP selfSEXP, SEXP nameSEXP, SEXP vSEXP, SEXP is_bufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type is_buffer(is_bufferSEXP);
    cpp_jit_script_module_register_parameter(self, name, v, is_buffer);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_register_buffer
void cpp_jit_script_module_register_buffer(XPtrTorchScriptModule self, XPtrTorchstring name, XPtrTorchTensor v);
RcppExport SEXP _torch_cpp_jit_script_module_register_buffer(SEXP selfSEXP, SEXP nameSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type v(vSEXP);
    cpp_jit_script_module_register_buffer(self, name, v);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_register_module
void cpp_jit_script_module_register_module(XPtrTorchScriptModule self, XPtrTorchstring name, XPtrTorchScriptModule module);
RcppExport SEXP _torch_cpp_jit_script_module_register_module(SEXP selfSEXP, SEXP nameSEXP, SEXP moduleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type module(moduleSEXP);
    cpp_jit_script_module_register_module(self, name, module);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_to
void cpp_jit_script_module_to(XPtrTorchScriptModule self, XPtrTorchDevice device, bool non_blocking);
RcppExport SEXP _torch_cpp_jit_script_module_to(SEXP selfSEXP, SEXP deviceSEXP, SEXP non_blockingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchDevice >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type non_blocking(non_blockingSEXP);
    cpp_jit_script_module_to(self, device, non_blocking);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_modules
XPtrTorchjit_named_module_list cpp_jit_script_module_modules(XPtrTorchScriptModule self);
RcppExport SEXP _torch_cpp_jit_script_module_modules(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_modules(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_children
XPtrTorchjit_named_module_list cpp_jit_script_module_children(XPtrTorchScriptModule self);
RcppExport SEXP _torch_cpp_jit_script_module_children(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_children(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_find_method
XPtrTorchScriptMethod cpp_jit_script_module_find_method(XPtrTorchScriptModule self, XPtrTorchstring basename);
RcppExport SEXP _torch_cpp_jit_script_module_find_method(SEXP selfSEXP, SEXP basenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type basename(basenameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_find_method(self, basename));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_method_call
XPtrTorchStack cpp_jit_script_method_call(XPtrTorchScriptMethod self, XPtrTorchStack inputs);
RcppExport SEXP _torch_cpp_jit_script_method_call(SEXP selfSEXP, SEXP inputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptMethod >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchStack >::type inputs(inputsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_method_call(self, inputs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_method_graph_print
SEXP cpp_jit_script_method_graph_print(XPtrTorchScriptMethod self);
RcppExport SEXP _torch_cpp_jit_script_method_graph_print(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptMethod >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_method_graph_print(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_last_executed_optimized_graph_print
SEXP cpp_jit_last_executed_optimized_graph_print();
RcppExport SEXP _torch_cpp_jit_last_executed_optimized_graph_print() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_jit_last_executed_optimized_graph_print());
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_new
XPtrTorchScriptModule cpp_jit_script_module_new(XPtrTorchCompilationUnit cu, XPtrTorchstring name);
RcppExport SEXP _torch_cpp_jit_script_module_new(SEXP cuSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchCompilationUnit >::type cu(cuSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_new(cu, name));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_add_constant
void cpp_jit_script_module_add_constant(XPtrTorchScriptModule self, XPtrTorchstring name, XPtrTorchIValue value);
RcppExport SEXP _torch_cpp_jit_script_module_add_constant(SEXP selfSEXP, SEXP nameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIValue >::type value(valueSEXP);
    cpp_jit_script_module_add_constant(self, name, value);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_add_method
void cpp_jit_script_module_add_method(XPtrTorchScriptModule self, Rcpp::XPtr<XPtrTorch> method);
RcppExport SEXP _torch_cpp_jit_script_module_add_method(SEXP selfSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorch> >::type method(methodSEXP);
    cpp_jit_script_module_add_method(self, method);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_find_constant
SEXP cpp_jit_script_module_find_constant(XPtrTorchScriptModule self, XPtrTorchstring name);
RcppExport SEXP _torch_cpp_jit_script_module_find_constant(SEXP selfSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_script_module_find_constant(self, name));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_script_module_save
void cpp_jit_script_module_save(XPtrTorchScriptModule self, XPtrTorchstring path);
RcppExport SEXP _torch_cpp_jit_script_module_save(SEXP selfSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type path(pathSEXP);
    cpp_jit_script_module_save(self, path);
    return R_NilValue;
END_RCPP
}
// cpp_jit_script_module_save_for_mobile
void cpp_jit_script_module_save_for_mobile(XPtrTorchScriptModule self, XPtrTorchstring path);
RcppExport SEXP _torch_cpp_jit_script_module_save_for_mobile(SEXP selfSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type self(selfSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type path(pathSEXP);
    cpp_jit_script_module_save_for_mobile(self, path);
    return R_NilValue;
END_RCPP
}
// test_stack
XPtrTorchStack test_stack(XPtrTorchStack x);
RcppExport SEXP _torch_test_stack(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchStack >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_stack(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_Tensor_storage
Rcpp::XPtr<XPtrTorchStorage> cpp_Tensor_storage(Rcpp::XPtr<XPtrTorchTensor> self);
RcppExport SEXP _torch_cpp_Tensor_storage(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_Tensor_storage(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_Tensor_has_storage
bool cpp_Tensor_has_storage(Rcpp::XPtr<XPtrTorchTensor> self);
RcppExport SEXP _torch_cpp_Tensor_has_storage(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchTensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_Tensor_has_storage(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_Storage_data_ptr
std::string cpp_Storage_data_ptr(Rcpp::XPtr<XPtrTorchStorage> self);
RcppExport SEXP _torch_cpp_Storage_data_ptr(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchStorage> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_Storage_data_ptr(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_tensor_print
void cpp_torch_tensor_print(torch::Tensor x, int n);
RcppExport SEXP _torch_cpp_torch_tensor_print(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    cpp_torch_tensor_print(x, n);
    return R_NilValue;
END_RCPP
}
// cpp_tensor_from_buffer
torch::Tensor cpp_tensor_from_buffer(const SEXP& data, std::vector<int64_t> shape, XPtrTorchTensorOptions options);
RcppExport SEXP _torch_cpp_tensor_from_buffer(SEXP dataSEXP, SEXP shapeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchTensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_from_buffer(data, shape, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_buffer_from_tensor
SEXP cpp_buffer_from_tensor(torch::Tensor data);
RcppExport SEXP _torch_cpp_buffer_from_tensor(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_buffer_from_tensor(data));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_tensor_dtype
Rcpp::XPtr<XPtrTorchDtype> cpp_torch_tensor_dtype(torch::Tensor x);
RcppExport SEXP _torch_cpp_torch_tensor_dtype(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_tensor_dtype(x));
    return rcpp_result_gen;
END_RCPP
}
// torch_tensor_cpp
torch::Tensor torch_tensor_cpp(SEXP x, Rcpp::Nullable<torch::Dtype> dtype, Rcpp::Nullable<torch::Device> device, bool requires_grad, bool pin_memory);
RcppExport SEXP _torch_torch_tensor_cpp(SEXP xSEXP, SEXP dtypeSEXP, SEXP deviceSEXP, SEXP requires_gradSEXP, SEXP pin_memorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<torch::Dtype> >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<torch::Device> >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type requires_grad(requires_gradSEXP);
    Rcpp::traits::input_parameter< bool >::type pin_memory(pin_memorySEXP);
    rcpp_result_gen = Rcpp::wrap(torch_tensor_cpp(x, dtype, device, requires_grad, pin_memory));
    return rcpp_result_gen;
END_RCPP
}
// cpp_as_array
Rcpp::List cpp_as_array(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_cpp_as_array(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_as_array(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_element_size
int cpp_tensor_element_size(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_cpp_tensor_element_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_element_size(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_dim
std::vector<int> cpp_tensor_dim(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_cpp_tensor_dim(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_dim(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_ndim
int cpp_tensor_ndim(torch::Tensor x);
RcppExport SEXP _torch_cpp_tensor_ndim(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_ndim(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_numel
int cpp_tensor_numel(Rcpp::XPtr<torch::Tensor> x);
RcppExport SEXP _torch_cpp_tensor_numel(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_numel(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_device
Rcpp::XPtr<XPtrTorchDevice> cpp_tensor_device(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_tensor_device(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_device(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_is_undefined
bool cpp_tensor_is_undefined(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_tensor_is_undefined(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_is_undefined(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_is_contiguous
bool cpp_tensor_is_contiguous(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_tensor_is_contiguous(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_is_contiguous(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_has_names
bool cpp_tensor_has_names(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_tensor_has_names(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_has_names(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_names
Rcpp::XPtr<XPtrTorchDimnameList> cpp_tensor_names(Rcpp::XPtr<torch::Tensor> self);
RcppExport SEXP _torch_cpp_tensor_names(SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_names(self));
    return rcpp_result_gen;
END_RCPP
}
// cpp_set_num_threads
void cpp_set_num_threads(int n);
RcppExport SEXP _torch_cpp_set_num_threads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    cpp_set_num_threads(n);
    return R_NilValue;
END_RCPP
}
// cpp_set_num_interop_threads
void cpp_set_num_interop_threads(int n);
RcppExport SEXP _torch_cpp_set_num_interop_threads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    cpp_set_num_interop_threads(n);
    return R_NilValue;
END_RCPP
}
// cpp_get_num_threads
int cpp_get_num_threads();
RcppExport SEXP _torch_cpp_get_num_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_get_num_threads());
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_num_interop_threads
int cpp_get_num_interop_threads();
RcppExport SEXP _torch_cpp_get_num_interop_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_get_num_interop_threads());
    return rcpp_result_gen;
END_RCPP
}
// cpp_namespace_normal_double_double
torch::Tensor cpp_namespace_normal_double_double(double mean, double std, std::vector<int64_t> size, XPtrTorchOptionalGenerator generator, torch::TensorOptions options);
RcppExport SEXP _torch_cpp_namespace_normal_double_double(SEXP meanSEXP, SEXP stdSEXP, SEXP sizeSEXP, SEXP generatorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< torch::TensorOptions >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_namespace_normal_double_double(mean, std, size, generator, options));
    return rcpp_result_gen;
END_RCPP
}
// cpp_namespace_normal_double_tensor
torch::Tensor cpp_namespace_normal_double_tensor(double mean, Rcpp::XPtr<torch::Tensor> std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_namespace_normal_double_tensor(SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_namespace_normal_double_tensor(mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_namespace_normal_tensor_double
torch::Tensor cpp_namespace_normal_tensor_double(Rcpp::XPtr<torch::Tensor> mean, double std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_namespace_normal_tensor_double(SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_namespace_normal_tensor_double(mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// cpp_namespace_normal_tensor_tensor
torch::Tensor cpp_namespace_normal_tensor_tensor(Rcpp::XPtr<torch::Tensor> mean, Rcpp::XPtr<torch::Tensor> std, XPtrTorchOptionalGenerator generator);
RcppExport SEXP _torch_cpp_namespace_normal_tensor_tensor(SEXP meanSEXP, SEXP stdSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<torch::Tensor> >::type std(stdSEXP);
    Rcpp::traits::input_parameter< XPtrTorchOptionalGenerator >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_namespace_normal_tensor_tensor(mean, std, generator));
    return rcpp_result_gen;
END_RCPP
}
// nnf_pad_circular
torch::Tensor nnf_pad_circular(torch::Tensor input, XPtrTorchIntArrayRef padding);
RcppExport SEXP _torch_nnf_pad_circular(SEXP inputSEXP, SEXP paddingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrTorchIntArrayRef >::type padding(paddingSEXP);
    rcpp_result_gen = Rcpp::wrap(nnf_pad_circular(input, padding));
    return rcpp_result_gen;
END_RCPP
}
// cpp_method_Tensor_is_sparse
bool cpp_method_Tensor_is_sparse(torch::Tensor x);
RcppExport SEXP _torch_cpp_method_Tensor_is_sparse(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::Tensor >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_method_Tensor_is_sparse(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_tensor_list
XPtrTorchTensorList cpp_torch_tensor_list(const Rcpp::List& x);
RcppExport SEXP _torch_cpp_torch_tensor_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_tensor_list(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_trace_function
Rcpp::XPtr<XPtrTorchFunctionPtr> cpp_trace_function(Rcpp::Function fn, XPtrTorchStack inputs, XPtrTorchCompilationUnit compilation_unit, XPtrTorchstring name, bool strict, XPtrTorchScriptModule module, bool should_mangle, bool manage_memory);
RcppExport SEXP _torch_cpp_trace_function(SEXP fnSEXP, SEXP inputsSEXP, SEXP compilation_unitSEXP, SEXP nameSEXP, SEXP strictSEXP, SEXP moduleSEXP, SEXP should_mangleSEXP, SEXP manage_memorySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< XPtrTorchStack >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< XPtrTorchCompilationUnit >::type compilation_unit(compilation_unitSEXP);
    Rcpp::traits::input_parameter< XPtrTorchstring >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type strict(strictSEXP);
    Rcpp::traits::input_parameter< XPtrTorchScriptModule >::type module(moduleSEXP);
    Rcpp::traits::input_parameter< bool >::type should_mangle(should_mangleSEXP);
    Rcpp::traits::input_parameter< bool >::type manage_memory(manage_memorySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_trace_function(fn, inputs, compilation_unit, name, strict, module, should_mangle, manage_memory));
    return rcpp_result_gen;
END_RCPP
}
// cpp_save_traced_fn
void cpp_save_traced_fn(Rcpp::XPtr<XPtrTorchFunctionPtr> fn, std::string filename);
RcppExport SEXP _torch_cpp_save_traced_fn(SEXP fnSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchFunctionPtr> >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    cpp_save_traced_fn(fn, filename);
    return R_NilValue;
END_RCPP
}
// cpp_jit_compilation_unit
XPtrTorchCompilationUnit cpp_jit_compilation_unit();
RcppExport SEXP _torch_cpp_jit_compilation_unit() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_jit_compilation_unit());
    return rcpp_result_gen;
END_RCPP
}
// cpp_call_traced_fn
XPtrTorchStack cpp_call_traced_fn(Rcpp::XPtr<XPtrTorchFunctionPtr> fn, XPtrTorchStack inputs);
RcppExport SEXP _torch_cpp_call_traced_fn(SEXP fnSEXP, SEXP inputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchFunctionPtr> >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< XPtrTorchStack >::type inputs(inputsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_call_traced_fn(fn, inputs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_traced_fn_graph_print
std::string cpp_traced_fn_graph_print(Rcpp::XPtr<XPtrTorchFunctionPtr> fn);
RcppExport SEXP _torch_cpp_traced_fn_graph_print(SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchFunctionPtr> >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_traced_fn_graph_print(fn));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_load
XPtrTorchScriptModule cpp_jit_load(std::string path);
RcppExport SEXP _torch_cpp_jit_load(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_load(path));
    return rcpp_result_gen;
END_RCPP
}
// cpp_call_jit_script
XPtrTorchStack cpp_call_jit_script(Rcpp::XPtr<XPtrTorchJITModule> module, XPtrTorchStack inputs);
RcppExport SEXP _torch_cpp_call_jit_script(SEXP moduleSEXP, SEXP inputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchJITModule> >::type module(moduleSEXP);
    Rcpp::traits::input_parameter< XPtrTorchStack >::type inputs(inputsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_call_jit_script(module, inputs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_save_traced_fn_for_mobile
void cpp_save_traced_fn_for_mobile(Rcpp::XPtr<XPtrTorchFunctionPtr> fn, std::string filename);
RcppExport SEXP _torch_cpp_save_traced_fn_for_mobile(SEXP fnSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchFunctionPtr> >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    cpp_save_traced_fn_for_mobile(fn, filename);
    return R_NilValue;
END_RCPP
}
// cpp_nullptr
Rcpp::XPtr<std::nullptr_t> cpp_nullptr();
RcppExport SEXP _torch_cpp_nullptr() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_nullptr());
    return rcpp_result_gen;
END_RCPP
}
// cpp_nullopt
Rcpp::XPtr<std::nullptr_t> cpp_nullopt();
RcppExport SEXP _torch_cpp_nullopt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_nullopt());
    return rcpp_result_gen;
END_RCPP
}
// cpp_tensor_undefined
XPtrTorchTensor cpp_tensor_undefined();
RcppExport SEXP _torch_cpp_tensor_undefined() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_tensor_undefined());
    return rcpp_result_gen;
END_RCPP
}
// to_index_tensor
XPtrTorchTensor to_index_tensor(XPtrTorchTensor t);
RcppExport SEXP _torch_to_index_tensor(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrTorchTensor >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(to_index_tensor(t));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__use_cudnn_rnn_flatten_weight
bool cpp_torch_namespace__use_cudnn_rnn_flatten_weight();
RcppExport SEXP _torch_cpp_torch_namespace__use_cudnn_rnn_flatten_weight() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_namespace__use_cudnn_rnn_flatten_weight());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_namespace__store_main_thread_id
void cpp_torch_namespace__store_main_thread_id();
RcppExport SEXP _torch_cpp_torch_namespace__store_main_thread_id() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cpp_torch_namespace__store_main_thread_id();
    return R_NilValue;
END_RCPP
}
// transpose2
Rcpp::List transpose2(Rcpp::List x);
RcppExport SEXP _torch_transpose2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(transpose2(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_show_config
torch::string cpp_torch_show_config();
RcppExport SEXP _torch_cpp_torch_show_config() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_show_config());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_parallel_info
torch::string cpp_torch_parallel_info();
RcppExport SEXP _torch_cpp_torch_parallel_info() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_torch_parallel_info());
    return rcpp_result_gen;
END_RCPP
}
// cpp_torch_variable_list
Rcpp::XPtr<XPtrTorchvariable_list> cpp_torch_variable_list(const Rcpp::List& x);
RcppExport SEXP _torch_cpp_torch_variable_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_torch_variable_list(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_variable_list_to_r_list
Rcpp::List cpp_variable_list_to_r_list(Rcpp::XPtr<XPtrTorchvariable_list> x);
RcppExport SEXP _torch_cpp_variable_list_to_r_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<XPtrTorchvariable_list> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_variable_list_to_r_list(x));
    return rcpp_result_gen;
END_RCPP
}
// set_xptr_address
SEXP set_xptr_address(SEXP s, SEXP p);
RcppExport SEXP _torch_set_xptr_address(SEXP sSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(set_xptr_address(s, p));
    return rcpp_result_gen;
END_RCPP
}
// set_xptr_protected
SEXP set_xptr_protected(SEXP s, SEXP pro);
RcppExport SEXP _torch_set_xptr_protected(SEXP sSEXP, SEXP proSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pro(proSEXP);
    rcpp_result_gen = Rcpp::wrap(set_xptr_protected(s, pro));
    return rcpp_result_gen;
END_RCPP
}
// xptr_address
SEXP xptr_address(SEXP s);
RcppExport SEXP _torch_xptr_address(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(xptr_address(s));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_torch_cpp_amp_is_autocast_gpu_enabled", (DL_FUNC) &_torch_cpp_amp_is_autocast_gpu_enabled, 0},
    {"_torch_cpp_amp_is_autocast_cpu_enabled", (DL_FUNC) &_torch_cpp_amp_is_autocast_cpu_enabled, 0},
    {"_torch_cpp_amp_autocast_set_gpu_enabled", (DL_FUNC) &_torch_cpp_amp_autocast_set_gpu_enabled, 1},
    {"_torch_cpp_amp_autocast_set_cpu_enabled", (DL_FUNC) &_torch_cpp_amp_autocast_set_cpu_enabled, 1},
    {"_torch_cpp_amp_autocast_set_gpu_dtype", (DL_FUNC) &_torch_cpp_amp_autocast_set_gpu_dtype, 1},
    {"_torch_cpp_amp_autocast_set_cpu_dtype", (DL_FUNC) &_torch_cpp_amp_autocast_set_cpu_dtype, 1},
    {"_torch_cpp_amp_autocast_set_cache_enabled", (DL_FUNC) &_torch_cpp_amp_autocast_set_cache_enabled, 1},
    {"_torch_cpp_amp_autocast_is_cache_enabled", (DL_FUNC) &_torch_cpp_amp_autocast_is_cache_enabled, 0},
    {"_torch_cpp_amp_autocast_get_gpu_dtype", (DL_FUNC) &_torch_cpp_amp_autocast_get_gpu_dtype, 0},
    {"_torch_cpp_amp_autocast_get_cpu_dtype", (DL_FUNC) &_torch_cpp_amp_autocast_get_cpu_dtype, 0},
    {"_torch_cpp_amp_autocast_increment_nesting", (DL_FUNC) &_torch_cpp_amp_autocast_increment_nesting, 0},
    {"_torch_cpp_amp_autocast_decrease_nesting", (DL_FUNC) &_torch_cpp_amp_autocast_decrease_nesting, 0},
    {"_torch_cpp_amp_autocast_clear_cache", (DL_FUNC) &_torch_cpp_amp_autocast_clear_cache, 0},
    {"_torch_cpp_amp_foreach_non_finite_check_and_unscale", (DL_FUNC) &_torch_cpp_amp_foreach_non_finite_check_and_unscale, 3},
    {"_torch_cpp_amp_update_scale_", (DL_FUNC) &_torch_cpp_amp_update_scale_, 6},
    {"_torch_cpp_autograd_set_grad_mode", (DL_FUNC) &_torch_cpp_autograd_set_grad_mode, 1},
    {"_torch_cpp_autograd_is_enabled", (DL_FUNC) &_torch_cpp_autograd_is_enabled, 0},
    {"_torch_cpp_autograd_set_detect_anomaly", (DL_FUNC) &_torch_cpp_autograd_set_detect_anomaly, 1},
    {"_torch_cpp_autograd_detect_anomaly_is_enabled", (DL_FUNC) &_torch_cpp_autograd_detect_anomaly_is_enabled, 0},
    {"_torch_cpp_tensor_grad", (DL_FUNC) &_torch_cpp_tensor_grad, 1},
    {"_torch_cpp_tensor_set_grad_", (DL_FUNC) &_torch_cpp_tensor_set_grad_, 2},
    {"_torch_cpp_tensor_requires_grad", (DL_FUNC) &_torch_cpp_tensor_requires_grad, 1},
    {"_torch_cpp_torch_method__backward_self_Tensor_inputs_TensorList", (DL_FUNC) &_torch_cpp_torch_method__backward_self_Tensor_inputs_TensorList, 5},
    {"_torch_cpp_autograd_backward", (DL_FUNC) &_torch_cpp_autograd_backward, 4},
    {"_torch_cpp_tensor_register_hook", (DL_FUNC) &_torch_cpp_tensor_register_hook, 2},
    {"_torch_cpp_tensor_remove_hook", (DL_FUNC) &_torch_cpp_tensor_remove_hook, 2},
    {"_torch_register_lambda_function_deleter", (DL_FUNC) &_torch_register_lambda_function_deleter, 0},
    {"_torch_cpp_Function_lambda", (DL_FUNC) &_torch_cpp_Function_lambda, 1},
    {"_torch_cpp_Function_apply", (DL_FUNC) &_torch_cpp_Function_apply, 3},
    {"_torch_cpp_autograd_context_save_for_backward", (DL_FUNC) &_torch_cpp_autograd_context_save_for_backward, 2},
    {"_torch_cpp_autograd_context_get_saved_variables", (DL_FUNC) &_torch_cpp_autograd_context_get_saved_variables, 1},
    {"_torch_cpp_autograd_context_set_arguments", (DL_FUNC) &_torch_cpp_autograd_context_set_arguments, 3},
    {"_torch_cpp_autograd_context_get_argument_names", (DL_FUNC) &_torch_cpp_autograd_context_get_argument_names, 1},
    {"_torch_cpp_autograd_context_get_argument_needs_grad", (DL_FUNC) &_torch_cpp_autograd_context_get_argument_needs_grad, 1},
    {"_torch_cpp_autograd_context_set_saved_variables_names", (DL_FUNC) &_torch_cpp_autograd_context_set_saved_variables_names, 2},
    {"_torch_cpp_autograd_context_get_saved_variables_names", (DL_FUNC) &_torch_cpp_autograd_context_get_saved_variables_names, 1},
    {"_torch_cpp_autograd_context_mark_dirty", (DL_FUNC) &_torch_cpp_autograd_context_mark_dirty, 2},
    {"_torch_cpp_autograd_context_mark_non_differentiable", (DL_FUNC) &_torch_cpp_autograd_context_mark_non_differentiable, 2},
    {"_torch_cpp_tensor_grad_fn", (DL_FUNC) &_torch_cpp_tensor_grad_fn, 1},
    {"_torch_cpp_pointer_is_null", (DL_FUNC) &_torch_cpp_pointer_is_null, 1},
    {"_torch_cpp_autograd_node_name", (DL_FUNC) &_torch_cpp_autograd_node_name, 1},
    {"_torch_cpp_autograd_node_next_edges", (DL_FUNC) &_torch_cpp_autograd_node_next_edges, 1},
    {"_torch_cpp_autograd_edge_function", (DL_FUNC) &_torch_cpp_autograd_edge_function, 1},
    {"_torch_cpp_autograd_grad", (DL_FUNC) &_torch_cpp_autograd_grad, 6},
    {"_torch_cpp_set_lantern_allocator", (DL_FUNC) &_torch_cpp_set_lantern_allocator, 1},
    {"_torch_cpp_set_cuda_allocator_allocator_thresholds", (DL_FUNC) &_torch_cpp_set_cuda_allocator_allocator_thresholds, 3},
    {"_torch_cpp_autograd_zero_grad", (DL_FUNC) &_torch_cpp_autograd_zero_grad, 1},
    {"_torch_cpp_backends_mkldnn_is_available", (DL_FUNC) &_torch_cpp_backends_mkldnn_is_available, 0},
    {"_torch_cpp_backends_mkl_is_available", (DL_FUNC) &_torch_cpp_backends_mkl_is_available, 0},
    {"_torch_cpp_backends_openmp_is_available", (DL_FUNC) &_torch_cpp_backends_openmp_is_available, 0},
    {"_torch_cpp_backends_mps_is_available", (DL_FUNC) &_torch_cpp_backends_mps_is_available, 0},
    {"_torch_cpp_arg_to_torch_type", (DL_FUNC) &_torch_cpp_arg_to_torch_type, 3},
    {"_torch_cpp_clean_names", (DL_FUNC) &_torch_cpp_clean_names, 2},
    {"_torch_cpp_make_function_name", (DL_FUNC) &_torch_cpp_make_function_name, 4},
    {"_torch_create_fn_name", (DL_FUNC) &_torch_create_fn_name, 5},
    {"_torch_cpp_contrib_torch_sparsemax", (DL_FUNC) &_torch_cpp_contrib_torch_sparsemax, 2},
    {"_torch_cpp_contrib_torch_sort_vertices", (DL_FUNC) &_torch_cpp_contrib_torch_sort_vertices, 3},
    {"_torch_cpp_cuda_is_available", (DL_FUNC) &_torch_cpp_cuda_is_available, 0},
    {"_torch_cpp_cuda_device_count", (DL_FUNC) &_torch_cpp_cuda_device_count, 0},
    {"_torch_cpp_cuda_synchronize", (DL_FUNC) &_torch_cpp_cuda_synchronize, 1},
    {"_torch_cpp_cuda_current_device", (DL_FUNC) &_torch_cpp_cuda_current_device, 0},
    {"_torch_cpp_cuda_get_device_capability", (DL_FUNC) &_torch_cpp_cuda_get_device_capability, 1},
    {"_torch_cpp_cudnn_runtime_version", (DL_FUNC) &_torch_cpp_cudnn_runtime_version, 0},
    {"_torch_cpp_cudnn_is_available", (DL_FUNC) &_torch_cpp_cudnn_is_available, 0},
    {"_torch_cpp_cuda_memory_stats", (DL_FUNC) &_torch_cpp_cuda_memory_stats, 1},
    {"_torch_cpp_cuda_get_runtime_version", (DL_FUNC) &_torch_cpp_cuda_get_runtime_version, 0},
    {"_torch_cpp_cuda_empty_cache", (DL_FUNC) &_torch_cpp_cuda_empty_cache, 0},
    {"_torch_cpp_device_type_to_string", (DL_FUNC) &_torch_cpp_device_type_to_string, 1},
    {"_torch_cpp_device_index_to_int", (DL_FUNC) &_torch_cpp_device_index_to_int, 1},
    {"_torch_cpp_torch_device", (DL_FUNC) &_torch_cpp_torch_device, 2},
    {"_torch_cpp_set_default_device", (DL_FUNC) &_torch_cpp_set_default_device, 1},
    {"_torch_cpp_get_current_default_device", (DL_FUNC) &_torch_cpp_get_current_default_device, 0},
    {"_torch_cpp_torch_dimname", (DL_FUNC) &_torch_cpp_torch_dimname, 1},
    {"_torch_cpp_torch_dimname_list", (DL_FUNC) &_torch_cpp_torch_dimname_list, 1},
    {"_torch_cpp_dimname_to_string", (DL_FUNC) &_torch_cpp_dimname_to_string, 1},
    {"_torch_cpp_dimname_list_to_string", (DL_FUNC) &_torch_cpp_dimname_list_to_string, 1},
    {"_torch_cpp_dtype_to_string", (DL_FUNC) &_torch_cpp_dtype_to_string, 1},
    {"_torch_cpp_torch_float32", (DL_FUNC) &_torch_cpp_torch_float32, 0},
    {"_torch_cpp_torch_float64", (DL_FUNC) &_torch_cpp_torch_float64, 0},
    {"_torch_cpp_torch_float16", (DL_FUNC) &_torch_cpp_torch_float16, 0},
    {"_torch_cpp_torch_uint8", (DL_FUNC) &_torch_cpp_torch_uint8, 0},
    {"_torch_cpp_torch_int8", (DL_FUNC) &_torch_cpp_torch_int8, 0},
    {"_torch_cpp_torch_int16", (DL_FUNC) &_torch_cpp_torch_int16, 0},
    {"_torch_cpp_torch_int32", (DL_FUNC) &_torch_cpp_torch_int32, 0},
    {"_torch_cpp_torch_int64", (DL_FUNC) &_torch_cpp_torch_int64, 0},
    {"_torch_cpp_torch_bool", (DL_FUNC) &_torch_cpp_torch_bool, 0},
    {"_torch_cpp_torch_quint8", (DL_FUNC) &_torch_cpp_torch_quint8, 0},
    {"_torch_cpp_torch_qint8", (DL_FUNC) &_torch_cpp_torch_qint8, 0},
    {"_torch_cpp_torch_qint32", (DL_FUNC) &_torch_cpp_torch_qint32, 0},
    {"_torch_cpp_torch_chalf", (DL_FUNC) &_torch_cpp_torch_chalf, 0},
    {"_torch_cpp_torch_cfloat", (DL_FUNC) &_torch_cpp_torch_cfloat, 0},
    {"_torch_cpp_torch_cdouble", (DL_FUNC) &_torch_cpp_torch_cdouble, 0},
    {"_torch_cpp_set_default_dtype", (DL_FUNC) &_torch_cpp_set_default_dtype, 1},
    {"_torch_cpp_get_default_dtype", (DL_FUNC) &_torch_cpp_get_default_dtype, 0},
    {"_torch_cpp_torch_method_set_data_self_Tensor_new_data_Tensor", (DL_FUNC) &_torch_cpp_torch_method_set_data_self_Tensor_new_data_Tensor, 2},
    {"_torch_cpp_torch_method_data_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_data_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_leaf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_leaf_self_Tensor, 1},
    {"_torch_cpp_torch_method_output_nr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_output_nr_self_Tensor, 1},
    {"_torch_cpp_torch_method__version_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__version_self_Tensor, 1},
    {"_torch_cpp_torch_method_requires_grad__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_requires_grad__self_Tensor, 2},
    {"_torch_cpp_torch_method_retain_grad_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_retain_grad_self_Tensor, 1},
    {"_torch_cpp_torch_method_retains_grad_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_retains_grad_self_Tensor, 1},
    {"_torch_cpp_torch_method__fw_primal_self_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_method__fw_primal_self_Tensor_level_int64_t, 2},
    {"_torch_cpp_torch_method_rename__self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_rename__self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_rename_self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_rename_self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_align_to_self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_align_to_self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t", (DL_FUNC) &_torch_cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t, 3},
    {"_torch_cpp_torch_method_align_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_align_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_refine_names_self_Tensor_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_refine_names_self_Tensor_names_DimnameList, 2},
    {"_torch_cpp_torch_method_abs_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_abs_self_Tensor, 1},
    {"_torch_cpp_torch_method_abs__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_abs__self_Tensor, 1},
    {"_torch_cpp_torch_method_absolute_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_absolute_self_Tensor, 1},
    {"_torch_cpp_torch_method_absolute__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_absolute__self_Tensor, 1},
    {"_torch_cpp_torch_method_angle_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_angle_self_Tensor, 1},
    {"_torch_cpp_torch_method_sgn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sgn_self_Tensor, 1},
    {"_torch_cpp_torch_method_sgn__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sgn__self_Tensor, 1},
    {"_torch_cpp_torch_method_chalf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_chalf_self_Tensor, 2},
    {"_torch_cpp_torch_method__conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__conj_self_Tensor, 1},
    {"_torch_cpp_torch_method_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_conj_self_Tensor, 1},
    {"_torch_cpp_torch_method__conj_physical_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__conj_physical_self_Tensor, 1},
    {"_torch_cpp_torch_method_conj_physical_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_conj_physical_self_Tensor, 1},
    {"_torch_cpp_torch_method_conj_physical__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_conj_physical__self_Tensor, 1},
    {"_torch_cpp_torch_method_resolve_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_resolve_conj_self_Tensor, 1},
    {"_torch_cpp_torch_method_resolve_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_resolve_neg_self_Tensor, 1},
    {"_torch_cpp_torch_method__neg_view_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__neg_view_self_Tensor, 1},
    {"_torch_cpp_torch_method_acos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_acos_self_Tensor, 1},
    {"_torch_cpp_torch_method_acos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_acos__self_Tensor, 1},
    {"_torch_cpp_torch_method_arccos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arccos_self_Tensor, 1},
    {"_torch_cpp_torch_method_arccos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arccos__self_Tensor, 1},
    {"_torch_cpp_torch_method_add_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_add_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_add__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_add__self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_add_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_add_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_add__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_add__self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_method__is_all_true_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__is_all_true_self_Tensor, 1},
    {"_torch_cpp_torch_method__is_any_true_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__is_any_true_self_Tensor, 1},
    {"_torch_cpp_torch_method_all_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_all_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_all_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_all_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_allclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_allclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_method_any_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_any_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_any_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_any_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_argmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_argmax_self_Tensor, 3},
    {"_torch_cpp_torch_method_argmin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_argmin_self_Tensor, 3},
    {"_torch_cpp_torch_method_acosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_acosh_self_Tensor, 1},
    {"_torch_cpp_torch_method_acosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_acosh__self_Tensor, 1},
    {"_torch_cpp_torch_method_arccosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arccosh_self_Tensor, 1},
    {"_torch_cpp_torch_method_arccosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arccosh__self_Tensor, 1},
    {"_torch_cpp_torch_method_asinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_asinh_self_Tensor, 1},
    {"_torch_cpp_torch_method_asinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_asinh__self_Tensor, 1},
    {"_torch_cpp_torch_method_arcsinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arcsinh_self_Tensor, 1},
    {"_torch_cpp_torch_method_arcsinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arcsinh__self_Tensor, 1},
    {"_torch_cpp_torch_method_atanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atanh_self_Tensor, 1},
    {"_torch_cpp_torch_method_atanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atanh__self_Tensor, 1},
    {"_torch_cpp_torch_method_arctanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arctanh_self_Tensor, 1},
    {"_torch_cpp_torch_method_arctanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arctanh__self_Tensor, 1},
    {"_torch_cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_method_asin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_asin_self_Tensor, 1},
    {"_torch_cpp_torch_method_asin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_asin__self_Tensor, 1},
    {"_torch_cpp_torch_method_arcsin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arcsin_self_Tensor, 1},
    {"_torch_cpp_torch_method_arcsin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arcsin__self_Tensor, 1},
    {"_torch_cpp_torch_method_atan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan_self_Tensor, 1},
    {"_torch_cpp_torch_method_atan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan__self_Tensor, 1},
    {"_torch_cpp_torch_method_arctan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arctan_self_Tensor, 1},
    {"_torch_cpp_torch_method_arctan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arctan__self_Tensor, 1},
    {"_torch_cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_bernoulli_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bernoulli_self_Tensor, 2},
    {"_torch_cpp_torch_method_bernoulli__self_Tensor_p_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bernoulli__self_Tensor_p_Tensor, 3},
    {"_torch_cpp_torch_method_bernoulli__self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_method_bernoulli__self_Tensor_p_double, 3},
    {"_torch_cpp_torch_method_bernoulli_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_method_bernoulli_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_method_bincount_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bincount_self_Tensor, 3},
    {"_torch_cpp_torch_method_bitwise_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_not_self_Tensor, 1},
    {"_torch_cpp_torch_method_bitwise_not__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_not__self_Tensor, 1},
    {"_torch_cpp_torch_method_copysign_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_copysign_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_copysign__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_copysign__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_copysign_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_copysign_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_copysign__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_copysign__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_logical_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_not_self_Tensor, 1},
    {"_torch_cpp_torch_method_logical_not__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_not__self_Tensor, 1},
    {"_torch_cpp_torch_method_logical_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logical_xor__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_xor__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logical_and_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_and_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logical_and__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_and__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logical_or_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_or_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logical_or__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logical_or__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bmm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bmm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_method_broadcast_to_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_broadcast_to_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_method_ceil_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ceil_self_Tensor, 1},
    {"_torch_cpp_torch_method_ceil__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ceil__self_Tensor, 1},
    {"_torch_cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t, 3},
    {"_torch_cpp_torch_method_chunk_self_Tensor_chunks_int64_t", (DL_FUNC) &_torch_cpp_torch_method_chunk_self_Tensor_chunks_int64_t, 3},
    {"_torch_cpp_torch_method_tensor_split_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_method_tensor_split_self_Tensor_sections_int64_t, 3},
    {"_torch_cpp_torch_method_tensor_split_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_tensor_split_self_Tensor_indices_IntArrayRef, 3},
    {"_torch_cpp_torch_method_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor, 3},
    {"_torch_cpp_torch_method_clamp_self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_method_clamp_self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp_self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_method_clamp__self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp__self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_method_clamp__self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp__self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_method_clamp_max_self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_max_self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_max_self_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp_max_self_Tensor_max_Tensor, 2},
    {"_torch_cpp_torch_method_clamp_max__self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_max__self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_max__self_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp_max__self_Tensor_max_Tensor, 2},
    {"_torch_cpp_torch_method_clamp_min_self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_min_self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_min_self_Tensor_min_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp_min_self_Tensor_min_Tensor, 2},
    {"_torch_cpp_torch_method_clamp_min__self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clamp_min__self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_method_clamp_min__self_Tensor_min_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clamp_min__self_Tensor_min_Tensor, 2},
    {"_torch_cpp_torch_method_clip_self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clip_self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_method_clip_self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clip_self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_method_clip__self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_method_clip__self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_method_clip__self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clip__self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_method_contiguous_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_contiguous_self_Tensor, 2},
    {"_torch_cpp_torch_method_copy__self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_copy__self_Tensor_src_Tensor, 3},
    {"_torch_cpp_torch_method_cos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cos_self_Tensor, 1},
    {"_torch_cpp_torch_method_cos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cos__self_Tensor, 1},
    {"_torch_cpp_torch_method_cosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cosh_self_Tensor, 1},
    {"_torch_cpp_torch_method_cosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cosh__self_Tensor, 1},
    {"_torch_cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_method_count_nonzero_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_count_nonzero_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_cov_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cov_self_Tensor, 4},
    {"_torch_cpp_torch_method_corrcoef_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_corrcoef_self_Tensor, 1},
    {"_torch_cpp_torch_method_cummax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cummax_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_cummax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cummax_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_cummin_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cummin_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_cummin_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cummin_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_cumprod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cumprod_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_cumprod__self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cumprod__self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_cumprod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cumprod_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_cumprod__self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cumprod__self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_cumsum_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cumsum_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_cumsum__self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_cumsum__self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_cumsum_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cumsum_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_cumsum__self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_cumsum__self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_diag_embed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diag_embed_self_Tensor, 4},
    {"_torch_cpp_torch_method_diagflat_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diagflat_self_Tensor, 2},
    {"_torch_cpp_torch_method_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t", (DL_FUNC) &_torch_cpp_torch_method_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t, 4},
    {"_torch_cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname", (DL_FUNC) &_torch_cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname, 5},
    {"_torch_cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar, 3},
    {"_torch_cpp_torch_method_diff_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diff_self_Tensor, 5},
    {"_torch_cpp_torch_method_div_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_div_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_div__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_div__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_div_self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_div_self_Tensor_other_Tensor_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_div__self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_div__self_Tensor_other_Tensor_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_div_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_div_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_div__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_div__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_div_self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_div_self_Tensor_other_Scalar_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_div__self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_div__self_Tensor_other_Scalar_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_divide_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_divide_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_divide__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_divide__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_divide_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_divide_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_divide__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_divide__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_divide__self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_divide__self_Tensor_other_Tensor_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_divide__self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_divide__self_Tensor_other_Scalar_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_method_true_divide_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_true_divide_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_true_divide__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_true_divide__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_true_divide_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_true_divide_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_true_divide__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_true_divide__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_dot_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dot_self_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_method_vdot_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_vdot_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_new_empty_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_new_empty_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar, 4},
    {"_torch_cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_new_ones_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_new_ones_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_resize__self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_resize__self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_erf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erf_self_Tensor, 1},
    {"_torch_cpp_torch_method_erf__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erf__self_Tensor, 1},
    {"_torch_cpp_torch_method_erfc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfc_self_Tensor, 1},
    {"_torch_cpp_torch_method_erfc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfc__self_Tensor, 1},
    {"_torch_cpp_torch_method_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exp_self_Tensor, 1},
    {"_torch_cpp_torch_method_exp__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exp__self_Tensor, 1},
    {"_torch_cpp_torch_method_exp2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exp2_self_Tensor, 1},
    {"_torch_cpp_torch_method_exp2__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exp2__self_Tensor, 1},
    {"_torch_cpp_torch_method_expm1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_expm1_self_Tensor, 1},
    {"_torch_cpp_torch_method_expm1__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_expm1__self_Tensor, 1},
    {"_torch_cpp_torch_method_expand_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_expand_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_expand_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_expand_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t, 3},
    {"_torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname, 4},
    {"_torch_cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname, 4},
    {"_torch_cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname, 3},
    {"_torch_cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_method_fill__self_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fill__self_Tensor_value_Scalar, 2},
    {"_torch_cpp_torch_method_fill__self_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fill__self_Tensor_value_Tensor, 2},
    {"_torch_cpp_torch_method_floor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_floor_self_Tensor, 1},
    {"_torch_cpp_torch_method_floor__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_floor__self_Tensor, 1},
    {"_torch_cpp_torch_method_floor_divide_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_floor_divide_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_floor_divide__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_floor_divide__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_floor_divide_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_floor_divide_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_floor_divide__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_floor_divide__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_frac_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_frac_self_Tensor, 1},
    {"_torch_cpp_torch_method_frac__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_frac__self_Tensor, 1},
    {"_torch_cpp_torch_method_gcd_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gcd_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_gcd__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gcd__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lcm_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lcm_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lcm__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lcm__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_index_self_Tensor_indices_constc10Listc10optionalTensor", (DL_FUNC) &_torch_cpp_torch_method_index_self_Tensor_indices_constc10Listc10optionalTensor, 2},
    {"_torch_cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 4},
    {"_torch_cpp_torch_method_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 4},
    {"_torch_cpp_torch_method_isclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_method_isnan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isnan_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_distributed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_distributed_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_floating_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_floating_point_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_complex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_complex_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_conj_self_Tensor, 1},
    {"_torch_cpp_torch_method__is_zerotensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__is_zerotensor_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_neg_self_Tensor, 1},
    {"_torch_cpp_torch_method_isreal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isreal_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_same_size_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_same_size_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_is_signed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_signed_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_inference_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_inference_self_Tensor, 1},
    {"_torch_cpp_torch_method_kron_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_kron_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_int64_t, 4},
    {"_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname, 4},
    {"_torch_cpp_torch_method_nan_to_num_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nan_to_num_self_Tensor, 4},
    {"_torch_cpp_torch_method_nan_to_num__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nan_to_num__self_Tensor, 4},
    {"_torch_cpp_torch_method_ldexp_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ldexp_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ldexp__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ldexp__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_log_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log_self_Tensor, 1},
    {"_torch_cpp_torch_method_log__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log__self_Tensor, 1},
    {"_torch_cpp_torch_method_log10_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log10_self_Tensor, 1},
    {"_torch_cpp_torch_method_log10__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log10__self_Tensor, 1},
    {"_torch_cpp_torch_method_log1p_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log1p_self_Tensor, 1},
    {"_torch_cpp_torch_method_log1p__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log1p__self_Tensor, 1},
    {"_torch_cpp_torch_method_log2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log2_self_Tensor, 1},
    {"_torch_cpp_torch_method_log2__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log2__self_Tensor, 1},
    {"_torch_cpp_torch_method_logaddexp_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logaddexp_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_logaddexp2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logaddexp2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_xlogy_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_xlogy_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_xlogy_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_xlogy_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_xlogy__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_xlogy__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_xlogy__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_xlogy__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_log_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_log_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_log_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_log_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_method_matmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_matmul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_matrix_power_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_method_matrix_power_self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_method_matrix_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_matrix_exp_self_Tensor, 1},
    {"_torch_cpp_torch_method_aminmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_aminmax_self_Tensor, 3},
    {"_torch_cpp_torch_method_max_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_max_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_amax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_amax_self_Tensor, 3},
    {"_torch_cpp_torch_method_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mean_self_Tensor, 2},
    {"_torch_cpp_torch_method_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_nanmean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nanmean_self_Tensor, 4},
    {"_torch_cpp_torch_method_median_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_median_self_Tensor, 1},
    {"_torch_cpp_torch_method_median_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_median_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_median_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_median_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_nanmedian_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nanmedian_self_Tensor, 1},
    {"_torch_cpp_torch_method_nanmedian_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_nanmedian_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_nanmedian_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_nanmedian_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_min_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_min_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_amin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_amin_self_Tensor, 3},
    {"_torch_cpp_torch_method_mm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_method_mode_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_mode_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_mode_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_mode_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_mul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_mul__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mul__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_mul_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_mul_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_mul__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_mul__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_multiply_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_multiply_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_multiply__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_multiply__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_multiply_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_multiply_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_multiply__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_multiply__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_mv_self_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mv_self_Tensor_vec_Tensor, 2},
    {"_torch_cpp_torch_method_mvlgamma_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_method_mvlgamma_self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_method_mvlgamma__self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_method_mvlgamma__self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t", (DL_FUNC) &_torch_cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t, 4},
    {"_torch_cpp_torch_method_permute_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_permute_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef, 3},
    {"_torch_cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t", (DL_FUNC) &_torch_cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t, 3},
    {"_torch_cpp_torch_method_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef, 3},
    {"_torch_cpp_torch_method_moveaxis_self_Tensor_source_int64_t_destination_int64_t", (DL_FUNC) &_torch_cpp_torch_method_moveaxis_self_Tensor_source_int64_t_destination_int64_t, 3},
    {"_torch_cpp_torch_method_numpy_T_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_numpy_T_self_Tensor, 1},
    {"_torch_cpp_torch_method_matrix_H_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_matrix_H_self_Tensor, 1},
    {"_torch_cpp_torch_method_mT_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mT_self_Tensor, 1},
    {"_torch_cpp_torch_method_mH_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_mH_self_Tensor, 1},
    {"_torch_cpp_torch_method_adjoint_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_adjoint_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_pinned_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_pinned_self_Tensor, 2},
    {"_torch_cpp_torch_method_pin_memory_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pin_memory_self_Tensor, 2},
    {"_torch_cpp_torch_method_pinverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pinverse_self_Tensor, 2},
    {"_torch_cpp_torch_method_rad2deg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rad2deg_self_Tensor, 1},
    {"_torch_cpp_torch_method_rad2deg__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rad2deg__self_Tensor, 1},
    {"_torch_cpp_torch_method_deg2rad_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_deg2rad_self_Tensor, 1},
    {"_torch_cpp_torch_method_deg2rad__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_deg2rad__self_Tensor, 1},
    {"_torch_cpp_torch_method_ravel_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ravel_self_Tensor, 1},
    {"_torch_cpp_torch_method_reciprocal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_reciprocal_self_Tensor, 1},
    {"_torch_cpp_torch_method_reciprocal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_reciprocal__self_Tensor, 1},
    {"_torch_cpp_torch_method_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_neg_self_Tensor, 1},
    {"_torch_cpp_torch_method_neg__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_neg__self_Tensor, 1},
    {"_torch_cpp_torch_method_negative_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_negative_self_Tensor, 1},
    {"_torch_cpp_torch_method_negative__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_negative__self_Tensor, 1},
    {"_torch_cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef, 2},
    {"_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor, 4},
    {"_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t", (DL_FUNC) &_torch_cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t, 4},
    {"_torch_cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef, 2},
    {"_torch_cpp_torch_method__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 3},
    {"_torch_cpp_torch_method_reshape_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_reshape_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_round_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_round_self_Tensor, 1},
    {"_torch_cpp_torch_method_round__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_round__self_Tensor, 1},
    {"_torch_cpp_torch_method_round_self_Tensor_decimals_int64_t", (DL_FUNC) &_torch_cpp_torch_method_round_self_Tensor_decimals_int64_t, 2},
    {"_torch_cpp_torch_method_round__self_Tensor_decimals_int64_t", (DL_FUNC) &_torch_cpp_torch_method_round__self_Tensor_decimals_int64_t, 2},
    {"_torch_cpp_torch_method_relu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_relu_self_Tensor, 1},
    {"_torch_cpp_torch_method_relu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_relu__self_Tensor, 1},
    {"_torch_cpp_torch_method_prelu_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_prelu_self_Tensor_weight_Tensor, 2},
    {"_torch_cpp_torch_method_hardshrink_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_hardshrink_self_Tensor, 2},
    {"_torch_cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar, 3},
    {"_torch_cpp_torch_method_rsqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rsqrt_self_Tensor, 1},
    {"_torch_cpp_torch_method_rsqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rsqrt__self_Tensor, 1},
    {"_torch_cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t", (DL_FUNC) &_torch_cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t, 3},
    {"_torch_cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t, 3},
    {"_torch_cpp_torch_method_sigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_method_sigmoid__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sigmoid__self_Tensor, 1},
    {"_torch_cpp_torch_method_logit_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logit_self_Tensor, 2},
    {"_torch_cpp_torch_method_logit__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logit__self_Tensor, 2},
    {"_torch_cpp_torch_method_sin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sin_self_Tensor, 1},
    {"_torch_cpp_torch_method_sin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sin__self_Tensor, 1},
    {"_torch_cpp_torch_method_sinc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sinc_self_Tensor, 1},
    {"_torch_cpp_torch_method_sinc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sinc__self_Tensor, 1},
    {"_torch_cpp_torch_method_sinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sinh_self_Tensor, 1},
    {"_torch_cpp_torch_method_sinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sinh__self_Tensor, 1},
    {"_torch_cpp_torch_method_detach_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_detach_self_Tensor, 1},
    {"_torch_cpp_torch_method_detach__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_detach__self_Tensor, 1},
    {"_torch_cpp_torch_method_size_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_size_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_slice_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_slice_self_Tensor, 5},
    {"_torch_cpp_torch_method_slice_scatter_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_slice_scatter_self_Tensor_src_Tensor, 6},
    {"_torch_cpp_torch_method_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_method_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t, 4},
    {"_torch_cpp_torch_method_diagonal_scatter_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diagonal_scatter_self_Tensor_src_Tensor, 5},
    {"_torch_cpp_torch_method_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef, 5},
    {"_torch_cpp_torch_method_smm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_smm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_method_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_method_split_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_method_split_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_method_split_self_Tensor_split_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_split_self_Tensor_split_size_IntArrayRef, 3},
    {"_torch_cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_method_hsplit_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_method_hsplit_self_Tensor_sections_int64_t, 2},
    {"_torch_cpp_torch_method_hsplit_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_hsplit_self_Tensor_indices_IntArrayRef, 2},
    {"_torch_cpp_torch_method_vsplit_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_method_vsplit_self_Tensor_sections_int64_t, 2},
    {"_torch_cpp_torch_method_vsplit_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_vsplit_self_Tensor_indices_IntArrayRef, 2},
    {"_torch_cpp_torch_method_dsplit_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_method_dsplit_self_Tensor_sections_int64_t, 2},
    {"_torch_cpp_torch_method_dsplit_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_dsplit_self_Tensor_indices_IntArrayRef, 2},
    {"_torch_cpp_torch_method_squeeze_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor, 1},
    {"_torch_cpp_torch_method_squeeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_squeeze_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_squeeze_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_squeeze_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_method_squeeze__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor, 1},
    {"_torch_cpp_torch_method_squeeze__self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_squeeze__self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_method_squeeze__self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_squeeze__self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_method_stft_self_Tensor_n_fft_int64_t", (DL_FUNC) &_torch_cpp_torch_method_stft_self_Tensor_n_fft_int64_t, 10},
    {"_torch_cpp_torch_method_istft_self_Tensor_n_fft_int64_t", (DL_FUNC) &_torch_cpp_torch_method_istft_self_Tensor_n_fft_int64_t, 10},
    {"_torch_cpp_torch_method_stride_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_stride_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_stride_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_stride_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_sum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sum_self_Tensor, 2},
    {"_torch_cpp_torch_method_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_sum_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_sum_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_sum_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_nansum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nansum_self_Tensor, 4},
    {"_torch_cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_method_sqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sqrt_self_Tensor, 1},
    {"_torch_cpp_torch_method_sqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sqrt__self_Tensor, 1},
    {"_torch_cpp_torch_method_square_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_square_self_Tensor, 1},
    {"_torch_cpp_torch_method_square__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_square__self_Tensor, 1},
    {"_torch_cpp_torch_method_std_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_std_self_Tensor, 2},
    {"_torch_cpp_torch_method_std_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_std_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_std_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_std_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_prod_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_prod_self_Tensor, 2},
    {"_torch_cpp_torch_method_prod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_prod_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_method_prod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_prod_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_method_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_t_self_Tensor, 1},
    {"_torch_cpp_torch_method_t__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_t__self_Tensor, 1},
    {"_torch_cpp_torch_method_tan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tan_self_Tensor, 1},
    {"_torch_cpp_torch_method_tan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tan__self_Tensor, 1},
    {"_torch_cpp_torch_method_tanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tanh_self_Tensor, 1},
    {"_torch_cpp_torch_method_tanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tanh__self_Tensor, 1},
    {"_torch_cpp_torch_method_tile_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_tile_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname", (DL_FUNC) &_torch_cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname, 3},
    {"_torch_cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_method_flip_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_flip_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_method_fliplr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fliplr_self_Tensor, 1},
    {"_torch_cpp_torch_method_flipud_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_flipud_self_Tensor, 1},
    {"_torch_cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef, 3},
    {"_torch_cpp_torch_method_rot90_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_rot90_self_Tensor, 3},
    {"_torch_cpp_torch_method__nested_tensor_size_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__nested_tensor_size_self_Tensor, 1},
    {"_torch_cpp_torch_method__nested_tensor_strides_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__nested_tensor_strides_self_Tensor, 1},
    {"_torch_cpp_torch_method__nested_tensor_offsets_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__nested_tensor_offsets_self_Tensor, 1},
    {"_torch_cpp_torch_method_trunc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_trunc_self_Tensor, 1},
    {"_torch_cpp_torch_method_trunc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_trunc__self_Tensor, 1},
    {"_torch_cpp_torch_method_fix_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fix_self_Tensor, 1},
    {"_torch_cpp_torch_method_fix__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fix__self_Tensor, 1},
    {"_torch_cpp_torch_method_type_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_type_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_var_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_var_self_Tensor, 2},
    {"_torch_cpp_torch_method_var_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_var_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_method_var_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_method_var_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_method_view_as_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_view_as_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_where_condition_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType, 3},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar, 2},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool, 4},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool, 4},
    {"_torch_cpp_torch_method_frexp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_frexp_self_Tensor, 1},
    {"_torch_cpp_torch_method_clone_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_clone_self_Tensor, 2},
    {"_torch_cpp_torch_method_positive_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_positive_self_Tensor, 1},
    {"_torch_cpp_torch_method_resize_as__self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_method_resize_as__self_Tensor_the_template_Tensor, 3},
    {"_torch_cpp_torch_method_resize_as_sparse__self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_method_resize_as_sparse__self_Tensor_the_template_Tensor, 2},
    {"_torch_cpp_torch_method_zero__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_zero__self_Tensor, 1},
    {"_torch_cpp_torch_method_sub_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sub_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_sub__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sub__self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_sub_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_sub_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_sub__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_sub__self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_subtract_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_subtract_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_subtract__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_subtract__self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_subtract_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_subtract_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_subtract__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_subtract__self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_method_heaviside_self_Tensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_method_heaviside_self_Tensor_values_Tensor, 2},
    {"_torch_cpp_torch_method_heaviside__self_Tensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_method_heaviside__self_Tensor_values_Tensor, 2},
    {"_torch_cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_method__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_method__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 4},
    {"_torch_cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 4},
    {"_torch_cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_method_to_dense_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_dense_self_Tensor, 2},
    {"_torch_cpp_torch_method__to_dense_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__to_dense_self_Tensor, 2},
    {"_torch_cpp_torch_method_sparse_dim_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sparse_dim_self_Tensor, 1},
    {"_torch_cpp_torch_method__dimI_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__dimI_self_Tensor, 1},
    {"_torch_cpp_torch_method_dense_dim_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dense_dim_self_Tensor, 1},
    {"_torch_cpp_torch_method__dimV_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__dimV_self_Tensor, 1},
    {"_torch_cpp_torch_method__nnz_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__nnz_self_Tensor, 1},
    {"_torch_cpp_torch_method_coalesce_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_coalesce_self_Tensor, 1},
    {"_torch_cpp_torch_method_is_coalesced_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_coalesced_self_Tensor, 1},
    {"_torch_cpp_torch_method__indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__indices_self_Tensor, 1},
    {"_torch_cpp_torch_method__values_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method__values_self_Tensor, 1},
    {"_torch_cpp_torch_method__coalesced__self_Tensor_coalesced_bool", (DL_FUNC) &_torch_cpp_torch_method__coalesced__self_Tensor_coalesced_bool, 2},
    {"_torch_cpp_torch_method_indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_indices_self_Tensor, 1},
    {"_torch_cpp_torch_method_values_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_values_self_Tensor, 1},
    {"_torch_cpp_torch_method_crow_indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_crow_indices_self_Tensor, 1},
    {"_torch_cpp_torch_method_col_indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_col_indices_self_Tensor, 1},
    {"_torch_cpp_torch_method_ccol_indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ccol_indices_self_Tensor, 1},
    {"_torch_cpp_torch_method_row_indices_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_row_indices_self_Tensor, 1},
    {"_torch_cpp_torch_method_unbind_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unbind_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_method_unbind_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_unbind_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t, 2},
    {"_torch_cpp_torch_method_to_sparse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_self_Tensor, 4},
    {"_torch_cpp_torch_method_to_sparse_csr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_csr_self_Tensor, 2},
    {"_torch_cpp_torch_method_to_sparse_csc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_csc_self_Tensor, 2},
    {"_torch_cpp_torch_method_to_sparse_bsr_self_Tensor_blocksize_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_bsr_self_Tensor_blocksize_IntArrayRef, 3},
    {"_torch_cpp_torch_method_to_sparse_bsc_self_Tensor_blocksize_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_to_sparse_bsc_self_Tensor_blocksize_IntArrayRef, 3},
    {"_torch_cpp_torch_method_to_mkldnn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_mkldnn_self_Tensor, 2},
    {"_torch_cpp_torch_method_dequantize_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dequantize_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_scale_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_scale_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_zero_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_zero_point_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_per_channel_scales_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_per_channel_scales_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_per_channel_zero_points_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_per_channel_zero_points_self_Tensor, 1},
    {"_torch_cpp_torch_method_q_per_channel_axis_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_q_per_channel_axis_self_Tensor, 1},
    {"_torch_cpp_torch_method_int_repr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_int_repr_self_Tensor, 1},
    {"_torch_cpp_torch_method_qscheme_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_qscheme_self_Tensor, 1},
    {"_torch_cpp_torch_method__autocast_to_reduced_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool_cuda_dtype_ScalarType_cpu_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method__autocast_to_reduced_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool_cuda_dtype_ScalarType_cpu_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method__autocast_to_full_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool", (DL_FUNC) &_torch_cpp_torch_method__autocast_to_full_precision_self_Tensor_cuda_enabled_bool_cpu_enabled_bool, 3},
    {"_torch_cpp_torch_method_to_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor, 5},
    {"_torch_cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType, 6},
    {"_torch_cpp_torch_method_to_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_dtype_ScalarType, 5},
    {"_torch_cpp_torch_method_to_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_to_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_method_item_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_item_self_Tensor, 1},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Storage", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Storage, 2},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef, 5},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Tensor_storage_offset_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Tensor_storage_offset_int64_t_size_IntArrayRef, 5},
    {"_torch_cpp_torch_method_set__self_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor_source_Tensor, 2},
    {"_torch_cpp_torch_method_set__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_set__self_Tensor, 1},
    {"_torch_cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_method_view_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_method_view_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_method_view_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_method_view_self_Tensor_dtype_ScalarType, 2},
    {"_torch_cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_put_self_Tensor_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_put_self_Tensor_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_method_index_reduce__self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_index_reduce__self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_method_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 5},
    {"_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 5},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view, 5},
    {"_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view, 5},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_method_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_method_scatter_reduce__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_method_scatter_reduce__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_method_eq__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_eq__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_eq__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_eq__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_and_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_and_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_and_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_and_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_and__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_and__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_and__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_and__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___and___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___and___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___and___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___and___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___iand___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___iand___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___iand___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___iand___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_or_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_or_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_or_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_or_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_or__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_or__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_or__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_or__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___or___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___or___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___or___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___or___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___ior___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___ior___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___ior___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___ior___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___xor___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___xor___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___xor___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___xor___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___ixor___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___ixor___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___ixor___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___ixor___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___lshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___lshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___lshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___lshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___ilshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___ilshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___ilshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___ilshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_left_shift_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_left_shift_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_left_shift__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_left_shift__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_left_shift_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_left_shift_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_left_shift__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_left_shift__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___rshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___rshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___rshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___rshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method___irshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method___irshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method___irshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method___irshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_right_shift_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_right_shift_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_right_shift__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_bitwise_right_shift__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_bitwise_right_shift_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_right_shift_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_bitwise_right_shift__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_bitwise_right_shift__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_tril__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tril__self_Tensor, 2},
    {"_torch_cpp_torch_method_triu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_triu__self_Tensor, 2},
    {"_torch_cpp_torch_method_digamma__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_digamma__self_Tensor, 1},
    {"_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar, 3},
    {"_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t", (DL_FUNC) &_torch_cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t, 4},
    {"_torch_cpp_torch_method_random__self_Tensor_to_int64_t", (DL_FUNC) &_torch_cpp_torch_method_random__self_Tensor_to_int64_t, 3},
    {"_torch_cpp_torch_method_random__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_random__self_Tensor, 2},
    {"_torch_cpp_torch_method_uniform__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_uniform__self_Tensor, 4},
    {"_torch_cpp_torch_method_cauchy__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cauchy__self_Tensor, 4},
    {"_torch_cpp_torch_method_log_normal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_log_normal__self_Tensor, 4},
    {"_torch_cpp_torch_method_exponential__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_exponential__self_Tensor, 3},
    {"_torch_cpp_torch_method_geometric__self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_method_geometric__self_Tensor_p_double, 3},
    {"_torch_cpp_torch_method_diag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_diag_self_Tensor, 2},
    {"_torch_cpp_torch_method_cross_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cross_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_triu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_triu_self_Tensor, 2},
    {"_torch_cpp_torch_method_tril_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_tril_self_Tensor, 2},
    {"_torch_cpp_torch_method_trace_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_trace_self_Tensor, 1},
    {"_torch_cpp_torch_method_ne_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ne_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ne_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ne_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ne__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ne__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ne__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ne__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_not_equal_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_not_equal_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_not_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_not_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_not_equal__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_not_equal__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_not_equal__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_not_equal__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_eq_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_eq_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_eq_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_eq_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ge_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ge_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ge_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ge_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_ge__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_ge__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_ge__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ge__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_greater_equal_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_greater_equal_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_greater_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_greater_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_greater_equal__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_greater_equal__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_greater_equal__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_greater_equal__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_le_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_le_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_le_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_le_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_le__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_le__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_le__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_le__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_less_equal_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_less_equal_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_less_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_less_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_less_equal__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_less_equal__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_less_equal__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_less_equal__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_gt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_gt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_gt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_gt__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_gt__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_gt__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gt__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_greater_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_greater_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_greater_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_greater_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_greater__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_greater__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_greater__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_greater__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_lt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lt__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lt__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_lt__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lt__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_less_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_less_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_less_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_less_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_less__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_less__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_less__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_less__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_take_self_Tensor_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_take_self_Tensor_index_Tensor, 2},
    {"_torch_cpp_torch_method_take_along_dim_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_method_take_along_dim_self_Tensor_indices_Tensor, 3},
    {"_torch_cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor, 3},
    {"_torch_cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor, 3},
    {"_torch_cpp_torch_method_masked_select_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_method_masked_select_self_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_method_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_method_nonzero_numpy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nonzero_numpy_self_Tensor, 1},
    {"_torch_cpp_torch_method_argwhere_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_argwhere_self_Tensor, 1},
    {"_torch_cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor, 4},
    {"_torch_cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_method_triangular_solve_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_method_triangular_solve_self_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_method_svd_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_svd_self_Tensor, 3},
    {"_torch_cpp_torch_method_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t, 3},
    {"_torch_cpp_torch_method_swapaxes__self_Tensor_axis0_int64_t_axis1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_swapaxes__self_Tensor_axis0_int64_t_axis1_int64_t, 3},
    {"_torch_cpp_torch_method_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_method_swapdims__self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_method_swapdims__self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_method_cholesky_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cholesky_self_Tensor, 2},
    {"_torch_cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor, 3},
    {"_torch_cpp_torch_method_cholesky_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_cholesky_inverse_self_Tensor, 2},
    {"_torch_cpp_torch_method_qr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_qr_self_Tensor, 2},
    {"_torch_cpp_torch_method_geqrf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_geqrf_self_Tensor, 1},
    {"_torch_cpp_torch_method_orgqr_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_orgqr_self_Tensor_input2_Tensor, 2},
    {"_torch_cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor, 5},
    {"_torch_cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 3},
    {"_torch_cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t, 4},
    {"_torch_cpp_torch_method_lgamma__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lgamma__self_Tensor, 1},
    {"_torch_cpp_torch_method_lgamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lgamma_self_Tensor, 1},
    {"_torch_cpp_torch_method_digamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_digamma_self_Tensor, 1},
    {"_torch_cpp_torch_method_polygamma__self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_method_polygamma__self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_method_erfinv_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfinv_self_Tensor, 1},
    {"_torch_cpp_torch_method_erfinv__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_erfinv__self_Tensor, 1},
    {"_torch_cpp_torch_method_i0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_i0_self_Tensor, 1},
    {"_torch_cpp_torch_method_i0__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_i0__self_Tensor, 1},
    {"_torch_cpp_torch_method_sign_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sign_self_Tensor, 1},
    {"_torch_cpp_torch_method_sign__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_sign__self_Tensor, 1},
    {"_torch_cpp_torch_method_signbit_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_signbit_self_Tensor, 1},
    {"_torch_cpp_torch_method_dist_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_dist_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_method_atan2__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan2__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_atan2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_atan2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_arctan2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arctan2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_arctan2__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_arctan2__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar, 3},
    {"_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_method_histc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_histc_self_Tensor, 4},
    {"_torch_cpp_torch_method_histogram_self_Tensor_bins_Tensor", (DL_FUNC) &_torch_cpp_torch_method_histogram_self_Tensor_bins_Tensor, 4},
    {"_torch_cpp_torch_method_histogram_self_Tensor_bins_int64_t", (DL_FUNC) &_torch_cpp_torch_method_histogram_self_Tensor_bins_int64_t, 5},
    {"_torch_cpp_torch_method_fmod_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fmod_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_fmod__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_fmod__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_fmod_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fmod_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_fmod__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fmod__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_hypot_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_hypot_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_hypot__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_hypot__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_igamma_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_igamma_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_igamma__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_igamma__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_igammac_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_igammac_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_igammac__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_igammac__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_nextafter_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nextafter_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_nextafter__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nextafter__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_remainder_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_remainder_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_remainder__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_method_remainder__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_method_remainder_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_remainder_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_remainder__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_remainder__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_min_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor, 1},
    {"_torch_cpp_torch_method_fmin_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fmin_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_max_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor, 1},
    {"_torch_cpp_torch_method_fmax_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_fmax_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_maximum_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_maximum_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_max_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_max_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_minimum_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_minimum_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_min_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_min_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_quantile_self_Tensor_q_Tensor", (DL_FUNC) &_torch_cpp_torch_method_quantile_self_Tensor_q_Tensor, 5},
    {"_torch_cpp_torch_method_quantile_self_Tensor_q_double", (DL_FUNC) &_torch_cpp_torch_method_quantile_self_Tensor_q_double, 5},
    {"_torch_cpp_torch_method_nanquantile_self_Tensor_q_Tensor", (DL_FUNC) &_torch_cpp_torch_method_nanquantile_self_Tensor_q_Tensor, 5},
    {"_torch_cpp_torch_method_nanquantile_self_Tensor_q_double", (DL_FUNC) &_torch_cpp_torch_method_nanquantile_self_Tensor_q_double, 5},
    {"_torch_cpp_torch_method_sort_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_sort_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_sort_self_Tensor_dim_int64_t_stable_bool", (DL_FUNC) &_torch_cpp_torch_method_sort_self_Tensor_dim_int64_t_stable_bool, 4},
    {"_torch_cpp_torch_method_sort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_sort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_sort_self_Tensor_dim_Dimname_stable_bool", (DL_FUNC) &_torch_cpp_torch_method_sort_self_Tensor_dim_Dimname_stable_bool, 4},
    {"_torch_cpp_torch_method_msort_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_msort_self_Tensor, 1},
    {"_torch_cpp_torch_method_argsort_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_argsort_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_method_argsort_self_Tensor_stable_bool_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_method_argsort_self_Tensor_stable_bool_dim_int64_t, 4},
    {"_torch_cpp_torch_method_argsort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_method_argsort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_method_topk_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_method_topk_self_Tensor_k_int64_t, 5},
    {"_torch_cpp_torch_method_all_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_all_self_Tensor, 1},
    {"_torch_cpp_torch_method_any_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_any_self_Tensor, 1},
    {"_torch_cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 4},
    {"_torch_cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 4},
    {"_torch_cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t, 4},
    {"_torch_cpp_torch_method_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_pow_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pow_self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_method_pow_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_method_pow_self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_method_pow__self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_method_pow__self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_method_pow__self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_method_pow__self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_method_float_power_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_method_float_power_self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_method_float_power_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_method_float_power_self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_method_float_power__self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_method_float_power__self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_method_float_power__self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_method_float_power__self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_method_normal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_normal__self_Tensor, 4},
    {"_torch_cpp_torch_method_alias_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_alias_self_Tensor, 1},
    {"_torch_cpp_torch_method_isfinite_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isfinite_self_Tensor, 1},
    {"_torch_cpp_torch_method_isinf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isinf_self_Tensor, 1},
    {"_torch_cpp_torch_method_record_stream_self_Tensor_s_Stream", (DL_FUNC) &_torch_cpp_torch_method_record_stream_self_Tensor_s_Stream, 2},
    {"_torch_cpp_torch_method_isposinf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isposinf_self_Tensor, 1},
    {"_torch_cpp_torch_method_isneginf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_isneginf_self_Tensor, 1},
    {"_torch_cpp_torch_method_det_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_det_self_Tensor, 1},
    {"_torch_cpp_torch_method_slogdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_slogdet_self_Tensor, 1},
    {"_torch_cpp_torch_method_logdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_logdet_self_Tensor, 1},
    {"_torch_cpp_torch_method_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_method_inverse_self_Tensor, 1},
    {"_torch_cpp_torch_method_inner_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_method_inner_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_method_outer_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_outer_self_Tensor_vec2_Tensor, 2},
    {"_torch_cpp_torch_method_ger_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_method_ger_self_Tensor_vec2_Tensor, 2},
    {"_torch_cpp_torch_method_to_padded_tensor_self_Tensor_padding_double", (DL_FUNC) &_torch_cpp_torch_method_to_padded_tensor_self_Tensor_padding_double, 3},
    {"_torch_cpp_torch_namespace__cast_Byte_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Byte_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Char_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Char_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Double_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Double_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Float_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Float_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Int_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Int_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Long_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Long_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Short_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Short_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cast_Half_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cast_Half_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__make_dual_primal_Tensor_tangent_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_dual_primal_Tensor_tangent_Tensor_level_int64_t, 3},
    {"_torch_cpp_torch_namespace__unpack_dual_dual_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__unpack_dual_dual_Tensor_level_int64_t, 2},
    {"_torch_cpp_torch_namespace__new_zeros_with_same_feature_meta_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__new_zeros_with_same_feature_meta_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace__has_same_storage_numel_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__has_same_storage_numel_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_align_tensors_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_align_tensors_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace__assert_async_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__assert_async_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__assert_tensor_metadata_a_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__assert_tensor_metadata_a_Tensor, 4},
    {"_torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t, 5},
    {"_torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t, 5},
    {"_torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool, 7},
    {"_torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t_deterministic_bool_zero_infinity_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_blank_int64_t_deterministic_bool_zero_infinity_bool, 7},
    {"_torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor, 16},
    {"_torch_cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4, 22},
    {"_torch_cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace__debug_has_internal_overlap_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__debug_has_internal_overlap_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__fused_dropout_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace__fused_dropout_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double", (DL_FUNC) &_torch_cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double, 3},
    {"_torch_cpp_torch_namespace_native_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_native_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_native_dropout_backward_grad_output_Tensor_mask_Tensor_scale_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_dropout_backward_grad_output_Tensor_mask_Tensor_scale_double, 3},
    {"_torch_cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t, 5},
    {"_torch_cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t, 3},
    {"_torch_cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t, 2},
    {"_torch_cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor, 2},
    {"_torch_cpp_torch_namespace__shape_as_tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__shape_as_tensor_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool, 3},
    {"_torch_cpp_torch_namespace_abs_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_abs_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_abs__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_abs__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_abs_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_abs_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_absolute_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_absolute_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_angle_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_angle_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_angle_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_angle_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_view_as_real_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_view_as_real_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_view_as_complex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_view_as_complex_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sgn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sgn_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_real_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_real_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_imag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_imag_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__conj_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conj_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__conj_physical_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__conj_physical_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_conj_physical_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conj_physical_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_conj_physical_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conj_physical_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_conj_physical__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conj_physical__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_resolve_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resolve_conj_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_resolve_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resolve_neg_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__neg_view_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__neg_view_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acos_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acos__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acos_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acos_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_arccos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arccos_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arccos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arccos__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_add_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_add_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace__add_relu_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__add_relu_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace__add_relu__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__add_relu__self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace__add_relu_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__add_relu_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace__add_relu__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__add_relu__self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_add_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_add_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor, 5},
    {"_torch_cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor, 6},
    {"_torch_cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor, 5},
    {"_torch_cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor, 6},
    {"_torch_cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool, 3},
    {"_torch_cpp_torch_namespace__is_all_true_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__is_all_true_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__is_any_true_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__is_any_true_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__test_check_tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_check_tensor_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_all_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_all_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_all_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_all_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_allclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_allclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_namespace_any_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_any_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_any_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_any_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_arange_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_end_Scalar, 2},
    {"_torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_arange_out_out_Tensor_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_out_out_Tensor_end_Scalar, 2},
    {"_torch_cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_argmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argmax_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_argmax_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argmax_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_argmin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argmin_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_argmin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argmin_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_acosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acosh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acosh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_arccosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arccosh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arccosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arccosh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_asinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asinh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_asinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asinh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_arcsinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arcsinh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arcsinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arcsinh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_atanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atanh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atanh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_arctanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctanh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arctanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctanh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_asin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asin_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_asin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asin__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_asin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_asin_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_arcsin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arcsin_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arcsin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arcsin__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_atan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atan_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_arctan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arctan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctan__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_atleast_1d_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atleast_1d_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atleast_1d_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_atleast_1d_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_atleast_2d_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atleast_2d_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atleast_2d_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_atleast_2d_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_atleast_3d_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atleast_3d_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_atleast_3d_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_atleast_3d_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor, 6},
    {"_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool, 9},
    {"_torch_cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t, 8},
    {"_torch_cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool, 9},
    {"_torch_cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor, 12},
    {"_torch_cpp_torch_namespace_bernoulli_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_bernoulli_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor, 4},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_bincount_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bincount_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_not_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_copysign_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copysign_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_copysign_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_copysign_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_copysign_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_logical_not_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_not_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_logical_and_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_and_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_logical_or_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_or_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_blackman_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_blackman_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor, 3},
    {"_torch_cpp_torch_namespace_broadcast_tensors_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_broadcast_tensors_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_broadcast_to_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_broadcast_to_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__sparse_broadcast_to_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_broadcast_to_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_cat_tensors_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cat_tensors_TensorList_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_concat_tensors_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_concat_tensors_TensorList_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_concat_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_concat_tensors_TensorList_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_concat_out_out_Tensor_tensors_TensorList_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_concatenate_tensors_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_concatenate_tensors_TensorList_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_concatenate_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_concatenate_tensors_TensorList_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_concatenate_out_out_Tensor_tensors_TensorList_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_block_diag_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_block_diag_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_ceil_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ceil_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_ceil__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ceil__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_chain_matmul_matrices_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_chain_matmul_matrices_TensorList, 1},
    {"_torch_cpp_torch_namespace_chain_matmul_out_out_Tensor_matrices_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_chain_matmul_out_out_Tensor_matrices_TensorList, 2},
    {"_torch_cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t, 3},
    {"_torch_cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t, 3},
    {"_torch_cpp_torch_namespace_tensor_split_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_tensor_split_self_Tensor_sections_int64_t, 3},
    {"_torch_cpp_torch_namespace_tensor_split_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_tensor_split_self_Tensor_indices_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tensor_split_self_Tensor_tensor_indices_or_sections_Tensor, 3},
    {"_torch_cpp_torch_namespace_clamp_self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_namespace_clamp_self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_namespace_clamp__self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp__self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_namespace_clamp__self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp__self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar, 4},
    {"_torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor, 4},
    {"_torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max_self_Tensor_max_Tensor, 2},
    {"_torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max__self_Tensor_max_Tensor, 2},
    {"_torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar, 3},
    {"_torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min_self_Tensor_min_Tensor, 2},
    {"_torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar, 2},
    {"_torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min__self_Tensor_min_Tensor, 2},
    {"_torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar, 3},
    {"_torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Tensor, 3},
    {"_torch_cpp_torch_namespace_clip_self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clip_self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_namespace_clip_self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clip_self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_namespace_clip__self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clip__self_Tensor_min_Scalar_max_Scalar, 3},
    {"_torch_cpp_torch_namespace_clip__self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clip__self_Tensor_min_Tensor_max_Tensor, 3},
    {"_torch_cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Scalar_max_Scalar, 4},
    {"_torch_cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clip_out_out_Tensor_self_Tensor_min_Tensor_max_Tensor, 4},
    {"_torch_cpp_torch_namespace_cudnn_is_acceptable_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_is_acceptable_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_complex_real_Tensor_imag_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_complex_real_Tensor_imag_Tensor, 2},
    {"_torch_cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor, 3},
    {"_torch_cpp_torch_namespace_polar_abs_Tensor_angle_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_polar_abs_Tensor_angle_Tensor, 2},
    {"_torch_cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor, 3},
    {"_torch_cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t, 9},
    {"_torch_cpp_torch_namespace_convolution_backward_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_backward_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t, 9},
    {"_torch_cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool, 13},
    {"_torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool, 12},
    {"_torch_cpp_torch_namespace__convolution_mode_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_c10string_view_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_mode_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_c10string_view_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 13},
    {"_torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor_padding_c10string_view, 7},
    {"_torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor_padding_c10string_view, 7},
    {"_torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor_padding_c10string_view, 7},
    {"_torch_cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor, 4},
    {"_torch_cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t, 5},
    {"_torch_cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_copy_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copy_self_Tensor_src_Tensor, 3},
    {"_torch_cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor, 3},
    {"_torch_cpp_torch_namespace__copy_from_and_resize_self_Tensor_dst_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__copy_from_and_resize_self_Tensor_dst_Tensor, 2},
    {"_torch_cpp_torch_namespace_cos_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cos_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cos__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cos__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cos_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cos_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cosh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cosh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_count_nonzero_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_count_nonzero_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_cov_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cov_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_corrcoef_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_corrcoef_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t, 5},
    {"_torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t, 5},
    {"_torch_cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double, 8},
    {"_torch_cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool, 10},
    {"_torch_cpp_torch_namespace__mps_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mps_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace_mps_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_mps_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2, 9},
    {"_torch_cpp_torch_namespace_cudnn_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace_cudnn_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 9},
    {"_torch_cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor, 2},
    {"_torch_cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor, 3},
    {"_torch_cpp_torch_namespace_cummax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cummax_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cummax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cummax_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cummin_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cummin_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cummin_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cummin_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t_output_Tensor, 4},
    {"_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_cumulative_trapezoid_y_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cumulative_trapezoid_y_Tensor_x_Tensor, 3},
    {"_torch_cpp_torch_namespace_cumulative_trapezoid_y_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cumulative_trapezoid_y_Tensor, 3},
    {"_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor, 7},
    {"_torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor, 6},
    {"_torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t, 9},
    {"_torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t, 9},
    {"_torch_cpp_torch_namespace_diag_embed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_embed_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_diagflat_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagflat_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_self_Tensor_dim1_int64_t_dim2_int64_t, 4},
    {"_torch_cpp_torch_namespace_linalg_diagonal_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_diagonal_A_Tensor, 4},
    {"_torch_cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname, 5},
    {"_torch_cpp_torch_namespace_diagonal_backward_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_backward_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t, 5},
    {"_torch_cpp_torch_namespace_diff_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diff_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_diff_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diff_out_out_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_Scalar_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_ArrayRefScalar_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_gradient_self_Tensor_spacing_TensorList_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_div_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_div_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_div_self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_div_self_Tensor_other_Tensor_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view, 4},
    {"_torch_cpp_torch_namespace_div_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_div_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_div_self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_div_self_Tensor_other_Scalar_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_namespace_divide_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_divide_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_divide_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_divide_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_divide_self_Tensor_other_Tensor_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor_rounding_mode_c10string_view, 4},
    {"_torch_cpp_torch_namespace_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_divide_self_Tensor_other_Scalar_rounding_mode_c10string_view, 3},
    {"_torch_cpp_torch_namespace_true_divide_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_true_divide_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_true_divide_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_true_divide_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_dot_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dot_self_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor, 3},
    {"_torch_cpp_torch_namespace_vdot_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_vdot_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_einsum_equation_c10string_view_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_einsum_equation_c10string_view_tensors_TensorList, 3},
    {"_torch_cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool, 6},
    {"_torch_cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool, 5},
    {"_torch_cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double, 4},
    {"_torch_cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool, 5},
    {"_torch_cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor, 9},
    {"_torch_cpp_torch_namespace__rowwise_prune_weight_Tensor_mask_Tensor_compressed_indices_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__rowwise_prune_weight_Tensor_mask_Tensor_compressed_indices_dtype_ScalarType, 3},
    {"_torch_cpp_torch_namespace_row_stack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_row_stack_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_row_stack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_row_stack_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool, 8},
    {"_torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool_padding_idx_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor_include_last_offset_bool_padding_idx_int64_t, 9},
    {"_torch_cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor, 9},
    {"_torch_cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor, 12},
    {"_torch_cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor, 10},
    {"_torch_cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor, 10},
    {"_torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t, 7},
    {"_torch_cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_empty_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t, 6},
    {"_torch_cpp_torch_namespace__resize_output__self_Tensor_size_IntArrayRef_device_Device", (DL_FUNC) &_torch_cpp_torch_namespace__resize_output__self_Tensor_size_IntArrayRef_device_Device, 3},
    {"_torch_cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor, 4},
    {"_torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_empty_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_empty_like_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_erf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erf__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erf__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erf_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erf_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_erfc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erfc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfc__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_exp__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_exp_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_exp2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp2_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_exp2__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp2__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_expm1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_expm1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_expm1__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_expm1__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_eye_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_eye_n_int64_t_m_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_n_int64_t_m_int64_t, 3},
    {"_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t, 3},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_fill_self_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fill_self_Tensor_value_Scalar, 2},
    {"_torch_cpp_torch_namespace_fill_self_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fill_self_Tensor_value_Tensor, 2},
    {"_torch_cpp_torch_namespace_fill__self_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fill__self_Tensor_value_Scalar, 2},
    {"_torch_cpp_torch_namespace_fill__self_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fill__self_Tensor_value_Tensor, 2},
    {"_torch_cpp_torch_namespace_floor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_floor__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_floor_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_frac_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frac_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_frac__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frac__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_frac_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frac_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_from_file_filename_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_from_file_filename_c10string_view, 4},
    {"_torch_cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_gcd_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gcd_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_gcd__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gcd__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_lcm_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lcm_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_lcm__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lcm__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2, 7},
    {"_torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2, 7},
    {"_torch_cpp_torch_namespace_hann_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hann_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double, 4},
    {"_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double, 5},
    {"_torch_cpp_torch_namespace_kaiser_window_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_kaiser_window_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double, 4},
    {"_torch_cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t, 6},
    {"_torch_cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double, 8},
    {"_torch_cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace__fft_r2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fft_r2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool, 4},
    {"_torch_cpp_torch_namespace__fft_r2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fft_r2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_onesided_bool, 5},
    {"_torch_cpp_torch_namespace__fft_c2r_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fft_c2r_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t, 4},
    {"_torch_cpp_torch_namespace__fft_c2r_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fft_c2r_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_last_dim_size_int64_t, 5},
    {"_torch_cpp_torch_namespace__fft_c2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fft_c2c_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool, 4},
    {"_torch_cpp_torch_namespace__fft_c2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fft_c2c_out_out_Tensor_self_Tensor_dim_IntArrayRef_normalization_int64_t_forward_bool, 5},
    {"_torch_cpp_torch_namespace__validate_compressed_sparse_indices_is_crow_bool_compressed_idx_Tensor_plain_idx_Tensor_cdim_int64_t_dim_int64_t_nnz_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__validate_compressed_sparse_indices_is_crow_bool_compressed_idx_Tensor_plain_idx_Tensor_cdim_int64_t_dim_int64_t_nnz_int64_t, 6},
    {"_torch_cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t, 1},
    {"_torch_cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t, 1},
    {"_torch_cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t, 2},
    {"_torch_cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t, 1},
    {"_torch_cpp_torch_namespace_index_self_Tensor_indices_constc10Listc10optionalTensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_self_Tensor_indices_constc10Listc10optionalTensor, 2},
    {"_torch_cpp_torch_namespace_index_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor, 3},
    {"_torch_cpp_torch_namespace_index_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_put__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_put_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 4},
    {"_torch_cpp_torch_namespace__index_put_impl__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__index_put_impl__self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 5},
    {"_torch_cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool", (DL_FUNC) &_torch_cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool, 9},
    {"_torch_cpp_torch_namespace_isclose_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isclose_self_Tensor_other_Tensor, 5},
    {"_torch_cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_elements_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_elements_Tensor, 5},
    {"_torch_cpp_torch_namespace_isin_elements_Tensor_test_elements_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isin_elements_Tensor_test_elements_Tensor, 4},
    {"_torch_cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_element_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_isin_out_out_Tensor_elements_Tensor_test_element_Scalar, 5},
    {"_torch_cpp_torch_namespace_isin_elements_Tensor_test_element_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_isin_elements_Tensor_test_element_Scalar, 4},
    {"_torch_cpp_torch_namespace_isin_out_out_Tensor_element_Scalar_test_elements_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isin_out_out_Tensor_element_Scalar_test_elements_Tensor, 5},
    {"_torch_cpp_torch_namespace_isin_element_Scalar_test_elements_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isin_element_Scalar_test_elements_Tensor, 4},
    {"_torch_cpp_torch_namespace_isnan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isnan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_distributed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_distributed_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_floating_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_floating_point_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_complex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_complex_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_conj_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_conj_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__is_zerotensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__is_zerotensor_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_neg_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_isreal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isreal_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_is_signed_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_signed_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_is_inference_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_is_inference_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_kl_div_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_kl_div_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_kron_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_kron_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_kron_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_kron_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_int64_t, 6},
    {"_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname, 6},
    {"_torch_cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_native_layer_norm_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_layer_norm_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double, 5},
    {"_torch_cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3, 8},
    {"_torch_cpp_torch_namespace_nan_to_num_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nan_to_num_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_nan_to_num__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nan_to_num__self_Tensor, 4},
    {"_torch_cpp_torch_namespace_nan_to_num_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nan_to_num_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_linear_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linear_input_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3, 4},
    {"_torch_cpp_torch_namespace_linear_out_out_Tensor_input_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linear_out_out_Tensor_input_Tensor_weight_Tensor, 4},
    {"_torch_cpp_torch_namespace_mkldnn_linear_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_self_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_mkldnn_linear_backward_input_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_backward_input_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_mkldnn_linear_backward_weights_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_backward_weights_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool, 4},
    {"_torch_cpp_torch_namespace_mkldnn_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_backward_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3, 4},
    {"_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor, 7},
    {"_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor, 7},
    {"_torch_cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor, 1},
    {"_torch_cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor, 1},
    {"_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor, 3},
    {"_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor, 3},
    {"_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor, 1},
    {"_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t, 3},
    {"_torch_cpp_torch_namespace_ldexp_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ldexp_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_ldexp__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ldexp__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_ldexp_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ldexp_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_linspace_start_Scalar_end_Scalar_steps_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_linspace_start_Scalar_end_Scalar_steps_int64_t, 4},
    {"_torch_cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t, 4},
    {"_torch_cpp_torch_namespace_log_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log10_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log10_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log10__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log10__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log10_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log10_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log1p_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log1p_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log1p__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log1p__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log2_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log2__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log2__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log2_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_xlogy_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_xlogy_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_xlogy_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_xlogy__self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy__self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_xlogy__self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy__self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_xlogy_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_logspace_start_Scalar_end_Scalar_steps_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_logspace_start_Scalar_end_Scalar_steps_int64_t, 5},
    {"_torch_cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar_steps_int64_t, 5},
    {"_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool, 3},
    {"_torch_cpp_torch_namespace__log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool, 4},
    {"_torch_cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace__log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList, 3},
    {"_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_matmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matmul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_matmul_backward_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_matmul_backward_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2, 4},
    {"_torch_cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_matrix_power_out_out_Tensor_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_power_out_out_Tensor_self_Tensor_n_int64_t, 3},
    {"_torch_cpp_torch_namespace_matrix_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_exp_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor, 2},
    {"_torch_cpp_torch_namespace__aminmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__aminmax_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_aminmax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_aminmax_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_aminmax_out_min_Tensor_max_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_aminmax_out_min_Tensor_max_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor, 2},
    {"_torch_cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor, 3},
    {"_torch_cpp_torch_namespace_max_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_max_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool, 5},
    {"_torch_cpp_torch_namespace_amax_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_amax_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_amax_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_amax_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool2d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool2d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool3d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool3d_backward_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mean_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_nanmean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nanmean_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_nanmean_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nanmean_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_median_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_median_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_median_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_median_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_median_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_median_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_nanmedian_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nanmedian_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_nanmedian_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nanmedian_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_nanmedian_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_nanmedian_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_nanmedian_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_min_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_min_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_amin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_amin_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_amin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_amin_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__mps_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mps_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace_mps_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_mps_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 8},
    {"_torch_cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace_mkldnn_rnn_layer_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_rnn_layer_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool, 16},
    {"_torch_cpp_torch_namespace_mkldnn_rnn_layer_backward_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_rnn_layer_backward_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor, 23},
    {"_torch_cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double, 8},
    {"_torch_cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double, 8},
    {"_torch_cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 10},
    {"_torch_cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 9},
    {"_torch_cpp_torch_namespace_miopen_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_relu_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 7},
    {"_torch_cpp_torch_namespace_miopen_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_add_relu_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 9},
    {"_torch_cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor, 14},
    {"_torch_cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4, 21},
    {"_torch_cpp_torch_namespace_mm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor, 3},
    {"_torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor, 2},
    {"_torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor_reduce_c10string_view, 3},
    {"_torch_cpp_torch_namespace__sparse_sparse_matmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sparse_matmul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_mode_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mode_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_mode_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_mode_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_mul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_mul_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_mul_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_multiply_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multiply_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_multiply_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_multiply_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_mv_self_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mv_self_Tensor_vec_Tensor, 2},
    {"_torch_cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor, 3},
    {"_torch_cpp_torch_namespace_mvlgamma_out_out_Tensor_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mvlgamma_out_out_Tensor_self_Tensor_p_int64_t, 3},
    {"_torch_cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_namespace_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_namespace_narrow_copy_out_out_Tensor_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_narrow_copy_out_out_Tensor_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 5},
    {"_torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t, 4},
    {"_torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t, 4},
    {"_torch_cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double, 8},
    {"_torch_cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double, 11},
    {"_torch_cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double, 8},
    {"_torch_cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double, 11},
    {"_torch_cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace__native_batch_norm_legit_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double, 6},
    {"_torch_cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace__native_batch_norm_legit_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_training_bool_momentum_double_eps_double, 9},
    {"_torch_cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double, 2},
    {"_torch_cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double, 6},
    {"_torch_cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double, 7},
    {"_torch_cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t, 8},
    {"_torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor, 8},
    {"_torch_cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool, 8},
    {"_torch_cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor, 8},
    {"_torch_cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double, 4},
    {"_torch_cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_ones_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_ones_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_ones_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ones_like_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor, 5},
    {"_torch_cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor, 4},
    {"_torch_cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor, 2},
    {"_torch_cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t, 4},
    {"_torch_cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor, 5},
    {"_torch_cpp_torch_namespace_pdist_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pdist_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__pdist_forward_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pdist_forward_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor, 4},
    {"_torch_cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor, 4},
    {"_torch_cpp_torch_namespace_permute_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_permute_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t, 3},
    {"_torch_cpp_torch_namespace_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_moveaxis_self_Tensor_source_IntArrayRef_destination_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_moveaxis_self_Tensor_source_int64_t_destination_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_moveaxis_self_Tensor_source_int64_t_destination_int64_t, 3},
    {"_torch_cpp_torch_namespace_adjoint_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adjoint_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t, 2},
    {"_torch_cpp_torch_namespace_pixel_unshuffle_self_Tensor_downscale_factor_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_pixel_unshuffle_self_Tensor_downscale_factor_int64_t, 2},
    {"_torch_cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t, 2},
    {"_torch_cpp_torch_namespace_native_channel_shuffle_self_Tensor_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_native_channel_shuffle_self_Tensor_groups_int64_t, 2},
    {"_torch_cpp_torch_namespace__pin_memory_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pin_memory_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_pinverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pinverse_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t, 6},
    {"_torch_cpp_torch_namespace_rad2deg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rad2deg_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_rad2deg__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rad2deg__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_deg2rad_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_deg2rad_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_deg2rad__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_deg2rad__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_scalar_tensor_s_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scalar_tensor_s_Scalar, 2},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_rand_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rand_like_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator, 4},
    {"_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator, 5},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator, 4},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator, 5},
    {"_torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_self_Tensor_high_int64_t, 4},
    {"_torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t, 5},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_randn_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_randn_like_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_randperm_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_randperm_n_int64_t_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_n_int64_t_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator", (DL_FUNC) &_torch_cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator, 3},
    {"_torch_cpp_torch_namespace_range_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_range_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar, 4},
    {"_torch_cpp_torch_namespace_ravel_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ravel_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_reciprocal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_reciprocal_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_reciprocal__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_reciprocal__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_neg_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_neg_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_neg__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_neg__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_neg_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_neg_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_negative_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_negative_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_negative__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_negative__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_negative_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_negative_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_repeat_interleave_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_repeats_Tensor, 2},
    {"_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor, 4},
    {"_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t, 4},
    {"_torch_cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__reshape_copy_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__reshape_copy_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__reshape_alias_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_round_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_round_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_round__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_round__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_round_self_Tensor_decimals_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_round_self_Tensor_decimals_int64_t, 2},
    {"_torch_cpp_torch_namespace_round__self_Tensor_decimals_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_round__self_Tensor_decimals_int64_t, 2},
    {"_torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor_decimals_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_round_out_out_Tensor_self_Tensor_decimals_int64_t, 3},
    {"_torch_cpp_torch_namespace_rrelu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_rrelu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu__self_Tensor, 5},
    {"_torch_cpp_torch_namespace_relu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_relu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_relu6_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu6_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_relu6__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu6__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_prelu_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_prelu_self_Tensor_weight_Tensor, 2},
    {"_torch_cpp_torch_namespace__prelu_kernel_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__prelu_kernel_self_Tensor_weight_Tensor, 2},
    {"_torch_cpp_torch_namespace__prelu_kernel_backward_grad_output_Tensor_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__prelu_kernel_backward_grad_output_Tensor_self_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_gelu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_gelu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu__self_Tensor, 2},
    {"_torch_cpp_torch_namespace_gelu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_gelu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_gelu_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gelu_backward_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardshrink_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardshrink_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_hardshrink_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardshrink_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardshrink_backward_out_grad_input_Tensor_grad_out_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardshrink_backward_out_grad_input_Tensor_grad_out_Tensor_self_Tensor_lambd_Scalar, 4},
    {"_torch_cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar, 3},
    {"_torch_cpp_torch_namespace_rsqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsqrt_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_rsqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsqrt__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t, 3},
    {"_torch_cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t, 3},
    {"_torch_cpp_torch_namespace_select_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t, 4},
    {"_torch_cpp_torch_namespace__nested_select_backward_grad_output_Tensor_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__nested_select_backward_grad_output_Tensor_self_Tensor_dim_int64_t_index_int64_t, 4},
    {"_torch_cpp_torch_namespace_selu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_selu_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_selu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_selu__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_celu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_celu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_celu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_celu__self_Tensor, 2},
    {"_torch_cpp_torch_namespace_silu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_silu_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_silu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_silu__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_silu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_silu_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_silu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_silu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_mish_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mish_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_mish__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mish__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_mish_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mish_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_mish_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mish_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sigmoid__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logit_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logit_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logit__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logit__self_Tensor, 2},
    {"_torch_cpp_torch_namespace_logit_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logit_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_sin_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sin_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sin__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sin__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sin_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sin_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sinc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sinc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinc__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sinc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sinh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sinh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_detach_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_detach_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_detach__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_detach__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_size_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_size_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_size_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_size_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_slice_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slice_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_slice_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_slice_backward_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t, 6},
    {"_torch_cpp_torch_namespace_slice_scatter_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slice_scatter_self_Tensor_src_Tensor, 6},
    {"_torch_cpp_torch_namespace_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_scatter_self_Tensor_src_Tensor_dim_int64_t_index_int64_t, 4},
    {"_torch_cpp_torch_namespace_diagonal_scatter_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_scatter_self_Tensor_src_Tensor, 5},
    {"_torch_cpp_torch_namespace_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided_scatter_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_smm_self_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_smm_self_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_softmax_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_softmax_out_out_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool, 3},
    {"_torch_cpp_torch_namespace__softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool, 4},
    {"_torch_cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace__softmax_backward_data_out_grad_input_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__softmax_backward_data_out_grad_input_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_input_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_namespace_split_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_split_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_namespace_split_self_Tensor_split_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_split_self_Tensor_split_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_hsplit_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hsplit_self_Tensor_sections_int64_t, 2},
    {"_torch_cpp_torch_namespace_hsplit_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_hsplit_self_Tensor_indices_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_vsplit_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_vsplit_self_Tensor_sections_int64_t, 2},
    {"_torch_cpp_torch_namespace_vsplit_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_vsplit_self_Tensor_indices_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_dsplit_self_Tensor_sections_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_dsplit_self_Tensor_sections_int64_t, 2},
    {"_torch_cpp_torch_namespace_dsplit_self_Tensor_indices_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_dsplit_self_Tensor_indices_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_stack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_stack_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList, 3},
    {"_torch_cpp_torch_namespace__stack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__stack_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace__stack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__stack_out_out_Tensor_tensors_TensorList, 3},
    {"_torch_cpp_torch_namespace_hstack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_hstack_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_vstack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_vstack_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_dstack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_dstack_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t, 10},
    {"_torch_cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t, 10},
    {"_torch_cpp_torch_namespace_stride_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_stride_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_stride_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_stride_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_sum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sum_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_sum_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_sum_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace__nested_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nested_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_nansum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nansum_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_sqrt_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sqrt_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sqrt__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sqrt__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_square_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_square_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_square__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_square__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_square_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_square_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_std_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_std_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_std_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_std_mean_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_std_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_std_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_prod_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_prod_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_prod_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_prod_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_prod_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_prod_self_Tensor_dim_Dimname, 4},
    {"_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_t_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tan_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tan_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tan__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tan__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tan_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tan_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_tensordot_out_out_Tensor_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_tensordot_out_out_Tensor_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_threshold_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_threshold_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_threshold_Scalar, 4},
    {"_torch_cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar, 3},
    {"_torch_cpp_torch_namespace_tile_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_tile_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname, 3},
    {"_torch_cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace_one_hot_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_one_hot_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_fliplr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fliplr_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_flipud_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_flipud_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_rot90_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rot90_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_trapezoid_y_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trapezoid_y_Tensor_x_Tensor, 3},
    {"_torch_cpp_torch_namespace_trapezoid_y_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trapezoid_y_Tensor, 3},
    {"_torch_cpp_torch_namespace_trapz_y_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trapz_y_Tensor_x_Tensor, 3},
    {"_torch_cpp_torch_namespace_trapz_y_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trapz_y_Tensor, 3},
    {"_torch_cpp_torch_namespace__transform_bias_rescale_qkv_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__transform_bias_rescale_qkv_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t, 3},
    {"_torch_cpp_torch_namespace__nested_tensor_from_mask_t_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_from_mask_t_Tensor_mask_Tensor, 3},
    {"_torch_cpp_torch_namespace__nested_tensor_from_mask_left_aligned_t_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_from_mask_left_aligned_t_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_namespace__nested_from_padded_padded_Tensor_cpu_nested_shape_example_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_from_padded_padded_Tensor_cpu_nested_shape_example_Tensor, 3},
    {"_torch_cpp_torch_namespace__nested_from_padded_and_nested_example_padded_Tensor_nt_example_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_from_padded_and_nested_example_padded_Tensor_nt_example_Tensor, 2},
    {"_torch_cpp_torch_namespace__nested_view_from_buffer_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nested_view_from_buffer_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__nested_view_from_buffer_copy_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nested_view_from_buffer_copy_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor, 8},
    {"_torch_cpp_torch_namespace_trunc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trunc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_trunc__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trunc__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_fix_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fix_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_fix__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fix__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_fix_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fix_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor, 2},
    {"_torch_cpp_torch_namespace__unique_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__unique_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_unique_consecutive_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_unique_consecutive_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace__unique2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__unique2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_vander_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_vander_x_Tensor, 3},
    {"_torch_cpp_torch_namespace_var_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_var_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_var_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_var_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList, 5},
    {"_torch_cpp_torch_namespace_var_mean_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_var_mean_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList, 4},
    {"_torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_where_out_out_Tensor_condition_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_where_out_out_Tensor_condition_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_where_condition_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_where_condition_Tensor, 1},
    {"_torch_cpp_torch_namespace_norm_except_dim_v_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_norm_except_dim_v_Tensor, 3},
    {"_torch_cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor, 3},
    {"_torch_cpp_torch_namespace__weight_norm_interface_v_Tensor_g_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_interface_v_Tensor_g_Tensor, 3},
    {"_torch_cpp_torch_namespace__weight_norm_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace__efficientzerotensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__efficientzerotensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_zeros_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_zeros_like_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_like_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor, 2},
    {"_torch_cpp_torch_namespace__standard_gamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__standard_gamma_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor, 3},
    {"_torch_cpp_torch_namespace__sample_dirichlet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sample_dirichlet_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_poisson_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_poisson_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_binomial_count_Tensor_prob_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binomial_count_Tensor_prob_Tensor, 3},
    {"_torch_cpp_torch_namespace_native_norm_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_native_norm_self_Tensor_p_Scalar, 2},
    {"_torch_cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType, 2},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType, 3},
    {"_torch_cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__sparse_csr_sum_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_csr_sum_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_csr_prod_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_csr_prod_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool, 3},
    {"_torch_cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool, 3},
    {"_torch_cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__spdiags_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__spdiags_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType, 3},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar, 2},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool, 4},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool, 5},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool, 4},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool, 5},
    {"_torch_cpp_torch_namespace_frexp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frexp_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_frexp_out_mantissa_Tensor_exponent_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_frexp_out_mantissa_Tensor_exponent_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_nuclear_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_clone_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clone_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_positive_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_positive_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor, 3},
    {"_torch_cpp_torch_namespace_resize_as_sparse__self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as_sparse__self_Tensor_the_template_Tensor, 2},
    {"_torch_cpp_torch_namespace_zero__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zero__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_sub_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sub_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_sub_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_sub_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_subtract_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_subtract_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_subtract_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_subtract_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_rsub_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsub_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor, 3},
    {"_torch_cpp_torch_namespace_heaviside_self_Tensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_heaviside_self_Tensor_values_Tensor, 2},
    {"_torch_cpp_torch_namespace_rsub_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_rsub_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace__sparse_addmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_addmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_namespace_sparse_sampled_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_sampled_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_sparse_sampled_addmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_sampled_addmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_namespace__sparse_mm_reduce_impl_self_Tensor_other_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_mm_reduce_impl_self_Tensor_other_Tensor_reduce_c10string_view, 3},
    {"_torch_cpp_torch_namespace__sparse_mm_reduce_impl_backward_self_Tensor_grad_out_Tensor_weight_Tensor_reduce_c10string_view_arg_out_Tensor_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_mm_reduce_impl_backward_self_Tensor_grad_out_Tensor_weight_Tensor_reduce_c10string_view_arg_out_Tensor_output_mask_stdarraybool2, 6},
    {"_torch_cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor, 5},
    {"_torch_cpp_torch_namespace__addmm_activation_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__addmm_activation_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 7},
    {"_torch_cpp_torch_namespace__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__addmm_activation_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions, 5},
    {"_torch_cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions, 5},
    {"_torch_cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions, 5},
    {"_torch_cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions, 5},
    {"_torch_cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions, 5},
    {"_torch_cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_compressed_tensor_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_csr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_csc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_bsr_tensor_crow_indices_Tensor_col_indices_Tensor_values_Tensor_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_bsc_tensor_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace__sparse_compressed_tensor_unsafe_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_compressed_tensor_unsafe_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_csr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_csr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_csc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_csc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_bsr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_bsr_tensor_unsafe_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_bsc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_bsc_tensor_unsafe_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions, 2},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_options_TensorOptions, 3},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__validate_sparse_compressed_tensor_args_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_layout_Layout", (DL_FUNC) &_torch_cpp_torch_namespace__validate_sparse_compressed_tensor_args_compressed_indices_Tensor_plain_indices_Tensor_values_Tensor_size_IntArrayRef_layout_Layout, 5},
    {"_torch_cpp_torch_namespace__validate_sparse_csr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__validate_sparse_csr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__validate_sparse_csc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__validate_sparse_csc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__validate_sparse_bsr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__validate_sparse_bsr_tensor_args_crow_indices_Tensor_col_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__validate_sparse_bsc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__validate_sparse_bsc_tensor_args_ccol_indices_Tensor_row_indices_Tensor_values_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions, 6},
    {"_torch_cpp_torch_namespace__to_cpu_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__to_cpu_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor, 2},
    {"_torch_cpp_torch_namespace__coalesce_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__coalesce_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor, 3},
    {"_torch_cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor, 2},
    {"_torch_cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor, 3},
    {"_torch_cpp_torch_namespace_unbind_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unbind_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_unbind_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_unbind_self_Tensor_dim_Dimname, 2},
    {"_torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor, 2},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_dynamic_self_Tensor_dtype_ScalarType_reduce_range_bool", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_dynamic_self_Tensor_dtype_ScalarType_reduce_range_bool, 3},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_dequantize_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dequantize_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_dequantize_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_dequantize_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_q_scale_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_scale_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_zero_point_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_zero_point_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_per_channel_scales_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_scales_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_per_channel_zero_points_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_zero_points_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_q_per_channel_axis_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_axis_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_int_repr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_int_repr_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t, 3},
    {"_torch_cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t, 4},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t, 5},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t, 5},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t, 5},
    {"_torch_cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t, 6},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_backward_grad_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_backward_grad_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t, 6},
    {"_torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t, 7},
    {"_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 6},
    {"_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 6},
    {"_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_backward_grad_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_backward_grad_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 7},
    {"_torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 8},
    {"_torch_cpp_torch_namespace_fused_moving_avg_obs_fake_quant_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fused_moving_avg_obs_fake_quant_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t, 13},
    {"_torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t, 13},
    {"_torch_cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor, 1},
    {"_torch_cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t, 5},
    {"_torch_cpp_torch_namespace__to_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__to_copy_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_meshgrid_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_meshgrid_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_meshgrid_tensors_TensorList_indexing_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_meshgrid_tensors_TensorList_indexing_c10string_view, 2},
    {"_torch_cpp_torch_namespace_cartesian_prod_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_cartesian_prod_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_combinations_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_combinations_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_result_type_other_Tensor_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_other_Tensor_tensor_Tensor, 2},
    {"_torch_cpp_torch_namespace_result_type_other_Scalar_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_other_Scalar_tensor_Tensor, 2},
    {"_torch_cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor, 2},
    {"_torch_cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar, 2},
    {"_torch_cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType, 2},
    {"_torch_cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType, 2},
    {"_torch_cpp_torch_namespace__local_scalar_dense_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__local_scalar_dense_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__lstm_mps_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__lstm_mps_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 9},
    {"_torch_cpp_torch_namespace_lstm_mps_backward_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_mps_backward_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 15},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor, 5},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool, 6},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool, 6},
    {"_torch_cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor, 8},
    {"_torch_cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor, 5},
    {"_torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool, 3},
    {"_torch_cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor, 6},
    {"_torch_cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool, 9},
    {"_torch_cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor, 6},
    {"_torch_cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar, 14},
    {"_torch_cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool, 3},
    {"_torch_cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool, 4},
    {"_torch_cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t, 5},
    {"_torch_cpp_torch_namespace_lift_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lift_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_lift_fresh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lift_fresh_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_lift_fresh_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lift_fresh_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_namespace__masked_softmax_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__masked_softmax_self_Tensor_mask_Tensor, 4},
    {"_torch_cpp_torch_namespace__masked_softmax_backward_grad_output_Tensor_output_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__masked_softmax_backward_grad_output_Tensor_output_Tensor_mask_Tensor, 4},
    {"_torch_cpp_torch_namespace_put_self_Tensor_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_put_self_Tensor_index_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 6},
    {"_torch_cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_namespace_index_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_index_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view, 7},
    {"_torch_cpp_torch_namespace_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_index_reduce_self_Tensor_dim_int64_t_index_Tensor_source_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 5},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 5},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 5},
    {"_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view, 5},
    {"_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_c10string_view, 6},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_add_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor, 5},
    {"_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_reduce_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 6},
    {"_torch_cpp_torch_namespace_scatter_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_scatter_reduce_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_c10string_view, 7},
    {"_torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_bitwise_and_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_and_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___and___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___and___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___and___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___and___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_bitwise_or_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_or_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___or___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___or___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___or___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___or___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_bitwise_xor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___xor___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___xor___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___xor___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___xor___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___lshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___lshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___lshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___lshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_left_shift_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_bitwise_left_shift_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_left_shift_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace___rshift___self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___rshift___self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace___rshift___self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___rshift___self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_right_shift_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_bitwise_right_shift_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_right_shift_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor, 6},
    {"_torch_cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor, 5},
    {"_torch_cpp_torch_namespace_diag_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_diag_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_cross_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cross_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_triu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_triu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tril_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tril_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_tril_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tril_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t, 4},
    {"_torch_cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t, 4},
    {"_torch_cpp_torch_namespace_trace_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trace_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_ne_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ne_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_ne_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ne_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_not_equal_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_not_equal_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_not_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_not_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_eq_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_eq_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_eq_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_eq_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_ge_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_ge_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_ge_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ge_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_le_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_le_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_le_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_le_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_less_equal_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_less_equal_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_less_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_less_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_gt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_gt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_gt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_greater_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_greater_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_greater_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_greater_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_lt_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lt_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_lt_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lt_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_less_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_less_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_less_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_less_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor, 3},
    {"_torch_cpp_torch_namespace_take_self_Tensor_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_take_self_Tensor_index_Tensor, 2},
    {"_torch_cpp_torch_namespace_take_along_dim_out_out_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_take_along_dim_out_out_Tensor_self_Tensor_indices_Tensor, 4},
    {"_torch_cpp_torch_namespace_take_along_dim_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_take_along_dim_self_Tensor_indices_Tensor, 3},
    {"_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor, 3},
    {"_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor, 3},
    {"_torch_cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor, 3},
    {"_torch_cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor, 2},
    {"_torch_cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor, 3},
    {"_torch_cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_nonzero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nonzero_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_nonzero_numpy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nonzero_numpy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_argwhere_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_argwhere_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor, 5},
    {"_torch_cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor, 4},
    {"_torch_cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool", (DL_FUNC) &_torch_cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool, 5},
    {"_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor, 5},
    {"_torch_cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor, 4},
    {"_torch_cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor, 4},
    {"_torch_cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor, 5},
    {"_torch_cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor, 5},
    {"_torch_cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor, 4},
    {"_torch_cpp_torch_namespace_cross_entropy_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cross_entropy_loss_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor, 7},
    {"_torch_cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_namespace__linalg_check_errors_info_Tensor_api_name_c10string_view_is_matrix_bool", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_check_errors_info_Tensor_api_name_c10string_view_is_matrix_bool, 3},
    {"_torch_cpp_torch_namespace_linalg_solve_triangular_out_out_Tensor_self_Tensor_B_Tensor_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_solve_triangular_out_out_Tensor_self_Tensor_B_Tensor_upper_bool, 6},
    {"_torch_cpp_torch_namespace_linalg_solve_triangular_self_Tensor_B_Tensor_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_solve_triangular_self_Tensor_B_Tensor_upper_bool, 5},
    {"_torch_cpp_torch_namespace_linalg_vander_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_vander_x_Tensor, 2},
    {"_torch_cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_svd_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_svd_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_swapaxes_self_Tensor_axis0_int64_t_axis1_int64_t, 3},
    {"_torch_cpp_torch_namespace_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_swapdims_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_cholesky_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor, 4},
    {"_torch_cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor, 3},
    {"_torch_cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool, 3},
    {"_torch_cpp_torch_namespace_cholesky_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_inverse_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_qr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_qr_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_geqrf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_geqrf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor, 2},
    {"_torch_cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor, 3},
    {"_torch_cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor, 6},
    {"_torch_cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor, 5},
    {"_torch_cpp_torch_namespace__lu_with_info_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__lu_with_info_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 4},
    {"_torch_cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor, 3},
    {"_torch_cpp_torch_namespace_lu_unpack_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lu_unpack_LU_data_Tensor_LU_pivots_Tensor, 4},
    {"_torch_cpp_torch_namespace_lu_unpack_out_P_Tensor_L_Tensor_U_Tensor_LU_data_Tensor_LU_pivots_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lu_unpack_out_P_Tensor_L_Tensor_U_Tensor_LU_data_Tensor_LU_pivots_Tensor, 7},
    {"_torch_cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t, 5},
    {"_torch_cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t, 4},
    {"_torch_cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_lgamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lgamma_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_digamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_digamma_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_erfinv_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfinv_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_i0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_i0_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_i0__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_i0__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_i0_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_i0_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_sign_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sign_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sign_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sign_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_signbit_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_signbit_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_dist_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dist_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_atan2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_atan2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_arctan2_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctan2_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_arctan2_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_arctan2_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar, 4},
    {"_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor, 4},
    {"_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar, 3},
    {"_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor, 3},
    {"_torch_cpp_torch_namespace_histc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_histc_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_histc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_histc_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_Tensor, 6},
    {"_torch_cpp_torch_namespace_histogram_self_Tensor_bins_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_histogram_self_Tensor_bins_Tensor, 4},
    {"_torch_cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_histogram_out_hist_Tensor_bin_edges_Tensor_self_Tensor_bins_int64_t, 7},
    {"_torch_cpp_torch_namespace_histogram_self_Tensor_bins_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_histogram_self_Tensor_bins_int64_t, 5},
    {"_torch_cpp_torch_namespace__histogramdd_bin_edges_self_Tensor_bins_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__histogramdd_bin_edges_self_Tensor_bins_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__histogramdd_from_bin_cts_self_Tensor_bins_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__histogramdd_from_bin_cts_self_Tensor_bins_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__histogramdd_from_bin_tensors_self_Tensor_bins_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__histogramdd_from_bin_tensors_self_Tensor_bins_TensorList, 4},
    {"_torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_int64_t, 5},
    {"_torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_histogramdd_self_Tensor_bins_TensorList, 5},
    {"_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_fmod_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_fmod_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmod_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_hypot_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hypot_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_igamma_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_igamma_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_igamma_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_igamma_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_igammac_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_igammac_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_igammac_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_igammac_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_nextafter_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nextafter_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_remainder_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_remainder_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_remainder_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_min_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_fmin_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmin_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_fmin_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmin_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_max_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_fmax_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmax_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_fmax_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fmax_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_maximum_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_maximum_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_max_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_max_out_out_Tensor_other_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_out_Tensor_other_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_max_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_minimum_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_minimum_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_min_out_out_Tensor_other_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_min_out_out_Tensor_other_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_min_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_min_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_quantile_self_Tensor_q_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_quantile_self_Tensor_q_Tensor, 5},
    {"_torch_cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor, 6},
    {"_torch_cpp_torch_namespace_quantile_self_Tensor_q_double", (DL_FUNC) &_torch_cpp_torch_namespace_quantile_self_Tensor_q_double, 5},
    {"_torch_cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double", (DL_FUNC) &_torch_cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double, 6},
    {"_torch_cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor, 5},
    {"_torch_cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor, 6},
    {"_torch_cpp_torch_namespace_nanquantile_self_Tensor_q_double", (DL_FUNC) &_torch_cpp_torch_namespace_nanquantile_self_Tensor_q_double, 5},
    {"_torch_cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double", (DL_FUNC) &_torch_cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double, 6},
    {"_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_int64_t, 6},
    {"_torch_cpp_torch_namespace_sort_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sort_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_sort_self_Tensor_dim_int64_t_stable_bool", (DL_FUNC) &_torch_cpp_torch_namespace_sort_self_Tensor_dim_int64_t_stable_bool, 4},
    {"_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname, 5},
    {"_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_stable_bool_dim_Dimname, 6},
    {"_torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname_stable_bool", (DL_FUNC) &_torch_cpp_torch_namespace_sort_self_Tensor_dim_Dimname_stable_bool, 4},
    {"_torch_cpp_torch_namespace_msort_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_msort_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_msort_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_msort_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_argsort_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_argsort_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_argsort_self_Tensor_stable_bool_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_argsort_self_Tensor_stable_bool_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_argsort_self_Tensor_dim_Dimname", (DL_FUNC) &_torch_cpp_torch_namespace_argsort_self_Tensor_dim_Dimname, 3},
    {"_torch_cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t, 7},
    {"_torch_cpp_torch_namespace_topk_self_Tensor_k_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_topk_self_Tensor_k_int64_t, 5},
    {"_torch_cpp_torch_namespace_all_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_all_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_all_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_any_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_any_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_any_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 5},
    {"_torch_cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar, 4},
    {"_torch_cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t, 5},
    {"_torch_cpp_torch_namespace_equal_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_equal_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor, 3},
    {"_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor, 3},
    {"_torch_cpp_torch_namespace_pow_self_Scalar_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_pow_self_Scalar_exponent_Tensor, 2},
    {"_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar, 3},
    {"_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_pow_self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Tensor, 3},
    {"_torch_cpp_torch_namespace_float_power_self_Tensor_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_float_power_self_Tensor_exponent_Tensor, 2},
    {"_torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Scalar_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Scalar_exponent_Tensor, 3},
    {"_torch_cpp_torch_namespace_float_power_self_Scalar_exponent_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_float_power_self_Scalar_exponent_Tensor, 2},
    {"_torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_float_power_out_out_Tensor_self_Tensor_exponent_Scalar, 3},
    {"_torch_cpp_torch_namespace_float_power_self_Tensor_exponent_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_float_power_self_Tensor_exponent_Scalar, 2},
    {"_torch_cpp_torch_namespace_normal_functional_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_functional_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_double", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_double, 4},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor, 4},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor, 4},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_size_IntArrayRef_std_double", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_mean_double_size_IntArrayRef_std_double, 5},
    {"_torch_cpp_torch_namespace_alias_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_alias_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale__self_TensorList_found_inf_Tensor_inv_scale_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale__self_TensorList_found_inf_Tensor_inv_scale_Tensor, 3},
    {"_torch_cpp_torch_namespace__amp_update_scale__self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__amp_update_scale__self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t, 6},
    {"_torch_cpp_torch_namespace__foreach_add_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_sub_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_mul_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_div_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_maximum_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_maximum__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_minimum_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum_self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_minimum__self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum__self_TensorList_scalar_Scalar, 2},
    {"_torch_cpp_torch_namespace__foreach_add_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_sub_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_mul_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul_self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_div_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div_self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_maximum_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum_self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_maximum__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum__self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_minimum_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum_self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_minimum__self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum__self_TensorList_other_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_add_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_add__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_sub_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_sub__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_div_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_div__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_mul_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_mul__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_maximum_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_maximum__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_minimum_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum_self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_minimum__self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum__self_TensorList_scalars_ArrayRefScalar, 2},
    {"_torch_cpp_torch_namespace__foreach_exp_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_exp_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_zero__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_zero__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_exp__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_exp__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sqrt_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sqrt_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sqrt__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sqrt__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_abs_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_abs_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_abs__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_abs__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_acos_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_acos_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_acos__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_acos__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_asin_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_asin_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_asin__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_asin__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_atan_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_atan_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_atan__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_atan__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_ceil_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_ceil_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_ceil__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_ceil__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_cos_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_cos_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_cos__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_cos__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_cosh_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_cosh_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_cosh__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_cosh__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_erf_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_erf_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_erf__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_erf__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_erfc_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_erfc_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_erfc__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_erfc__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_expm1_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_expm1_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_expm1__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_expm1__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_floor_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_floor_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_floor__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_floor__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log10_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log10_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log10__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log10__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log1p_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log1p_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log1p__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log1p__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log2_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log2_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_log2__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log2__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_neg_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_neg_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_neg__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_neg__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_tan_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_tan_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_tan__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_tan__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_tanh_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_tanh_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_tanh__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_tanh__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sin_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sin_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sin__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sin__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sinh_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sinh_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sinh__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sinh__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_round_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_round_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_round__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_round__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_lgamma_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lgamma_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_lgamma__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lgamma__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_frac_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_frac_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_frac__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_frac__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_reciprocal_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_reciprocal_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_reciprocal__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_reciprocal__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sigmoid_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sigmoid_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sigmoid__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sigmoid__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_trunc_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_trunc_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_trunc__self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_trunc__self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar, 4},
    {"_torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor, 4},
    {"_torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar, 4},
    {"_torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor, 4},
    {"_torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar, 4},
    {"_torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor, 4},
    {"_torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar, 4},
    {"_torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor, 4},
    {"_torch_cpp_torch_namespace__foreach_norm_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_norm_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weights_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weights_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weights_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weights_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lerp_self_TensorList_tensors1_TensorList_weight_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lerp__self_TensorList_tensors1_TensorList_weight_Scalar, 3},
    {"_torch_cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor, 4},
    {"_torch_cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor, 5},
    {"_torch_cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor, 4},
    {"_torch_cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor, 7},
    {"_torch_cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar, 6},
    {"_torch_cpp_torch_namespace__convert_indices_from_coo_to_csr_self_Tensor_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__convert_indices_from_coo_to_csr_self_Tensor_size_int64_t, 3},
    {"_torch_cpp_torch_namespace__convert_indices_from_coo_to_csr_out_out_Tensor_self_Tensor_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__convert_indices_from_coo_to_csr_out_out_Tensor_self_Tensor_size_int64_t, 4},
    {"_torch_cpp_torch_namespace__convert_indices_from_csr_to_coo_crow_indices_Tensor_col_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__convert_indices_from_csr_to_coo_crow_indices_Tensor_col_indices_Tensor, 4},
    {"_torch_cpp_torch_namespace__convert_indices_from_csr_to_coo_out_out_Tensor_crow_indices_Tensor_col_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__convert_indices_from_csr_to_coo_out_out_Tensor_crow_indices_Tensor_col_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 4},
    {"_torch_cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor, 7},
    {"_torch_cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar, 8},
    {"_torch_cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar, 7},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t, 3},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_nll_loss_nd_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_nd_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 7},
    {"_torch_cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 5},
    {"_torch_cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 7},
    {"_torch_cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t, 5},
    {"_torch_cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 8},
    {"_torch_cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor, 7},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double, 6},
    {"_torch_cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double, 5},
    {"_torch_cpp_torch_namespace_huber_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_huber_loss_out_out_Tensor_self_Tensor_target_Tensor, 5},
    {"_torch_cpp_torch_namespace_huber_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_huber_loss_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_huber_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double", (DL_FUNC) &_torch_cpp_torch_namespace_huber_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double, 6},
    {"_torch_cpp_torch_namespace_huber_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double", (DL_FUNC) &_torch_cpp_torch_namespace_huber_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_delta_double, 5},
    {"_torch_cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor, 4},
    {"_torch_cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor, 3},
    {"_torch_cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 5},
    {"_torch_cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t, 4},
    {"_torch_cpp_torch_namespace_elu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_elu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor, 7},
    {"_torch_cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_is_result_bool_self_or_result_Tensor, 6},
    {"_torch_cpp_torch_namespace_elu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_elu__self_Tensor, 4},
    {"_torch_cpp_torch_namespace_glu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_glu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_glu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_glu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_glu_jvp_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_jvp_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_glu_backward_jvp_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_backward_jvp_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t, 6},
    {"_torch_cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardsigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardsigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_hardsigmoid__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardsigmoid__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_hardsigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardsigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_hardtanh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar, 5},
    {"_torch_cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar, 4},
    {"_torch_cpp_torch_namespace_hardtanh__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardtanh__self_Tensor, 3},
    {"_torch_cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_hardswish_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardswish_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_hardswish__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardswish__self_Tensor, 1},
    {"_torch_cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_leaky_relu_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool, 5},
    {"_torch_cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool, 4},
    {"_torch_cpp_torch_namespace_leaky_relu__self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_leaky_relu__self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_log_sigmoid_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_log_sigmoid_forward_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_forward_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor, 4},
    {"_torch_cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor, 3},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor, 7},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor, 6},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool, 7},
    {"_torch_cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor, 6},
    {"_torch_cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_softplus_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar, 5},
    {"_torch_cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar, 4},
    {"_torch_cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_softshrink_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar, 4},
    {"_torch_cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor, 3},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor, 4},
    {"_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor, 3},
    {"_torch_cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 9},
    {"_torch_cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 8},
    {"_torch_cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 9},
    {"_torch_cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t, 8},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 4},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor, 4},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 6},
    {"_torch_cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor, 5},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 9},
    {"_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 8},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 9},
    {"_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor, 8},
    {"_torch_cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_reflection_pad3d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad3d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_reflection_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_reflection_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_reflection_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__pad_circular_self_Tensor_pad_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__pad_circular_self_Tensor_pad_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__pad_enum_self_Tensor_pad_IntArrayRef_mode_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__pad_enum_self_Tensor_pad_IntArrayRef_mode_int64_t, 4},
    {"_torch_cpp_torch_namespace_pad_self_Tensor_pad_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_pad_self_Tensor_pad_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble, 4},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble, 4},
    {"_torch_cpp_torch_namespace__upsample_bilinear2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bilinear2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble, 4},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble, 4},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble, 4},
    {"_torch_cpp_torch_namespace__upsample_bicubic2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bicubic2d_aa_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 7},
    {"_torch_cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace__upsample_bilinear2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bilinear2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace__upsample_bilinear2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bilinear2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace__upsample_bilinear2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bilinear2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 7},
    {"_torch_cpp_torch_namespace__upsample_bilinear2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bilinear2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 7},
    {"_torch_cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace__upsample_bicubic2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bicubic2d_aa_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace__upsample_bicubic2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bicubic2d_aa_self_Tensor_output_size_IntArrayRef_align_corners_bool, 5},
    {"_torch_cpp_torch_namespace__upsample_bicubic2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bicubic2d_aa_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 7},
    {"_torch_cpp_torch_namespace__upsample_bicubic2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_bicubic2d_aa_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool, 7},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 8},
    {"_torch_cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool, 7},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact1d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact1d_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact2d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact2d_self_Tensor_output_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact3d_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact3d_self_Tensor_output_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__upsample_nearest_exact3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__upsample_nearest_exact3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor, 3},
    {"_torch_cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor, 2},
    {"_torch_cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor, 3},
    {"_torch_cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor, 2},
    {"_torch_cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__slow_conv2d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__slow_conv2d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace__slow_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__slow_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__slow_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__slow_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace__slow_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace__slow_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3, 7},
    {"_torch_cpp_torch_namespace__conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace__conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_conv_depthwise3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_conv_depthwise3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_column_stack_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_column_stack_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_column_stack_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_column_stack_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_isfinite_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isfinite_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_isinf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isinf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_isposinf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isposinf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_isneginf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isneginf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t, 3},
    {"_torch_cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_special_entr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_entr_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_entr_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_entr_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_ndtri_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_ndtri_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_ndtri_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_ndtri_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_log_ndtr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_log_ndtr_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_log_ndtr_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_log_ndtr_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_expm1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_expm1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_expm1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_expm1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_exp2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_exp2_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_exp2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_exp2_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_psi_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_psi_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_psi_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_psi_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_digamma_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_digamma_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_digamma_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_digamma_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_gammaln_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_gammaln_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_gammaln_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_gammaln_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_erf_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erf_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_erf_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erf_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_erfc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erfc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_erfc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erfc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_erfcx_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erfcx_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_erfcx_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erfcx_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_erfinv_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erfinv_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_erfinv_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_erfinv_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_ndtr_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_ndtr_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_ndtr_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_ndtr_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_xlog1py_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlog1py_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_xlog1py_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlog1py_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_xlog1py_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlog1py_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlog1py_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_xlogy_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlogy_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_xlogy_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlogy_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_xlogy_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlogy_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_xlogy_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_zeta_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_zeta_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_zeta_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_zeta_self_Scalar_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_zeta_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_zeta_self_Tensor_other_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_zeta_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_i0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i0_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_i0_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i0_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_i0e_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i0e_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_i0e_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i0e_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_i1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_i1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_i1e_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i1e_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_i1e_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_i1e_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_logit_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_logit_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_logit_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_logit_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_polygamma_out_out_Tensor_n_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_polygamma_out_out_Tensor_n_int64_t_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_logsumexp_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_special_logsumexp_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_special_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_special_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_special_expit_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_expit_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_expit_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_expit_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_sinc_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_sinc_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_sinc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_sinc_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_round_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_round_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_round_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_round_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_log1p_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_log1p_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_log1p_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_log1p_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_log_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_special_log_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_special_gammainc_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_gammainc_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_gammainc_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_gammainc_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_gammaincc_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_gammaincc_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_gammaincc_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_gammaincc_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_multigammaln_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_special_multigammaln_self_Tensor_p_int64_t, 2},
    {"_torch_cpp_torch_namespace_special_multigammaln_out_out_Tensor_self_Tensor_p_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_special_multigammaln_out_out_Tensor_self_Tensor_p_int64_t, 3},
    {"_torch_cpp_torch_namespace_special_softmax_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_special_softmax_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_fft_fft_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fft_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_fft_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fft_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_ifft_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifft_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_ifft_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifft_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_rfft_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfft_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_rfft_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfft_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_irfft_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_irfft_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_irfft_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_irfft_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_hfft_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_hfft_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_hfft_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_hfft_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_ihfft_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ihfft_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_ihfft_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ihfft_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_fft2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fft2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_fft2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fft2_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_ifft2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifft2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_ifft2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifft2_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_rfft2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfft2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_rfft2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfft2_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_irfft2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_irfft2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_irfft2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_irfft2_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_hfft2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_hfft2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_hfft2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_hfft2_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_ihfft2_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ihfft2_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_ihfft2_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ihfft2_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_fftn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fftn_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_fftn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fftn_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_ifftn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifftn_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_ifftn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifftn_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_rfftn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfftn_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_rfftn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfftn_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_irfftn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_irfftn_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_irfftn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_irfftn_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_hfftn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_hfftn_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_hfftn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_hfftn_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_ihfftn_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ihfftn_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_fft_ihfftn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ihfftn_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_fft_fftfreq_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fftfreq_n_int64_t, 3},
    {"_torch_cpp_torch_namespace_fft_fftfreq_out_out_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fftfreq_out_out_Tensor_n_int64_t, 3},
    {"_torch_cpp_torch_namespace_fft_rfftfreq_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfftfreq_n_int64_t, 3},
    {"_torch_cpp_torch_namespace_fft_rfftfreq_out_out_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fft_rfftfreq_out_out_Tensor_n_int64_t, 3},
    {"_torch_cpp_torch_namespace_fft_fftshift_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_fftshift_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_fft_ifftshift_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fft_ifftshift_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_cholesky_ex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cholesky_ex_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_cholesky_ex_out_L_Tensor_info_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cholesky_ex_out_L_Tensor_info_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_cholesky_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cholesky_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_cholesky_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cholesky_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_cross_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cross_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_cross_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cross_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_lu_factor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_factor_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_lu_factor_out_LU_Tensor_pivots_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_factor_out_LU_Tensor_pivots_Tensor_A_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_lu_factor_ex_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_factor_ex_A_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_lu_factor_ex_out_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_factor_ex_out_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor, 6},
    {"_torch_cpp_torch_namespace_linalg_lu_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_lu_out_P_Tensor_L_Tensor_U_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_out_P_Tensor_L_Tensor_U_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_lu_solve_LU_Tensor_pivots_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_solve_LU_Tensor_pivots_Tensor_B_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_lu_solve_out_out_Tensor_LU_Tensor_pivots_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lu_solve_out_out_Tensor_LU_Tensor_pivots_Tensor_B_Tensor, 6},
    {"_torch_cpp_torch_namespace__linalg_det_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_det_A_Tensor, 1},
    {"_torch_cpp_torch_namespace__linalg_det_out_result_Tensor_LU_Tensor_pivots_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_det_out_result_Tensor_LU_Tensor_pivots_Tensor_A_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_det_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_det_A_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_det_out_out_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_det_out_out_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_det_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_det_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_ldl_factor_ex_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_ldl_factor_ex_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_ldl_factor_ex_out_LD_Tensor_pivots_Tensor_info_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_ldl_factor_ex_out_LD_Tensor_pivots_Tensor_info_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_linalg_ldl_factor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_ldl_factor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_ldl_factor_out_LD_Tensor_pivots_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_ldl_factor_out_LD_Tensor_pivots_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_ldl_solve_LD_Tensor_pivots_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_ldl_solve_LD_Tensor_pivots_Tensor_B_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_ldl_solve_out_out_Tensor_LD_Tensor_pivots_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_ldl_solve_out_out_Tensor_LD_Tensor_pivots_Tensor_B_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_lstsq_self_Tensor_b_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lstsq_self_Tensor_b_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_lstsq_out_solution_Tensor_residuals_Tensor_rank_Tensor_singular_values_Tensor_self_Tensor_b_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_lstsq_out_solution_Tensor_residuals_Tensor_rank_Tensor_singular_values_Tensor_self_Tensor_b_Tensor, 8},
    {"_torch_cpp_torch_namespace_linalg_matmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matmul_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_matmul_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matmul_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_vecdot_x_Tensor_y_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_vecdot_x_Tensor_y_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_vecdot_out_out_Tensor_x_Tensor_y_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_vecdot_out_out_Tensor_x_Tensor_y_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_matrix_exp_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_exp_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__linalg_slogdet_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_slogdet_A_Tensor, 1},
    {"_torch_cpp_torch_namespace__linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_LU_Tensor_pivots_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_LU_Tensor_pivots_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_slogdet_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_slogdet_A_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_slogdet_out_sign_Tensor_logabsdet_Tensor_A_Tensor, 3},
    {"_torch_cpp_torch_namespace_slogdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slogdet_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_slogdet_out_sign_Tensor_logabsdet_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slogdet_out_sign_Tensor_logabsdet_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_logdet_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_logdet_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_eig_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eig_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_eig_out_eigenvalues_Tensor_eigenvectors_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eig_out_eigenvalues_Tensor_eigenvectors_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_eigvals_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eigvals_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_eigvals_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eigvals_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__linalg_eigh_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_eigh_A_Tensor, 3},
    {"_torch_cpp_torch_namespace__linalg_eigh_out_eigenvalues_Tensor_eigenvectors_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_eigh_out_eigenvalues_Tensor_eigenvectors_Tensor_A_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_eigh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eigh_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_eigh_out_eigvals_Tensor_eigvecs_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eigh_out_eigvals_Tensor_eigvecs_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_eigvalsh_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eigvalsh_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_eigvalsh_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_eigvalsh_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_householder_product_input_Tensor_tau_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_householder_product_input_Tensor_tau_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_householder_product_out_out_Tensor_input_Tensor_tau_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_householder_product_out_out_Tensor_input_Tensor_tau_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_inv_ex_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_inv_ex_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_inv_ex_out_inverse_Tensor_info_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_inv_ex_out_inverse_Tensor_info_Tensor_A_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_inv_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_inv_A_Tensor, 1},
    {"_torch_cpp_torch_namespace_linalg_inv_out_out_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_inv_out_out_Tensor_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_inverse_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_inverse_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_inner_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_inner_self_Tensor_other_Tensor, 2},
    {"_torch_cpp_torch_namespace_inner_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_inner_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_outer_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_outer_self_Tensor_vec2_Tensor, 2},
    {"_torch_cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor, 3},
    {"_torch_cpp_torch_namespace_ger_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ger_self_Tensor_vec2_Tensor, 2},
    {"_torch_cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_norm_self_Tensor_ord_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_norm_self_Tensor_ord_Scalar, 5},
    {"_torch_cpp_torch_namespace_linalg_norm_self_Tensor_ord_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_norm_self_Tensor_ord_c10string_view, 5},
    {"_torch_cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_Scalar, 6},
    {"_torch_cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_c10string_view, 6},
    {"_torch_cpp_torch_namespace_linalg_vector_norm_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_vector_norm_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_vector_norm_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_vector_norm_out_out_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_Scalar, 5},
    {"_torch_cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_Scalar, 6},
    {"_torch_cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_norm_self_Tensor_ord_c10string_view, 5},
    {"_torch_cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_norm_out_out_Tensor_self_Tensor_ord_c10string_view, 6},
    {"_torch_cpp_torch_namespace__linalg_svd_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_svd_A_Tensor, 4},
    {"_torch_cpp_torch_namespace__linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor, 7},
    {"_torch_cpp_torch_namespace_linalg_svd_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_svd_A_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_svd_out_U_Tensor_S_Tensor_Vh_Tensor_A_Tensor, 6},
    {"_torch_cpp_torch_namespace_linalg_svdvals_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_svdvals_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_svdvals_out_out_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_svdvals_out_out_Tensor_A_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_cond_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cond_self_Tensor_p_Scalar, 2},
    {"_torch_cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_Scalar, 3},
    {"_torch_cpp_torch_namespace_linalg_cond_self_Tensor_p_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cond_self_Tensor_p_c10string_view, 2},
    {"_torch_cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_cond_out_out_Tensor_self_Tensor_p_c10string_view, 3},
    {"_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_atol_Tensor_rtol_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_atol_Tensor_rtol_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_Tensor_rtol_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_Tensor_rtol_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_atol_double_rtol_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_atol_double_rtol_double, 4},
    {"_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_double_rtol_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_atol_double_rtol_double, 5},
    {"_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_double, 3},
    {"_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_self_Tensor_rcond_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_double, 4},
    {"_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_pinv_out_out_Tensor_self_Tensor_rcond_Tensor, 4},
    {"_torch_cpp_torch_namespace__linalg_solve_ex_A_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_solve_ex_A_Tensor_B_Tensor, 4},
    {"_torch_cpp_torch_namespace__linalg_solve_ex_out_result_Tensor_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__linalg_solve_ex_out_result_Tensor_LU_Tensor_pivots_Tensor_info_Tensor_A_Tensor_B_Tensor, 8},
    {"_torch_cpp_torch_namespace_linalg_solve_ex_A_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_solve_ex_A_Tensor_B_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_solve_ex_out_result_Tensor_info_Tensor_A_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_solve_ex_out_result_Tensor_info_Tensor_A_Tensor_B_Tensor, 6},
    {"_torch_cpp_torch_namespace_linalg_solve_A_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_solve_A_Tensor_B_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_solve_out_out_Tensor_A_Tensor_B_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_solve_out_out_Tensor_A_Tensor_B_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_tensorinv_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_tensorinv_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_tensorinv_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_tensorinv_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_tensorsolve_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_tensorsolve_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_tensorsolve_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_tensorsolve_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_qr_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_qr_A_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_qr_out_Q_Tensor_R_Tensor_A_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_qr_out_Q_Tensor_R_Tensor_A_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_matrix_power_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_power_self_Tensor_n_int64_t, 2},
    {"_torch_cpp_torch_namespace_linalg_matrix_power_out_out_Tensor_self_Tensor_n_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_power_out_out_Tensor_self_Tensor_n_int64_t, 3},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_input_Tensor_atol_Tensor_rtol_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_input_Tensor_atol_Tensor_rtol_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_atol_Tensor_rtol_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_atol_Tensor_rtol_Tensor, 5},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_self_Tensor_atol_double_rtol_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_self_Tensor_atol_double_rtol_double, 4},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_atol_double_rtol_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_atol_double_rtol_double, 5},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_self_Tensor_tol_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_self_Tensor_tol_double, 3},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_tol_double", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_self_Tensor_tol_double, 4},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_input_Tensor_tol_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_input_Tensor_tol_Tensor, 3},
    {"_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_tol_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_rank_out_out_Tensor_input_Tensor_tol_Tensor, 4},
    {"_torch_cpp_torch_namespace_linalg_multi_dot_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_multi_dot_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_linalg_multi_dot_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_multi_dot_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_nested_to_padded_tensor_self_Tensor_padding_double", (DL_FUNC) &_torch_cpp_torch_namespace_nested_to_padded_tensor_self_Tensor_padding_double, 3},
    {"_torch_cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble, 2},
    {"_torch_cpp_torch_namespace__test_warn_in_autograd_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_warn_in_autograd_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor_b_bool", (DL_FUNC) &_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_self_Tensor_b_bool, 2},
    {"_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_segment_reduce_data_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_segment_reduce_data_Tensor_reduce_c10string_view, 8},
    {"_torch_cpp_torch_namespace__segment_reduce_backward_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace__segment_reduce_backward_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view, 8},
    {"_torch_cpp_torch_namespace_pad_sequence_sequences_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_pad_sequence_sequences_TensorList, 3},
    {"_torch_cpp_torch_namespace_flatten_dense_tensors_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_flatten_dense_tensors_tensors_TensorList, 1},
    {"_torch_cpp_torch_namespace_unflatten_dense_tensors_flat_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_unflatten_dense_tensors_flat_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace__nested_tensor_from_tensor_list_list_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_from_tensor_list_list_TensorList, 5},
    {"_torch_cpp_torch_namespace__fw_primal_copy_self_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fw_primal_copy_self_Tensor_level_int64_t, 2},
    {"_torch_cpp_torch_namespace__make_dual_copy_primal_Tensor_tangent_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_dual_copy_primal_Tensor_tangent_Tensor_level_int64_t, 3},
    {"_torch_cpp_torch_namespace_view_as_real_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_view_as_real_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_view_as_complex_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_view_as_complex_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__conj_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__conj_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__neg_view_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__neg_view_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_as_strided_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_broadcast_to_copy_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_broadcast_to_copy_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_diagonal_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_copy_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_expand_copy_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_expand_copy_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_permute_copy_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_permute_copy_self_Tensor_dims_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__reshape_alias_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__reshape_alias_copy_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_select_copy_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_copy_self_Tensor_dim_int64_t_index_int64_t, 3},
    {"_torch_cpp_torch_namespace_detach_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_detach_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_slice_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slice_copy_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_split_copy_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_split_copy_self_Tensor_split_size_int64_t, 3},
    {"_torch_cpp_torch_namespace_split_with_sizes_copy_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_split_with_sizes_copy_self_Tensor_split_sizes_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_squeeze_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_squeeze_copy_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_copy_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace_squeeze_copy_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_copy_self_Tensor_dim_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_t_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_t_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_transpose_copy_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_transpose_copy_self_Tensor_dim0_int64_t_dim1_int64_t, 3},
    {"_torch_cpp_torch_namespace_unsqueeze_copy_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsqueeze_copy_self_Tensor_dim_int64_t, 2},
    {"_torch_cpp_torch_namespace__indices_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__indices_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__values_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__values_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_indices_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_indices_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_values_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_values_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_crow_indices_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_crow_indices_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_col_indices_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_col_indices_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_ccol_indices_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ccol_indices_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_row_indices_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_row_indices_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_unbind_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_unbind_copy_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_unbind_copy_out_out_TensorList_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_unbind_copy_out_out_TensorList_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_split_copy_out_out_TensorList_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_split_copy_out_out_TensorList_self_Tensor_split_size_int64_t, 4},
    {"_torch_cpp_torch_namespace_split_with_sizes_copy_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_split_with_sizes_copy_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_view_copy_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_view_copy_self_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_view_copy_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_view_copy_self_Tensor_dtype_ScalarType, 2},
    {"_torch_cpp_torch_namespace_unfold_copy_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unfold_copy_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t, 4},
    {"_torch_cpp_torch_namespace_alias_copy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_alias_copy_self_Tensor, 1},
    {"_torch_cpp_torch_namespace__nested_tensor_softmax_with_shape_self_Tensor_query_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_softmax_with_shape_self_Tensor_query_Tensor, 2},
    {"_torch_cpp_torch_namespace__transformer_encoder_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__transformer_encoder_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor, 20},
    {"_torch_cpp_torch_namespace__native_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__native_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor, 13},
    {"_torch_cpp_torch_namespace_scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor, 6},
    {"_torch_cpp_torch_namespace__scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__scaled_dot_product_attention_query_Tensor_key_Tensor_value_Tensor, 7},
    {"_torch_cpp_torch_namespace__fused_sdp_choice_query_Tensor_key_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__fused_sdp_choice_query_Tensor_key_Tensor_value_Tensor, 6},
    {"_torch_cpp_torch_namespace__scaled_dot_product_attention_math_query_Tensor_key_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__scaled_dot_product_attention_math_query_Tensor_key_Tensor_value_Tensor, 7},
    {"_torch_cpp_torch_namespace__scaled_dot_product_flash_attention_query_Tensor_key_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__scaled_dot_product_flash_attention_query_Tensor_key_Tensor_value_Tensor, 6},
    {"_torch_cpp_torch_namespace__scaled_dot_product_flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__scaled_dot_product_flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t, 14},
    {"_torch_cpp_torch_namespace__scaled_dot_product_efficient_attention_query_Tensor_key_Tensor_value_Tensor_compute_log_sumexp_bool", (DL_FUNC) &_torch_cpp_torch_namespace__scaled_dot_product_efficient_attention_query_Tensor_key_Tensor_value_Tensor_compute_log_sumexp_bool, 5},
    {"_torch_cpp_torch_namespace__scaled_dot_product_efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__scaled_dot_product_efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor, 8},
    {"_torch_cpp_torch_namespace__chunk_grad_outputs_efficient_attention_query_Tensor_key_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__chunk_grad_outputs_efficient_attention_query_Tensor_key_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_namespace__flash_attention_forward_query_Tensor_key_Tensor_value_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_return_debug_mask_bool", (DL_FUNC) &_torch_cpp_torch_namespace__flash_attention_forward_query_Tensor_key_Tensor_value_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_return_debug_mask_bool, 10},
    {"_torch_cpp_torch_namespace__flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__flash_attention_backward_grad_out_Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor_cum_seq_q_Tensor_cum_seq_k_Tensor_max_q_int64_t_max_k_int64_t_dropout_p_double_is_causal_bool_philox_seed_int64_t_philox_offset_int64_t, 14},
    {"_torch_cpp_torch_namespace__efficient_attention_forward_query_Tensor_key_Tensor_value_Tensor_cu_seqlens_q_Tensor_cu_seqlens_k_Tensor_max_seqlen_q_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__efficient_attention_forward_query_Tensor_key_Tensor_value_Tensor_cu_seqlens_q_Tensor_cu_seqlens_k_Tensor_max_seqlen_q_int64_t, 8},
    {"_torch_cpp_torch_namespace__efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__efficient_attention_backward_grad_out__Tensor_query_Tensor_key_Tensor_value_Tensor_out_Tensor_logsumexp_Tensor, 8},
    {"_torch_cpp_torch_namespace__triton_scaled_dot_attention_q_Tensor_k_Tensor_v_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__triton_scaled_dot_attention_q_Tensor_k_Tensor_v_Tensor, 4},
    {"_torch_cpp_torch_namespace__triton_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__triton_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor, 10},
    {"_torch_cpp_torch_namespace_special_airy_ai_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_airy_ai_x_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_airy_ai_out_out_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_airy_ai_out_out_Tensor_x_Tensor, 2},
    {"_torch_cpp_torch_namespace__transformer_decoder_only_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__transformer_decoder_only_layer_fwd_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor, 21},
    {"_torch_cpp_torch_namespace__native_decoder_only_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__native_decoder_only_multi_head_attention_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor, 14},
    {"_torch_cpp_torch_namespace_special_bessel_j0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_j0_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_bessel_j0_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_j0_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_bessel_j1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_j1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_bessel_j1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_j1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_bessel_y0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_y0_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_bessel_y0_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_y0_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_bessel_y1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_y1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_bessel_y1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_bessel_y1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_h_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_h_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_he_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_hermite_polynomial_he_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_laguerre_polynomial_l_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_laguerre_polynomial_l_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_legendre_polynomial_p_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_legendre_polynomial_p_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_modified_bessel_i0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_i0_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_modified_bessel_i0_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_i0_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_modified_bessel_i1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_i1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_modified_bessel_i1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_i1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_modified_bessel_k0_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_k0_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_modified_bessel_k0_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_k0_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_modified_bessel_k1_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_k1_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_modified_bessel_k1_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_modified_bessel_k1_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_scaled_modified_bessel_k0_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_scaled_modified_bessel_k0_x_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_scaled_modified_bessel_k0_out_out_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_scaled_modified_bessel_k0_out_out_Tensor_x_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_scaled_modified_bessel_k1_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_scaled_modified_bessel_k1_x_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_scaled_modified_bessel_k1_out_out_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_scaled_modified_bessel_k1_out_out_Tensor_x_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_t_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_u_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_v_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Scalar_n_Tensor, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_x_Tensor_n_Scalar, 2},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Scalar_n_Tensor, 3},
    {"_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_special_shifted_chebyshev_polynomial_w_out_out_Tensor_x_Tensor_n_Scalar, 3},
    {"_torch_cpp_torch_namespace_special_spherical_bessel_j0_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_spherical_bessel_j0_x_Tensor, 1},
    {"_torch_cpp_torch_namespace_special_spherical_bessel_j0_out_out_Tensor_x_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_special_spherical_bessel_j0_out_out_Tensor_x_Tensor, 2},
    {"_torch_cpp_torch_namespace__foobar_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foobar_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__fused_adam__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fused_adam__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool, 15},
    {"_torch_cpp_torch_namespace__fused_adamw__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fused_adamw__self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool, 15},
    {"_torch_cpp_torch_namespace__new_zeros_with_same_feature_meta_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__new_zeros_with_same_feature_meta_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace__cudnn_ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool, 9},
    {"_torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_out_out_Tensor_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_flatten_weight_out_out_Tensor_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool, 10},
    {"_torch_cpp_torch_namespace__cudnn_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor, 21},
    {"_torch_cpp_torch_namespace__cudnn_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_proj_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4, 26},
    {"_torch_cpp_torch_namespace__cudnn_init_dropout_state_out_out_Tensor_dropout_double_train_bool_dropout_seed_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cudnn_init_dropout_state_out_out_Tensor_dropout_double_train_bool_dropout_seed_int64_t, 4},
    {"_torch_cpp_torch_namespace__fused_dropout_out_out0_Tensor_out1_Tensor_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace__fused_dropout_out_out0_Tensor_out1_Tensor_self_Tensor_p_double, 5},
    {"_torch_cpp_torch_namespace__masked_scale_out_out_Tensor_self_Tensor_mask_Tensor_scale_double", (DL_FUNC) &_torch_cpp_torch_namespace__masked_scale_out_out_Tensor_self_Tensor_mask_Tensor_scale_double, 4},
    {"_torch_cpp_torch_namespace_native_dropout_out_out0_Tensor_out1_Tensor_input_Tensor_p_double_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_native_dropout_out_out0_Tensor_out1_Tensor_input_Tensor_p_double_train_bool, 5},
    {"_torch_cpp_torch_namespace_native_dropout_backward_out_out_Tensor_grad_output_Tensor_mask_Tensor_scale_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_dropout_backward_out_out_Tensor_grad_output_Tensor_mask_Tensor_scale_double, 4},
    {"_torch_cpp_torch_namespace__conj_physical_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__conj_physical_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Scalar, 4},
    {"_torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Scalar, 4},
    {"_torch_cpp_torch_namespace_affine_grid_generator_out_out_Tensor_theta_Tensor_size_IntArrayRef_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_affine_grid_generator_out_out_Tensor_theta_Tensor_size_IntArrayRef_align_corners_bool, 4},
    {"_torch_cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_bartlett_window_out_out_Tensor_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_quantized_batch_norm_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_batch_norm_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t, 9},
    {"_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_Tensor, 4},
    {"_torch_cpp_torch_namespace_bernoulli_self_Tensor_p_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_self_Tensor_p_Tensor, 3},
    {"_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor_p_double, 4},
    {"_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_out_out_Tensor_self_Tensor_target_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binary_cross_entropy_with_logits_out_out_Tensor_self_Tensor_target_Tensor, 6},
    {"_torch_cpp_torch_namespace_bincount_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bincount_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_blackman_window_out_out_Tensor_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_block_diag_out_out_Tensor_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_block_diag_out_out_Tensor_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_constant_pad_nd_out_out_Tensor_self_Tensor_pad_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_constant_pad_nd_out_out_Tensor_self_Tensor_pad_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t, 10},
    {"_torch_cpp_torch_namespace_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_sizes_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 14},
    {"_torch_cpp_torch_namespace_convolution_overrideable_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_overrideable_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t, 10},
    {"_torch_cpp_torch_namespace_convolution_backward_overrideable_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_convolution_backward_overrideable_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 13},
    {"_torch_cpp_torch_namespace__convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool", (DL_FUNC) &_torch_cpp_torch_namespace__convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool, 14},
    {"_torch_cpp_torch_namespace_conv_tbc_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_conv_tbc_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor, 5},
    {"_torch_cpp_torch_namespace_copy_out_out_Tensor_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copy_out_out_Tensor_self_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace__copy_from_out_out_Tensor_self_Tensor_dst_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__copy_from_out_out_Tensor_self_Tensor_dst_Tensor, 4},
    {"_torch_cpp_torch_namespace__copy_from_and_resize_out_out_Tensor_self_Tensor_dst_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__copy_from_and_resize_out_out_Tensor_self_Tensor_dst_Tensor, 3},
    {"_torch_cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_count_nonzero_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_cudnn_affine_grid_generator_out_out_Tensor_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_affine_grid_generator_out_out_Tensor_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t, 6},
    {"_torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_out_out_Tensor_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_affine_grid_generator_backward_out_out_Tensor_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t, 6},
    {"_torch_cpp_torch_namespace_cudnn_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double, 12},
    {"_torch_cpp_torch_namespace_cudnn_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor, 12},
    {"_torch_cpp_torch_namespace_cudnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool, 10},
    {"_torch_cpp_torch_namespace_cudnn_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool, 11},
    {"_torch_cpp_torch_namespace__mps_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mps_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 8},
    {"_torch_cpp_torch_namespace_mps_convolution_transpose_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_mps_convolution_transpose_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool2, 11},
    {"_torch_cpp_torch_namespace_cudnn_convolution_relu_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_relu_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 8},
    {"_torch_cpp_torch_namespace_cudnn_convolution_add_relu_out_out_Tensor_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_convolution_add_relu_out_out_Tensor_self_Tensor_weight_Tensor_z_Tensor_alpha_Scalar_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 10},
    {"_torch_cpp_torch_namespace_cudnn_grid_sampler_out_out_Tensor_self_Tensor_grid_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_grid_sampler_out_out_Tensor_self_Tensor_grid_Tensor, 3},
    {"_torch_cpp_torch_namespace_cudnn_grid_sampler_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grid_Tensor_grad_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cudnn_grid_sampler_backward_out_out0_Tensor_out1_Tensor_self_Tensor_grid_Tensor_grad_output_Tensor, 5},
    {"_torch_cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_out_out0_Tensor_out1_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor, 8},
    {"_torch_cpp_torch_namespace__ctc_loss_backward_out_out_Tensor_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__ctc_loss_backward_out_out_Tensor_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t, 10},
    {"_torch_cpp_torch_namespace_diag_embed_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diag_embed_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_diagonal_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t, 6},
    {"_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar_rounding_mode_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Scalar_rounding_mode_c10string_view, 4},
    {"_torch_cpp_torch_namespace_embedding_out_out_Tensor_weight_Tensor_indices_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_out_out_Tensor_weight_Tensor_indices_Tensor, 6},
    {"_torch_cpp_torch_namespace_embedding_dense_backward_out_out_Tensor_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_dense_backward_out_out_Tensor_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool, 6},
    {"_torch_cpp_torch_namespace_embedding_renorm_out_out_Tensor_self_Tensor_indices_Tensor_max_norm_double_norm_type_double", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_renorm_out_out_Tensor_self_Tensor_indices_Tensor_max_norm_double_norm_type_double, 5},
    {"_torch_cpp_torch_namespace_embedding_renorm_self_Tensor_indices_Tensor_max_norm_double_norm_type_double", (DL_FUNC) &_torch_cpp_torch_namespace_embedding_renorm_self_Tensor_indices_Tensor_max_norm_double_norm_type_double, 4},
    {"_torch_cpp_torch_namespace__embedding_bag_forward_only_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_forward_only_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor, 13},
    {"_torch_cpp_torch_namespace__embedding_bag_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor, 13},
    {"_torch_cpp_torch_namespace__embedding_bag_dense_backward_out_out_Tensor_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_dense_backward_out_out_Tensor_grad_Tensor_indices_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor, 11},
    {"_torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_out_out_Tensor_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__embedding_bag_per_sample_weights_backward_out_out_Tensor_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t, 8},
    {"_torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_new_empty_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_new_empty_out_out_Tensor_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_new_empty_strided_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_new_empty_strided_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_new_full_out_out_Tensor_self_Tensor_size_IntArrayRef_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_new_full_out_out_Tensor_self_Tensor_size_IntArrayRef_fill_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_new_zeros_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_new_zeros_out_out_Tensor_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_new_ones_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_new_ones_out_out_Tensor_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__empty_affine_quantized_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__empty_affine_quantized_out_out_Tensor_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__empty_per_channel_affine_quantized_out_out_Tensor_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__empty_per_channel_affine_quantized_out_out_Tensor_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t, 6},
    {"_torch_cpp_torch_namespace_resize_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_resize_out_out_Tensor_self_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_resize_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_resize_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__resize_output_out_out_Tensor_self_Tensor_size_IntArrayRef_device_Device", (DL_FUNC) &_torch_cpp_torch_namespace__resize_output_out_out_Tensor_self_Tensor_size_IntArrayRef_device_Device, 4},
    {"_torch_cpp_torch_namespace__resize_output_self_Tensor_size_IntArrayRef_device_Device", (DL_FUNC) &_torch_cpp_torch_namespace__resize_output_self_Tensor_size_IntArrayRef_device_Device, 3},
    {"_torch_cpp_torch_namespace_empty_quantized_out_out_Tensor_size_IntArrayRef_qtensor_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_empty_quantized_out_out_Tensor_size_IntArrayRef_qtensor_Tensor, 4},
    {"_torch_cpp_torch_namespace_empty_like_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_empty_like_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_empty_strided_out_out_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_empty_strided_out_out_Tensor_size_IntArrayRef_stride_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Scalar, 3},
    {"_torch_cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_fill_out_out_Tensor_self_Tensor_value_Tensor, 3},
    {"_torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_full_like_out_out_Tensor_self_Tensor_fill_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_full_like_out_out_Tensor_self_Tensor_fill_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_from_file_out_out_Tensor_filename_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_from_file_out_out_Tensor_filename_c10string_view, 4},
    {"_torch_cpp_torch_namespace_grid_sampler_2d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_2d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_grid_sampler_2d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_2d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2, 9},
    {"_torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace__grid_sampler_2d_cpu_fallback_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_grid_sampler_3d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_3d_out_out_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool, 6},
    {"_torch_cpp_torch_namespace_grid_sampler_3d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_grid_sampler_3d_backward_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool_output_mask_stdarraybool2, 9},
    {"_torch_cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_hann_window_out_out_Tensor_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double, 4},
    {"_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_hamming_window_out_out_Tensor_window_length_int64_t_periodic_bool_alpha_double_beta_double, 5},
    {"_torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t, 2},
    {"_torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool, 3},
    {"_torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool_beta_double", (DL_FUNC) &_torch_cpp_torch_namespace_kaiser_window_out_out_Tensor_window_length_int64_t_periodic_bool_beta_double, 4},
    {"_torch_cpp_torch_namespace_native_group_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_group_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double, 11},
    {"_torch_cpp_torch_namespace_native_group_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_group_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3, 13},
    {"_torch_cpp_torch_namespace_index_put_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_put_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 5},
    {"_torch_cpp_torch_namespace__index_put_impl_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__index_put_impl_out_out_Tensor_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 6},
    {"_torch_cpp_torch_namespace__index_put_impl_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__index_put_impl_self_Tensor_indices_constc10Listc10optionalTensor_values_Tensor, 5},
    {"_torch_cpp_torch_namespace_isnan_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isnan_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_native_layer_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_native_layer_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_normalized_shape_IntArrayRef_weight_Tensor_bias_Tensor_eps_double, 8},
    {"_torch_cpp_torch_namespace_native_layer_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_layer_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_normalized_shape_IntArrayRef_mean_Tensor_rstd_Tensor_weight_Tensor_bias_Tensor_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3, 7},
    {"_torch_cpp_torch_namespace_mkldnn_linear_out_out_Tensor_self_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_out_out_Tensor_self_Tensor_weight_Tensor, 4},
    {"_torch_cpp_torch_namespace_mkldnn_linear_backward_input_out_out_Tensor_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_backward_input_out_out_Tensor_input_size_IntArrayRef_grad_output_Tensor_weight_Tensor, 4},
    {"_torch_cpp_torch_namespace_mkldnn_linear_backward_weights_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_backward_weights_out_out0_Tensor_out1_Tensor_grad_output_Tensor_input_Tensor_weight_Tensor_bias_defined_bool, 6},
    {"_torch_cpp_torch_namespace_mkldnn_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_linear_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_output_mask_stdarraybool3, 7},
    {"_torch_cpp_torch_namespace_matmul_backward_out_out0_Tensor_out1_Tensor_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2", (DL_FUNC) &_torch_cpp_torch_namespace_matmul_backward_out_out0_Tensor_out1_Tensor_grad_Tensor_self_Tensor_other_Tensor_mask_stdarraybool2, 6},
    {"_torch_cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__aminmax_out_out0_Tensor_out1_Tensor_self_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool2d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_mkldnn_max_pool3d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_max_pool3d_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_input_Tensor_kernel_size_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace_quantized_max_pool1d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_max_pool1d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_quantized_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_quantized_max_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef, 7},
    {"_torch_cpp_torch_namespace_median_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_median_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_nanmedian_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_nanmedian_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__mps_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mps_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 8},
    {"_torch_cpp_torch_namespace_mps_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_mps_convolution_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3, 11},
    {"_torch_cpp_torch_namespace_mkldnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t, 8},
    {"_torch_cpp_torch_namespace_mkldnn_rnn_layer_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_rnn_layer_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_input_Tensor_weight0_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_hx__Tensor_cx__Tensor_reverse_bool_batch_sizes_IntArrayRef_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_bidirectional_bool_batch_first_bool_train_bool, 20},
    {"_torch_cpp_torch_namespace_mkldnn_rnn_layer_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_out6_Tensor_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_rnn_layer_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_out6_Tensor_input_Tensor_weight1_Tensor_weight2_Tensor_weight3_Tensor_weight4_Tensor_hx__Tensor_cx_tmp_Tensor_output_Tensor_hy__Tensor_cy__Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_reverse_bool_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_has_biases_bool_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_batch_first_bool_workspace_Tensor, 30},
    {"_torch_cpp_torch_namespace_miopen_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_batch_norm_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double, 11},
    {"_torch_cpp_torch_namespace_miopen_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double, 11},
    {"_torch_cpp_torch_namespace_miopen_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 10},
    {"_torch_cpp_torch_namespace_miopen_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_convolution_transpose_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 11},
    {"_torch_cpp_torch_namespace_miopen_depthwise_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_depthwise_convolution_out_out_Tensor_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool, 10},
    {"_torch_cpp_torch_namespace_miopen_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_rnn_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor, 19},
    {"_torch_cpp_torch_namespace_miopen_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4", (DL_FUNC) &_torch_cpp_torch_namespace_miopen_rnn_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_TensorList_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4, 25},
    {"_torch_cpp_torch_namespace__sparse_sparse_matmul_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sparse_matmul_out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace__native_batch_norm_legit_functional_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace__native_batch_norm_legit_functional_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double, 8},
    {"_torch_cpp_torch_namespace_batch_norm_stats_out_out0_Tensor_out1_Tensor_input_Tensor_eps_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_stats_out_out0_Tensor_out1_Tensor_input_Tensor_eps_double, 4},
    {"_torch_cpp_torch_namespace_batch_norm_gather_stats_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_gather_stats_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t, 10},
    {"_torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_gather_stats_with_counts_out_out0_Tensor_out1_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor, 10},
    {"_torch_cpp_torch_namespace_native_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace_native_batch_norm_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3, 13},
    {"_torch_cpp_torch_namespace_batch_norm_backward_reduce_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_backward_reduce_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool, 12},
    {"_torch_cpp_torch_namespace_batch_norm_backward_elemt_out_out_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_backward_elemt_out_out_Tensor_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor_count_Tensor, 9},
    {"_torch_cpp_torch_namespace_batch_norm_update_stats_out_out0_Tensor_out1_Tensor_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double", (DL_FUNC) &_torch_cpp_torch_namespace_batch_norm_update_stats_out_out0_Tensor_out1_Tensor_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double, 6},
    {"_torch_cpp_torch_namespace__nnpack_spatial_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nnpack_spatial_convolution_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_ones_like_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ones_like_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__euclidean_dist_out_out_Tensor_x1_Tensor_x2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__euclidean_dist_out_out_Tensor_x1_Tensor_x2_Tensor, 3},
    {"_torch_cpp_torch_namespace__cdist_forward_out_out_Tensor_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__cdist_forward_out_out_Tensor_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t, 5},
    {"_torch_cpp_torch_namespace__cdist_backward_out_out_Tensor_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__cdist_backward_out_out_Tensor_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor, 6},
    {"_torch_cpp_torch_namespace__pdist_forward_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pdist_forward_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__pdist_backward_out_out_Tensor_grad_Tensor_self_Tensor_p_double_pdist_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pdist_backward_out_out_Tensor_grad_Tensor_self_Tensor_p_double_pdist_Tensor, 5},
    {"_torch_cpp_torch_namespace_pixel_shuffle_out_out_Tensor_self_Tensor_upscale_factor_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_pixel_shuffle_out_out_Tensor_self_Tensor_upscale_factor_int64_t, 3},
    {"_torch_cpp_torch_namespace_pixel_unshuffle_out_out_Tensor_self_Tensor_downscale_factor_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_pixel_unshuffle_out_out_Tensor_self_Tensor_downscale_factor_int64_t, 3},
    {"_torch_cpp_torch_namespace_channel_shuffle_out_out_Tensor_self_Tensor_groups_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_channel_shuffle_out_out_Tensor_self_Tensor_groups_int64_t, 3},
    {"_torch_cpp_torch_namespace__pin_memory_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__pin_memory_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_scalar_tensor_out_out_Tensor_s_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_scalar_tensor_out_out_Tensor_s_Scalar, 2},
    {"_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_rand_like_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rand_like_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_high_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_high_int64_t, 4},
    {"_torch_cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_low_int64_t_high_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_randint_like_out_out_Tensor_self_Tensor_low_int64_t_high_int64_t, 5},
    {"_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator_names_DimnameList, 4},
    {"_torch_cpp_torch_namespace_randn_like_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_randn_like_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_repeat_out_out_Tensor_self_Tensor_repeats_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_out_out_Tensor_self_Tensor_repeats_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_repeat_interleave_out_out_Tensor_repeats_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_repeat_interleave_out_out_Tensor_repeats_Tensor, 3},
    {"_torch_cpp_torch_namespace__mkldnn_reshape_out_out_Tensor_self_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_reshape_out_out_Tensor_self_Tensor_shape_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_relu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_relu_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_select_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t, 5},
    {"_torch_cpp_torch_namespace_celu_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_celu_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_slice_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_slice_backward_out_out_Tensor_grad_output_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t, 7},
    {"_torch_cpp_torch_namespace_slice_scatter_out_out_Tensor_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slice_scatter_out_out_Tensor_self_Tensor_src_Tensor, 7},
    {"_torch_cpp_torch_namespace_select_scatter_out_out_Tensor_self_Tensor_src_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_scatter_out_out_Tensor_self_Tensor_src_Tensor_dim_int64_t_index_int64_t, 5},
    {"_torch_cpp_torch_namespace_diagonal_scatter_out_out_Tensor_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_scatter_out_out_Tensor_self_Tensor_src_Tensor, 6},
    {"_torch_cpp_torch_namespace_as_strided_scatter_out_out_Tensor_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided_scatter_out_out_Tensor_self_Tensor_src_Tensor_size_IntArrayRef_stride_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_unsafe_split_out_out_TensorList_self_Tensor_split_size_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsafe_split_out_out_TensorList_self_Tensor_split_size_int64_t, 4},
    {"_torch_cpp_torch_namespace_unsafe_split_with_sizes_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_unsafe_split_with_sizes_out_out_TensorList_self_Tensor_split_sizes_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sum_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_prod_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__mkldnn_transpose_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__mkldnn_transpose_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t, 4},
    {"_torch_cpp_torch_namespace_flip_out_out_Tensor_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_flip_out_out_Tensor_self_Tensor_dims_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_roll_out_out_Tensor_self_Tensor_shifts_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_roll_out_out_Tensor_self_Tensor_shifts_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_rot90_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rot90_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__transform_bias_rescale_qkv_out_out0_Tensor_out1_Tensor_out2_Tensor_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__transform_bias_rescale_qkv_out_out0_Tensor_out1_Tensor_out2_Tensor_qkv_Tensor_qkv_bias_Tensor_num_heads_int64_t, 6},
    {"_torch_cpp_torch_namespace__nested_tensor_from_mask_out_out_Tensor_t_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_from_mask_out_out_Tensor_t_Tensor_mask_Tensor, 4},
    {"_torch_cpp_torch_namespace__nested_from_padded_out_out_Tensor_padded_Tensor_cpu_nested_shape_example_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_from_padded_out_out_Tensor_padded_Tensor_cpu_nested_shape_example_Tensor, 4},
    {"_torch_cpp_torch_namespace__nested_tensor_size_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_size_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__nested_tensor_strides_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_strides_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__nested_from_padded_and_nested_example_out_out_Tensor_padded_Tensor_nt_example_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__nested_from_padded_and_nested_example_out_out_Tensor_padded_Tensor_nt_example_Tensor, 3},
    {"_torch_cpp_torch_namespace__nested_view_from_buffer_copy_out_out_Tensor_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__nested_view_from_buffer_copy_out_out_Tensor_self_Tensor_nested_size_Tensor_nested_strides_Tensor_offsets_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__trilinear_out_out_Tensor_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__trilinear_out_out_Tensor_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef, 9},
    {"_torch_cpp_torch_namespace__unique_out_out0_Tensor_out1_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__unique_out_out0_Tensor_out1_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_unique_dim_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unique_dim_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t, 8},
    {"_torch_cpp_torch_namespace_unique_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_unique_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor, 7},
    {"_torch_cpp_torch_namespace_unique_dim_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unique_dim_consecutive_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor_dim_int64_t, 7},
    {"_torch_cpp_torch_namespace__unique2_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__unique2_out_out0_Tensor_out1_Tensor_out2_Tensor_self_Tensor, 7},
    {"_torch_cpp_torch_namespace__unsafe_view_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__unsafe_view_out_out_Tensor_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__weight_norm_interface_out_out0_Tensor_out1_Tensor_v_Tensor_g_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_interface_out_out0_Tensor_out1_Tensor_v_Tensor_g_Tensor, 5},
    {"_torch_cpp_torch_namespace__weight_norm_interface_backward_out_out0_Tensor_out1_Tensor_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__weight_norm_interface_backward_out_out0_Tensor_out1_Tensor_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t, 7},
    {"_torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef_names_DimnameList", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef_names_DimnameList, 3},
    {"_torch_cpp_torch_namespace__efficientzerotensor_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__efficientzerotensor_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace_zeros_like_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zeros_like_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__standard_gamma_grad_out_out_Tensor_self_Tensor_output_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__standard_gamma_grad_out_out_Tensor_self_Tensor_output_Tensor, 3},
    {"_torch_cpp_torch_namespace__standard_gamma_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__standard_gamma_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__dirichlet_grad_out_out_Tensor_x_Tensor_alpha_Tensor_total_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__dirichlet_grad_out_out_Tensor_x_Tensor_alpha_Tensor_total_Tensor, 4},
    {"_torch_cpp_torch_namespace__sample_dirichlet_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sample_dirichlet_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_poisson_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_poisson_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_binomial_out_out_Tensor_count_Tensor_prob_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_binomial_out_out_Tensor_count_Tensor_prob_Tensor, 4},
    {"_torch_cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar, 3},
    {"_torch_cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_native_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace__sparse_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__sparse_sum_backward_out_out_Tensor_grad_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_sum_backward_out_out_Tensor_grad_Tensor_self_Tensor_dim_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_csr_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_csr_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_csr_prod_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_csr_prod_out_out_Tensor_self_Tensor_dim_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool, 4},
    {"_torch_cpp_torch_namespace__sparse_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor, 5},
    {"_torch_cpp_torch_namespace__sparse_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_log_softmax_out_out_Tensor_self_Tensor_dim_int64_t_half_to_float_bool, 4},
    {"_torch_cpp_torch_namespace__sparse_log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_log_softmax_backward_data_out_out_Tensor_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor, 5},
    {"_torch_cpp_torch_namespace__spdiags_out_out_Tensor_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__spdiags_out_out_Tensor_diagonals_Tensor_offsets_Tensor_shape_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dtype_ScalarType, 4},
    {"_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar, 3},
    {"_torch_cpp_torch_namespace_clone_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_clone_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_resize_as_out_out_Tensor_self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as_out_out_Tensor_self_Tensor_the_template_Tensor, 4},
    {"_torch_cpp_torch_namespace_resize_as_self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as_self_Tensor_the_template_Tensor, 3},
    {"_torch_cpp_torch_namespace_resize_as_sparse_out_out_Tensor_self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as_sparse_out_out_Tensor_self_Tensor_the_template_Tensor, 3},
    {"_torch_cpp_torch_namespace_resize_as_sparse_self_Tensor_the_template_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_resize_as_sparse_self_Tensor_the_template_Tensor, 2},
    {"_torch_cpp_torch_namespace_zero_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zero_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_zero_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_zero_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Scalar, 4},
    {"_torch_cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_rsub_out_out_Tensor_self_Tensor_other_Scalar, 4},
    {"_torch_cpp_torch_namespace__sparse_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor, 6},
    {"_torch_cpp_torch_namespace_sparse_coo_tensor_out_out_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_coo_tensor_out_out_Tensor_size_IntArrayRef, 2},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_out_out_Tensor_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor, 6},
    {"_torch_cpp_torch_namespace_sparse_resize_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_resize_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_sparse_resize_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_resize_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_sparse_resize_and_clear_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_resize_and_clear_out_out_Tensor_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_sparse_resize_and_clear_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_resize_and_clear_self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t, 4},
    {"_torch_cpp_torch_namespace_sparse_mask_out_out_Tensor_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_sparse_mask_out_out_Tensor_self_Tensor_mask_Tensor, 3},
    {"_torch_cpp_torch_namespace__to_dense_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__to_dense_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__coalesce_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__coalesce_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__coalesced_out_out_Tensor_self_Tensor_coalesced_bool", (DL_FUNC) &_torch_cpp_torch_namespace__coalesced_out_out_Tensor_self_Tensor_coalesced_bool, 3},
    {"_torch_cpp_torch_namespace__coalesced_self_Tensor_coalesced_bool", (DL_FUNC) &_torch_cpp_torch_namespace__coalesced_self_Tensor_coalesced_bool, 2},
    {"_torch_cpp_torch_namespace_copy_sparse_to_sparse_out_out_Tensor_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copy_sparse_to_sparse_out_out_Tensor_self_Tensor_src_Tensor, 4},
    {"_torch_cpp_torch_namespace_copy_sparse_to_sparse_self_Tensor_src_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_copy_sparse_to_sparse_self_Tensor_src_Tensor, 3},
    {"_torch_cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor_sparse_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor_sparse_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_sparse_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_to_sparse_csr_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_sparse_csr_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_to_sparse_csc_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_sparse_csc_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_to_sparse_bsr_out_out_Tensor_self_Tensor_blocksize_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_to_sparse_bsr_out_out_Tensor_self_Tensor_blocksize_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_to_sparse_bsc_out_out_Tensor_self_Tensor_blocksize_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_to_sparse_bsc_out_out_Tensor_self_Tensor_blocksize_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_to_mkldnn_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_to_mkldnn_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_reorder_conv2d_weight_out_out_Tensor_self_Tensor, 7},
    {"_torch_cpp_torch_namespace_mkldnn_reorder_conv3d_weight_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_reorder_conv3d_weight_out_out_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_dynamic_out_out_Tensor_self_Tensor_dtype_ScalarType_reduce_range_bool", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_dynamic_out_out_Tensor_self_Tensor_dtype_ScalarType_reduce_range_bool, 4},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_quantize_per_tensor_out_out_TensorList_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_tensor_out_out_TensorList_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType, 5},
    {"_torch_cpp_torch_namespace_quantize_per_channel_out_out_Tensor_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_quantize_per_channel_out_out_Tensor_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType, 6},
    {"_torch_cpp_torch_namespace_dequantize_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dequantize_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_dequantize_out_out_TensorList_tensors_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace_dequantize_out_out_TensorList_tensors_TensorList, 2},
    {"_torch_cpp_torch_namespace_q_per_channel_scales_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_scales_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_q_per_channel_zero_points_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_q_per_channel_zero_points_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_int_repr_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_int_repr_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_per_tensor_quantized_tensor_out_out_Tensor_self_Tensor_scale_double_zero_point_int64_t, 4},
    {"_torch_cpp_torch_namespace__make_per_channel_quantized_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_per_channel_quantized_tensor_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t, 5},
    {"_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_tensor_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t, 7},
    {"_torch_cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_fake_quant_enabled_Tensor_quant_min_int64_t_quant_max_int64_t, 8},
    {"_torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t, 7},
    {"_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_fake_quantize_per_channel_affine_cachemask_out_out0_Tensor_out1_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 8},
    {"_torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_out_out_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t, 8},
    {"_torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_out_out0_Tensor_out1_Tensor_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_out_out0_Tensor_out1_Tensor_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t, 15},
    {"_torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_functional_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fused_moving_avg_obs_fq_helper_functional_self_Tensor_observer_on_Tensor_fake_quant_on_Tensor_running_min_Tensor_running_max_Tensor_scale_Tensor_zero_point_Tensor_averaging_const_double_quant_min_int64_t_quant_max_int64_t_ch_axis_int64_t, 13},
    {"_torch_cpp_torch_namespace__to_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__to_copy_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace__lstm_mps_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__lstm_mps_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_out5_Tensor_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 15},
    {"_torch_cpp_torch_namespace_lstm_mps_backward_out_out0_Tensor_out1_TensorList_out2_TensorList_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace_lstm_mps_backward_out_out0_Tensor_out1_TensorList_out2_TensorList_grad_y_Tensor_grad_hy_Tensor_grad_cy_Tensor_z_state_Tensor_cell_state_fwd_Tensor_input_Tensor_layersOutputs_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool_batch_first_bool, 18},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_out_out0_Tensor_out1_Tensor_out2_Tensor_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_out_out0_Tensor_out1_Tensor_out2_Tensor_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor, 8},
    {"_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_lstm_cell_backward_impl_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool, 9},
    {"_torch_cpp_torch_namespace__thnn_fused_gru_cell_out_out0_Tensor_out1_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_gru_cell_out_out0_Tensor_out1_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor, 7},
    {"_torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_grad_hy_Tensor_workspace_Tensor_has_bias_bool", (DL_FUNC) &_torch_cpp_torch_namespace__thnn_fused_gru_cell_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_out4_Tensor_grad_hy_Tensor_workspace_Tensor_has_bias_bool, 8},
    {"_torch_cpp_torch_namespace__pack_padded_sequence_out_out0_Tensor_out1_Tensor_input_Tensor_lengths_Tensor_batch_first_bool", (DL_FUNC) &_torch_cpp_torch_namespace__pack_padded_sequence_out_out0_Tensor_out1_Tensor_input_Tensor_lengths_Tensor_batch_first_bool, 5},
    {"_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage", (DL_FUNC) &_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage, 3},
    {"_torch_cpp_torch_namespace_set_self_Tensor_source_Storage", (DL_FUNC) &_torch_cpp_torch_namespace_set_self_Tensor_source_Storage, 2},
    {"_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace_set_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_set_self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor_source_Tensor, 3},
    {"_torch_cpp_torch_namespace_set_self_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_set_self_Tensor_source_Tensor, 2},
    {"_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_set_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_set_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_set_self_Tensor, 1},
    {"_torch_cpp_torch_namespace_lift_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lift_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_lift_fresh_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_lift_fresh_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Scalar, 4},
    {"_torch_cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_fill_out_out_Tensor_self_Tensor_mask_Tensor_value_Tensor, 4},
    {"_torch_cpp_torch_namespace_masked_scatter_out_out_Tensor_self_Tensor_mask_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_masked_scatter_out_out_Tensor_self_Tensor_mask_Tensor_source_Tensor, 4},
    {"_torch_cpp_torch_namespace__masked_softmax_out_out_Tensor_self_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__masked_softmax_out_out_Tensor_self_Tensor_mask_Tensor, 5},
    {"_torch_cpp_torch_namespace__masked_softmax_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_mask_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__masked_softmax_backward_out_out_Tensor_grad_output_Tensor_output_Tensor_mask_Tensor, 5},
    {"_torch_cpp_torch_namespace_put_out_out_Tensor_self_Tensor_index_Tensor_source_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_put_out_out_Tensor_self_Tensor_index_Tensor_source_Tensor, 5},
    {"_torch_cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Scalar, 5},
    {"_torch_cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_index_fill_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor_value_Tensor, 5},
    {"_torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___lshift___out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_left_shift_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Scalar, 3},
    {"_torch_cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace___rshift___out_out_Tensor_self_Tensor_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bitwise_right_shift_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor_from_int64_t_to_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor_from_int64_t_to_int64_t, 5},
    {"_torch_cpp_torch_namespace_random_self_Tensor_from_int64_t_to_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_random_self_Tensor_from_int64_t_to_int64_t, 4},
    {"_torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor_to_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor_to_int64_t, 4},
    {"_torch_cpp_torch_namespace_random_self_Tensor_to_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_random_self_Tensor_to_int64_t, 3},
    {"_torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_random_out_out_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_random_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_random_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_uniform_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_uniform_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_uniform_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_uniform_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_cauchy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cauchy_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_cauchy_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_cauchy_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_log_normal_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_normal_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_log_normal_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_log_normal_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_exponential_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exponential_out_out_Tensor_self_Tensor, 4},
    {"_torch_cpp_torch_namespace_exponential_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_exponential_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_geometric_out_out_Tensor_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace_geometric_out_out_Tensor_self_Tensor_p_double, 4},
    {"_torch_cpp_torch_namespace_geometric_self_Tensor_p_double", (DL_FUNC) &_torch_cpp_torch_namespace_geometric_self_Tensor_p_double, 3},
    {"_torch_cpp_torch_namespace_tril_indices_out_out_Tensor_row_int64_t_col_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_tril_indices_out_out_Tensor_row_int64_t_col_int64_t, 4},
    {"_torch_cpp_torch_namespace_triu_indices_out_out_Tensor_row_int64_t_col_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_triu_indices_out_out_Tensor_row_int64_t_col_int64_t, 4},
    {"_torch_cpp_torch_namespace_trace_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_trace_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__cholesky_solve_helper_out_out_Tensor_self_Tensor_A_Tensor_upper_bool", (DL_FUNC) &_torch_cpp_torch_namespace__cholesky_solve_helper_out_out_Tensor_self_Tensor_A_Tensor_upper_bool, 4},
    {"_torch_cpp_torch_namespace_dist_out_out_Tensor_self_Tensor_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_dist_out_out_Tensor_self_Tensor_other_Tensor, 4},
    {"_torch_cpp_torch_namespace__histogramdd_bin_edges_out_out_TensorList_self_Tensor_bins_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__histogramdd_bin_edges_out_out_TensorList_self_Tensor_bins_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__histogramdd_from_bin_cts_out_out_Tensor_self_Tensor_bins_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__histogramdd_from_bin_cts_out_out_Tensor_self_Tensor_bins_IntArrayRef, 6},
    {"_torch_cpp_torch_namespace__histogramdd_from_bin_tensors_out_out_Tensor_self_Tensor_bins_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__histogramdd_from_bin_tensors_out_out_Tensor_self_Tensor_bins_TensorList, 5},
    {"_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Scalar_other_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_remainder_out_out_Tensor_self_Scalar_other_Tensor, 3},
    {"_torch_cpp_torch_namespace_argsort_out_out_Tensor_self_Tensor_stable_bool", (DL_FUNC) &_torch_cpp_torch_namespace_argsort_out_out_Tensor_self_Tensor_stable_bool, 5},
    {"_torch_cpp_torch_namespace_unfold_backward_out_out_Tensor_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unfold_backward_out_out_Tensor_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t, 6},
    {"_torch_cpp_torch_namespace_normal_out_out_Tensor_self_Tensor_mean_double_std_double", (DL_FUNC) &_torch_cpp_torch_namespace_normal_out_out_Tensor_self_Tensor_mean_double_std_double, 5},
    {"_torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_out_out_TensorList_self_TensorList_found_inf_Tensor_inv_scale_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_out_out_TensorList_self_TensorList_found_inf_Tensor_inv_scale_Tensor, 4},
    {"_torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_self_TensorList_found_inf_Tensor_inv_scale_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__amp_foreach_non_finite_check_and_unscale_self_TensorList_found_inf_Tensor_inv_scale_Tensor, 3},
    {"_torch_cpp_torch_namespace__amp_update_scale_out_out_Tensor_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__amp_update_scale_out_out_Tensor_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t, 7},
    {"_torch_cpp_torch_namespace__amp_update_scale_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__amp_update_scale_self_Tensor_growth_tracker_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t, 6},
    {"_torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalar_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalar_Scalar, 3},
    {"_torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_other_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_other_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_other_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_other_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_add_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sub_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_div_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_mul_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_min_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_clamp_max_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_maximum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_minimum_out_out_TensorList_self_TensorList_scalars_ArrayRefScalar, 3},
    {"_torch_cpp_torch_namespace__foreach_exp_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_exp_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_zero_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_zero_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_zero_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_zero_self_TensorList, 1},
    {"_torch_cpp_torch_namespace__foreach_sqrt_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sqrt_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_abs_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_abs_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_acos_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_acos_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_asin_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_asin_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_atan_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_atan_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_ceil_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_ceil_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_cos_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_cos_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_cosh_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_cosh_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_erf_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_erf_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_erfc_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_erfc_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_expm1_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_expm1_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_floor_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_floor_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_log_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_log10_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log10_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_log1p_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log1p_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_log2_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_log2_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_neg_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_neg_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_tan_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_tan_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_tanh_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_tanh_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_sin_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sin_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_sinh_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sinh_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_round_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_round_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_lgamma_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lgamma_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_frac_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_frac_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_reciprocal_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_reciprocal_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_sigmoid_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_sigmoid_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_trunc_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_trunc_out_out_TensorList_self_TensorList, 2},
    {"_torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList, 5},
    {"_torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList, 5},
    {"_torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar, 5},
    {"_torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcdiv_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor, 5},
    {"_torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_ArrayRefScalar, 5},
    {"_torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_addcmul_out_out_TensorList_self_TensorList_tensor1_TensorList_tensor2_TensorList_scalars_Tensor, 5},
    {"_torch_cpp_torch_namespace__foreach_norm_out_out_TensorList_self_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_norm_out_out_TensorList_self_TensorList, 3},
    {"_torch_cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weights_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weights_TensorList, 4},
    {"_torch_cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weight_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace__foreach_lerp_out_out_TensorList_self_TensorList_tensors1_TensorList_weight_Scalar, 4},
    {"_torch_cpp_torch_namespace_bucketize_out_out_Tensor_self_Scalar_boundaries_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_bucketize_out_out_Tensor_self_Scalar_boundaries_Tensor, 5},
    {"_torch_cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Scalar", (DL_FUNC) &_torch_cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Scalar, 7},
    {"_torch_cpp_torch_namespace_glu_jvp_out_out_Tensor_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_jvp_out_out_Tensor_glu_Tensor_x_Tensor_dx_Tensor_dim_int64_t, 5},
    {"_torch_cpp_torch_namespace_glu_backward_jvp_out_out_Tensor_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_glu_backward_jvp_out_out_Tensor_grad_x_Tensor_grad_glu_Tensor_x_Tensor_dgrad_glu_Tensor_dx_Tensor_dim_int64_t, 7},
    {"_torch_cpp_torch_namespace_hardswish_backward_out_out_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_hardswish_backward_out_out_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace_rrelu_with_noise_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool", (DL_FUNC) &_torch_cpp_torch_namespace_rrelu_with_noise_backward_out_out_Tensor_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool, 8},
    {"_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool2d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__adaptive_avg_pool3d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__adaptive_avg_pool3d_backward_out_out_Tensor_grad_output_Tensor_self_Tensor, 3},
    {"_torch_cpp_torch_namespace__slow_conv2d_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3", (DL_FUNC) &_torch_cpp_torch_namespace__slow_conv2d_backward_out_out0_Tensor_out1_Tensor_out2_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_mask_stdarraybool3, 10},
    {"_torch_cpp_torch_namespace_conv_depthwise3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_conv_depthwise3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_slow_conv_dilated2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_slow_conv_dilated3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_slow_conv_dilated3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef, 8},
    {"_torch_cpp_torch_namespace_isinf_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_isinf_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_linalg_matrix_exp_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_linalg_matrix_exp_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__test_optional_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__test_optional_filled_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_filled_intlist_out_out_Tensor_values_Tensor_addends_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__test_optional_floatlist_out_out_Tensor_values_Tensor_addends_ArrayRefdouble", (DL_FUNC) &_torch_cpp_torch_namespace__test_optional_floatlist_out_out_Tensor_values_Tensor_addends_ArrayRefdouble, 3},
    {"_torch_cpp_torch_namespace__test_warn_in_autograd_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_warn_in_autograd_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__test_autograd_multiple_dispatch_view_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_segment_reduce_out_out_Tensor_data_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace_segment_reduce_out_out_Tensor_data_Tensor_reduce_c10string_view, 9},
    {"_torch_cpp_torch_namespace__segment_reduce_backward_out_out_Tensor_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view", (DL_FUNC) &_torch_cpp_torch_namespace__segment_reduce_backward_out_out_Tensor_grad_Tensor_output_Tensor_data_Tensor_reduce_c10string_view, 9},
    {"_torch_cpp_torch_namespace__nested_tensor_from_tensor_list_out_out_Tensor_list_TensorList", (DL_FUNC) &_torch_cpp_torch_namespace__nested_tensor_from_tensor_list_out_out_Tensor_list_TensorList, 6},
    {"_torch_cpp_torch_namespace__fw_primal_copy_out_out_Tensor_self_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__fw_primal_copy_out_out_Tensor_self_Tensor_level_int64_t, 3},
    {"_torch_cpp_torch_namespace__make_dual_copy_out_out_Tensor_primal_Tensor_tangent_Tensor_level_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace__make_dual_copy_out_out_Tensor_primal_Tensor_tangent_Tensor_level_int64_t, 4},
    {"_torch_cpp_torch_namespace_view_as_real_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_view_as_real_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_view_as_complex_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_view_as_complex_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__conj_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__conj_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__neg_view_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__neg_view_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_as_strided_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_as_strided_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 5},
    {"_torch_cpp_torch_namespace__sparse_broadcast_to_copy_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__sparse_broadcast_to_copy_out_out_Tensor_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_diagonal_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_diagonal_copy_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace_expand_copy_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_expand_copy_out_out_Tensor_self_Tensor_size_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_permute_copy_out_out_Tensor_self_Tensor_dims_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_permute_copy_out_out_Tensor_self_Tensor_dims_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace__reshape_alias_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace__reshape_alias_copy_out_out_Tensor_self_Tensor_size_IntArrayRef_stride_IntArrayRef, 4},
    {"_torch_cpp_torch_namespace_select_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_select_copy_out_out_Tensor_self_Tensor_dim_int64_t_index_int64_t, 4},
    {"_torch_cpp_torch_namespace_detach_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_detach_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_slice_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_slice_copy_out_out_Tensor_self_Tensor, 6},
    {"_torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_squeeze_copy_out_out_Tensor_self_Tensor_dim_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_t_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_t_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_transpose_copy_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_transpose_copy_out_out_Tensor_self_Tensor_dim0_int64_t_dim1_int64_t, 4},
    {"_torch_cpp_torch_namespace_unsqueeze_copy_out_out_Tensor_self_Tensor_dim_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unsqueeze_copy_out_out_Tensor_self_Tensor_dim_int64_t, 3},
    {"_torch_cpp_torch_namespace__indices_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__indices_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace__values_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__values_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_indices_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_indices_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_values_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_values_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_crow_indices_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_crow_indices_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_col_indices_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_col_indices_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_ccol_indices_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_ccol_indices_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_row_indices_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_row_indices_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_size_IntArrayRef", (DL_FUNC) &_torch_cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_size_IntArrayRef, 3},
    {"_torch_cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_dtype_ScalarType", (DL_FUNC) &_torch_cpp_torch_namespace_view_copy_out_out_Tensor_self_Tensor_dtype_ScalarType, 3},
    {"_torch_cpp_torch_namespace_unfold_copy_out_out_Tensor_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t", (DL_FUNC) &_torch_cpp_torch_namespace_unfold_copy_out_out_Tensor_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t, 5},
    {"_torch_cpp_torch_namespace_alias_copy_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace_alias_copy_out_out_Tensor_self_Tensor, 2},
    {"_torch_cpp_torch_namespace_to_padded_tensor_out_out_Tensor_self_Tensor_padding_double", (DL_FUNC) &_torch_cpp_torch_namespace_to_padded_tensor_out_out_Tensor_self_Tensor_padding_double, 4},
    {"_torch_cpp_torch_namespace__transformer_encoder_layer_fwd_out_out_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__transformer_encoder_layer_fwd_out_out_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor, 21},
    {"_torch_cpp_torch_namespace__native_multi_head_attention_out_out0_Tensor_out1_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__native_multi_head_attention_out_out0_Tensor_out1_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor, 15},
    {"_torch_cpp_torch_namespace__triton_scaled_dot_attention_out_out_Tensor_q_Tensor_k_Tensor_v_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__triton_scaled_dot_attention_out_out_Tensor_q_Tensor_k_Tensor_v_Tensor, 5},
    {"_torch_cpp_torch_namespace__triton_multi_head_attention_out_out_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__triton_multi_head_attention_out_out_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor, 11},
    {"_torch_cpp_torch_namespace__transformer_decoder_only_layer_fwd_out_out0_Tensor_out1_Tensor_out2_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__transformer_decoder_only_layer_fwd_out_out0_Tensor_out1_Tensor_out2_Tensor_src_Tensor_embed_dim_int64_t_num_heads_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor_use_gelu_bool_norm_first_bool_eps_double_norm_weight_1_Tensor_norm_bias_1_Tensor_norm_weight_2_Tensor_norm_bias_2_Tensor_ffn_weight_1_Tensor_ffn_bias_1_Tensor_ffn_weight_2_Tensor_ffn_bias_2_Tensor, 24},
    {"_torch_cpp_torch_namespace__native_decoder_only_multi_head_attention_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__native_decoder_only_multi_head_attention_out_out0_Tensor_out1_Tensor_out2_Tensor_out3_Tensor_query_Tensor_key_Tensor_value_Tensor_embed_dim_int64_t_num_head_int64_t_qkv_weight_Tensor_qkv_bias_Tensor_proj_weight_Tensor_proj_bias_Tensor, 18},
    {"_torch_cpp_torch_namespace__foobar_out_out_Tensor_self_Tensor", (DL_FUNC) &_torch_cpp_torch_namespace__foobar_out_out_Tensor_self_Tensor, 5},
    {"_torch_cpp_torch_namespace__fused_adam_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fused_adam_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool, 16},
    {"_torch_cpp_torch_namespace__fused_adam_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fused_adam_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool, 15},
    {"_torch_cpp_torch_namespace__fused_adamw_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fused_adamw_out_out_TensorList_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool, 16},
    {"_torch_cpp_torch_namespace__fused_adamw_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool", (DL_FUNC) &_torch_cpp_torch_namespace__fused_adamw_self_TensorList_grads_TensorList_exp_avgs_TensorList_exp_avg_sqs_TensorList_max_exp_avg_sqs_TensorList_state_steps_TensorList_lr_double_beta1_double_beta2_double_weight_decay_double_eps_double_amsgrad_bool_maximize_bool, 15},
    {"_torch_cpp_torch_generator", (DL_FUNC) &_torch_cpp_torch_generator, 0},
    {"_torch_cpp_generator_current_seed", (DL_FUNC) &_torch_cpp_generator_current_seed, 1},
    {"_torch_cpp_generator_set_current_seed", (DL_FUNC) &_torch_cpp_generator_set_current_seed, 2},
    {"_torch_cpp_torch_manual_seed", (DL_FUNC) &_torch_cpp_torch_manual_seed, 1},
    {"_torch_cpp_torch_get_rng_state", (DL_FUNC) &_torch_cpp_torch_get_rng_state, 0},
    {"_torch_cpp_torch_set_rng_state", (DL_FUNC) &_torch_cpp_torch_set_rng_state, 1},
    {"_torch_cpp_torch_cuda_get_rng_state", (DL_FUNC) &_torch_cpp_torch_cuda_get_rng_state, 1},
    {"_torch_cpp_torch_cuda_set_rng_state", (DL_FUNC) &_torch_cpp_torch_cuda_set_rng_state, 2},
    {"_torch_enquos0", (DL_FUNC) &_torch_enquos0, 1},
    {"_torch_evaluate_slices", (DL_FUNC) &_torch_evaluate_slices, 2},
    {"_torch_Tensor_slice", (DL_FUNC) &_torch_Tensor_slice, 4},
    {"_torch_Tensor_slice_put", (DL_FUNC) &_torch_Tensor_slice_put, 4},
    {"_torch_ivalue_test_function", (DL_FUNC) &_torch_ivalue_test_function, 1},
    {"_torch_cpp_jit_compile", (DL_FUNC) &_torch_cpp_jit_compile, 1},
    {"_torch_cpp_jit_compile_list_methods", (DL_FUNC) &_torch_cpp_jit_compile_list_methods, 1},
    {"_torch_cpp_jit_compile_get_function", (DL_FUNC) &_torch_cpp_jit_compile_get_function, 2},
    {"_torch_cpp_jit_all_operators", (DL_FUNC) &_torch_cpp_jit_all_operators, 0},
    {"_torch_cpp_jit_operator_info", (DL_FUNC) &_torch_cpp_jit_operator_info, 1},
    {"_torch_cpp_jit_all_schemas_for", (DL_FUNC) &_torch_cpp_jit_all_schemas_for, 1},
    {"_torch_cpp_jit_execute", (DL_FUNC) &_torch_cpp_jit_execute, 2},
    {"_torch_function_schema_name", (DL_FUNC) &_torch_function_schema_name, 1},
    {"_torch_function_schema_arguments", (DL_FUNC) &_torch_function_schema_arguments, 1},
    {"_torch_function_schema_argument_name", (DL_FUNC) &_torch_function_schema_argument_name, 1},
    {"_torch_function_schema_argument_type", (DL_FUNC) &_torch_function_schema_argument_type, 1},
    {"_torch_function_schema_returns", (DL_FUNC) &_torch_function_schema_returns, 1},
    {"_torch_function_schema_return_type", (DL_FUNC) &_torch_function_schema_return_type, 1},
    {"_torch_cpp_lantern_configure", (DL_FUNC) &_torch_cpp_lantern_configure, 1},
    {"_torch_cpp_lantern_version", (DL_FUNC) &_torch_cpp_lantern_version, 0},
    {"_torch_cpp_lantern_init", (DL_FUNC) &_torch_cpp_lantern_init, 1},
    {"_torch_cpp_lantern_test", (DL_FUNC) &_torch_cpp_lantern_test, 0},
    {"_torch_cpp_lantern_has_error", (DL_FUNC) &_torch_cpp_lantern_has_error, 0},
    {"_torch_cpp_lantern_last_error", (DL_FUNC) &_torch_cpp_lantern_last_error, 0},
    {"_torch_cpp_lantern_error_clear", (DL_FUNC) &_torch_cpp_lantern_error_clear, 0},
    {"_torch_cpp_layout_to_string", (DL_FUNC) &_torch_cpp_layout_to_string, 1},
    {"_torch_cpp_torch_strided", (DL_FUNC) &_torch_cpp_torch_strided, 0},
    {"_torch_cpp_torch_sparse", (DL_FUNC) &_torch_cpp_torch_sparse, 0},
    {"_torch_cpp_memory_format_to_string", (DL_FUNC) &_torch_cpp_memory_format_to_string, 1},
    {"_torch_cpp_torch_contiguous_format", (DL_FUNC) &_torch_cpp_torch_contiguous_format, 0},
    {"_torch_cpp_torch_preserve_format", (DL_FUNC) &_torch_cpp_torch_preserve_format, 0},
    {"_torch_cpp_torch_channels_last_format", (DL_FUNC) &_torch_cpp_torch_channels_last_format, 0},
    {"_torch_cpp_nn_utils_rnn_pack_padded_sequence", (DL_FUNC) &_torch_cpp_nn_utils_rnn_pack_padded_sequence, 4},
    {"_torch_cpp_nn_utils_pack_sequence", (DL_FUNC) &_torch_cpp_nn_utils_pack_sequence, 2},
    {"_torch_cpp_nn_utils_pad_packed_sequence", (DL_FUNC) &_torch_cpp_nn_utils_pad_packed_sequence, 4},
    {"_torch_cpp_nn_utils_pad_sequence", (DL_FUNC) &_torch_cpp_nn_utils_pad_sequence, 3},
    {"_torch_cpp_nn_utils_PackedSequence_new", (DL_FUNC) &_torch_cpp_nn_utils_PackedSequence_new, 4},
    {"_torch_cpp_nn_utils_PackedSequence_data", (DL_FUNC) &_torch_cpp_nn_utils_PackedSequence_data, 1},
    {"_torch_cpp_nn_utils_PackedSequence_batch_sizes", (DL_FUNC) &_torch_cpp_nn_utils_PackedSequence_batch_sizes, 1},
    {"_torch_cpp_nn_utils_PackedSequence_sorted_indices", (DL_FUNC) &_torch_cpp_nn_utils_PackedSequence_sorted_indices, 1},
    {"_torch_cpp_nn_utils_PackedSequence_unsorted_indices", (DL_FUNC) &_torch_cpp_nn_utils_PackedSequence_unsorted_indices, 1},
    {"_torch_cpp_qscheme_to_string", (DL_FUNC) &_torch_cpp_qscheme_to_string, 1},
    {"_torch_cpp_torch_per_channel_affine", (DL_FUNC) &_torch_cpp_torch_per_channel_affine, 0},
    {"_torch_cpp_torch_per_tensor_affine", (DL_FUNC) &_torch_cpp_torch_per_tensor_affine, 0},
    {"_torch_cpp_torch_per_channel_symmetric", (DL_FUNC) &_torch_cpp_torch_per_channel_symmetric, 0},
    {"_torch_cpp_torch_per_tensor_symmetric", (DL_FUNC) &_torch_cpp_torch_per_tensor_symmetric, 0},
    {"_torch_cpp_Tensor_is_quantized", (DL_FUNC) &_torch_cpp_Tensor_is_quantized, 1},
    {"_torch_cpp_torch_reduction_mean", (DL_FUNC) &_torch_cpp_torch_reduction_mean, 0},
    {"_torch_cpp_torch_reduction_none", (DL_FUNC) &_torch_cpp_torch_reduction_none, 0},
    {"_torch_cpp_torch_reduction_sum", (DL_FUNC) &_torch_cpp_torch_reduction_sum, 0},
    {"_torch_cpp_tensor_save", (DL_FUNC) &_torch_cpp_tensor_save, 2},
    {"_torch_cpp_tensor_load", (DL_FUNC) &_torch_cpp_tensor_load, 3},
    {"_torch_cpp_load_state_dict", (DL_FUNC) &_torch_cpp_load_state_dict, 2},
    {"_torch_cpp_torch_scalar", (DL_FUNC) &_torch_cpp_torch_scalar, 1},
    {"_torch_cpp_torch_scalar_dtype", (DL_FUNC) &_torch_cpp_torch_scalar_dtype, 1},
    {"_torch_cpp_torch_scalar_to_int", (DL_FUNC) &_torch_cpp_torch_scalar_to_int, 1},
    {"_torch_cpp_torch_scalar_to_double", (DL_FUNC) &_torch_cpp_torch_scalar_to_double, 1},
    {"_torch_cpp_torch_scalar_to_float", (DL_FUNC) &_torch_cpp_torch_scalar_to_float, 1},
    {"_torch_cpp_torch_scalar_to_bool", (DL_FUNC) &_torch_cpp_torch_scalar_to_bool, 1},
    {"_torch_cpp_jit_script_module_parameters", (DL_FUNC) &_torch_cpp_jit_script_module_parameters, 2},
    {"_torch_cpp_jit_script_module_buffers", (DL_FUNC) &_torch_cpp_jit_script_module_buffers, 2},
    {"_torch_cpp_jit_script_module_train", (DL_FUNC) &_torch_cpp_jit_script_module_train, 2},
    {"_torch_cpp_jit_script_module_set_optimized", (DL_FUNC) &_torch_cpp_jit_script_module_set_optimized, 2},
    {"_torch_cpp_jit_script_module_is_training", (DL_FUNC) &_torch_cpp_jit_script_module_is_training, 1},
    {"_torch_cpp_jit_script_module_is_optimized", (DL_FUNC) &_torch_cpp_jit_script_module_is_optimized, 1},
    {"_torch_cpp_jit_script_module_register_parameter", (DL_FUNC) &_torch_cpp_jit_script_module_register_parameter, 4},
    {"_torch_cpp_jit_script_module_register_buffer", (DL_FUNC) &_torch_cpp_jit_script_module_register_buffer, 3},
    {"_torch_cpp_jit_script_module_register_module", (DL_FUNC) &_torch_cpp_jit_script_module_register_module, 3},
    {"_torch_cpp_jit_script_module_to", (DL_FUNC) &_torch_cpp_jit_script_module_to, 3},
    {"_torch_cpp_jit_script_module_modules", (DL_FUNC) &_torch_cpp_jit_script_module_modules, 1},
    {"_torch_cpp_jit_script_module_children", (DL_FUNC) &_torch_cpp_jit_script_module_children, 1},
    {"_torch_cpp_jit_script_module_find_method", (DL_FUNC) &_torch_cpp_jit_script_module_find_method, 2},
    {"_torch_cpp_jit_script_method_call", (DL_FUNC) &_torch_cpp_jit_script_method_call, 2},
    {"_torch_cpp_jit_script_method_graph_print", (DL_FUNC) &_torch_cpp_jit_script_method_graph_print, 1},
    {"_torch_cpp_jit_last_executed_optimized_graph_print", (DL_FUNC) &_torch_cpp_jit_last_executed_optimized_graph_print, 0},
    {"_torch_cpp_jit_script_module_new", (DL_FUNC) &_torch_cpp_jit_script_module_new, 2},
    {"_torch_cpp_jit_script_module_add_constant", (DL_FUNC) &_torch_cpp_jit_script_module_add_constant, 3},
    {"_torch_cpp_jit_script_module_add_method", (DL_FUNC) &_torch_cpp_jit_script_module_add_method, 2},
    {"_torch_cpp_jit_script_module_find_constant", (DL_FUNC) &_torch_cpp_jit_script_module_find_constant, 2},
    {"_torch_cpp_jit_script_module_save", (DL_FUNC) &_torch_cpp_jit_script_module_save, 2},
    {"_torch_cpp_jit_script_module_save_for_mobile", (DL_FUNC) &_torch_cpp_jit_script_module_save_for_mobile, 2},
    {"_torch_test_stack", (DL_FUNC) &_torch_test_stack, 1},
    {"_torch_cpp_Tensor_storage", (DL_FUNC) &_torch_cpp_Tensor_storage, 1},
    {"_torch_cpp_Tensor_has_storage", (DL_FUNC) &_torch_cpp_Tensor_has_storage, 1},
    {"_torch_cpp_Storage_data_ptr", (DL_FUNC) &_torch_cpp_Storage_data_ptr, 1},
    {"_torch_cpp_torch_tensor_print", (DL_FUNC) &_torch_cpp_torch_tensor_print, 2},
    {"_torch_cpp_tensor_from_buffer", (DL_FUNC) &_torch_cpp_tensor_from_buffer, 3},
    {"_torch_cpp_buffer_from_tensor", (DL_FUNC) &_torch_cpp_buffer_from_tensor, 1},
    {"_torch_cpp_torch_tensor_dtype", (DL_FUNC) &_torch_cpp_torch_tensor_dtype, 1},
    {"_torch_torch_tensor_cpp", (DL_FUNC) &_torch_torch_tensor_cpp, 5},
    {"_torch_cpp_as_array", (DL_FUNC) &_torch_cpp_as_array, 1},
    {"_torch_cpp_tensor_element_size", (DL_FUNC) &_torch_cpp_tensor_element_size, 1},
    {"_torch_cpp_tensor_dim", (DL_FUNC) &_torch_cpp_tensor_dim, 1},
    {"_torch_cpp_tensor_ndim", (DL_FUNC) &_torch_cpp_tensor_ndim, 1},
    {"_torch_cpp_tensor_numel", (DL_FUNC) &_torch_cpp_tensor_numel, 1},
    {"_torch_cpp_tensor_device", (DL_FUNC) &_torch_cpp_tensor_device, 1},
    {"_torch_cpp_tensor_is_undefined", (DL_FUNC) &_torch_cpp_tensor_is_undefined, 1},
    {"_torch_cpp_tensor_is_contiguous", (DL_FUNC) &_torch_cpp_tensor_is_contiguous, 1},
    {"_torch_cpp_tensor_has_names", (DL_FUNC) &_torch_cpp_tensor_has_names, 1},
    {"_torch_cpp_tensor_names", (DL_FUNC) &_torch_cpp_tensor_names, 1},
    {"_torch_cpp_set_num_threads", (DL_FUNC) &_torch_cpp_set_num_threads, 1},
    {"_torch_cpp_set_num_interop_threads", (DL_FUNC) &_torch_cpp_set_num_interop_threads, 1},
    {"_torch_cpp_get_num_threads", (DL_FUNC) &_torch_cpp_get_num_threads, 0},
    {"_torch_cpp_get_num_interop_threads", (DL_FUNC) &_torch_cpp_get_num_interop_threads, 0},
    {"_torch_cpp_namespace_normal_double_double", (DL_FUNC) &_torch_cpp_namespace_normal_double_double, 5},
    {"_torch_cpp_namespace_normal_double_tensor", (DL_FUNC) &_torch_cpp_namespace_normal_double_tensor, 3},
    {"_torch_cpp_namespace_normal_tensor_double", (DL_FUNC) &_torch_cpp_namespace_normal_tensor_double, 3},
    {"_torch_cpp_namespace_normal_tensor_tensor", (DL_FUNC) &_torch_cpp_namespace_normal_tensor_tensor, 3},
    {"_torch_nnf_pad_circular", (DL_FUNC) &_torch_nnf_pad_circular, 2},
    {"_torch_cpp_method_Tensor_is_sparse", (DL_FUNC) &_torch_cpp_method_Tensor_is_sparse, 1},
    {"_torch_cpp_torch_tensor_list", (DL_FUNC) &_torch_cpp_torch_tensor_list, 1},
    {"_torch_cpp_trace_function", (DL_FUNC) &_torch_cpp_trace_function, 8},
    {"_torch_cpp_save_traced_fn", (DL_FUNC) &_torch_cpp_save_traced_fn, 2},
    {"_torch_cpp_jit_compilation_unit", (DL_FUNC) &_torch_cpp_jit_compilation_unit, 0},
    {"_torch_cpp_call_traced_fn", (DL_FUNC) &_torch_cpp_call_traced_fn, 2},
    {"_torch_cpp_traced_fn_graph_print", (DL_FUNC) &_torch_cpp_traced_fn_graph_print, 1},
    {"_torch_cpp_jit_load", (DL_FUNC) &_torch_cpp_jit_load, 1},
    {"_torch_cpp_call_jit_script", (DL_FUNC) &_torch_cpp_call_jit_script, 2},
    {"_torch_cpp_save_traced_fn_for_mobile", (DL_FUNC) &_torch_cpp_save_traced_fn_for_mobile, 2},
    {"_torch_cpp_nullptr", (DL_FUNC) &_torch_cpp_nullptr, 0},
    {"_torch_cpp_nullopt", (DL_FUNC) &_torch_cpp_nullopt, 0},
    {"_torch_cpp_tensor_undefined", (DL_FUNC) &_torch_cpp_tensor_undefined, 0},
    {"_torch_to_index_tensor", (DL_FUNC) &_torch_to_index_tensor, 1},
    {"_torch_cpp_torch_namespace__use_cudnn_rnn_flatten_weight", (DL_FUNC) &_torch_cpp_torch_namespace__use_cudnn_rnn_flatten_weight, 0},
    {"_torch_cpp_torch_namespace__store_main_thread_id", (DL_FUNC) &_torch_cpp_torch_namespace__store_main_thread_id, 0},
    {"_torch_transpose2", (DL_FUNC) &_torch_transpose2, 1},
    {"_torch_cpp_torch_show_config", (DL_FUNC) &_torch_cpp_torch_show_config, 0},
    {"_torch_cpp_torch_parallel_info", (DL_FUNC) &_torch_cpp_torch_parallel_info, 0},
    {"_torch_cpp_torch_variable_list", (DL_FUNC) &_torch_cpp_torch_variable_list, 1},
    {"_torch_cpp_variable_list_to_r_list", (DL_FUNC) &_torch_cpp_variable_list_to_r_list, 1},
    {"_torch_set_xptr_address", (DL_FUNC) &_torch_set_xptr_address, 2},
    {"_torch_set_xptr_protected", (DL_FUNC) &_torch_set_xptr_protected, 2},
    {"_torch_xptr_address", (DL_FUNC) &_torch_xptr_address, 1},
    {NULL, NULL, 0}
};

void register_callables(DllInfo *dll);
RcppExport void R_init_torchpkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    register_callables(dll);
}
