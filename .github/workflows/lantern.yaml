name: Lantern

on:
  workflow_call:

jobs:
  build:
    runs-on: ${{ matrix.config.runner }}
    container: ${{ matrix.container }}
    name: "os:${{matrix.config.os}} | v:${{matrix.config.version}}"
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        
        config: 
          # when changing supported versions here, please modify supported versions
          # in install.R
          - {os: macOS, version: cpu-intel, runner: macos-13}
          - {os: macOS, version: cpu-m1, runner: [self-hosted, m1]}
          
          - {os: ubuntu, version: cpu, runner: ubuntu-latest}
          - {os: ubuntu, version: cu12.6, runner: [self-hosted, linux]}
          - {os: ubuntu, version: cu12.8, runner: [self-hosted, linux]}

          - {os: windows, version: cpu, runner: windows-2022}
          - {os: windows, version: cu12.6, runner: windows-2022}
          - {os: windows, version: cu12.8, runner: windows-2022}

        include:
          - config: {os: ubuntu}
            container: ubuntu:20.04
          
          - config: {version: cu12.6}
            cuda: 12.6
            cuda_patch: 3
          
          - config: {version: cu12.8}
            cuda: 12.8
            cuda_patch: 1
        
    env:
      CUDA: ${{ matrix.cuda }}
      
    steps:

      - name: Install system dependencies
        if: matrix.container != ''
        run: |
          DEBIAN_FRONTEND="noninteractive" apt-get update
          DEBIAN_FRONTEND="noninteractive" apt-get install -y curl sudo libxml2-dev wget chrpath rsync git build-essential
          curl -fsSL https://get.docker.com -o get-docker.sh
          DRY_RUN=1 sh ./get-docker.sh

      - uses: actions/checkout@v5
      
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.25.1"

      - name: Install CUDA
        if: ${{matrix.cuda != ''}}
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: "${{matrix.cuda}}.${{matrix.cuda_patch}}"
          log-file-suffix: '${{matrix.cuda}}.${{matrix.cuda_patch}}.txt'
          
      - name: Install CuDNN
        if: ${{ matrix.cuda != '' }}
        uses: ./.github/actions/install-cudnn
        with:
          cuda_version: ${{ matrix.cuda }}

      - name: Run cmake
        run: |
          cd src/lantern/
          mkdir build
          cd build
          cmake .. ${{ matrix.config.cmake }}

      - name: Build libs
        id: build
        run: |
          cd src/lantern/build
          cmake --build . --config Release --parallel 4 --target package
          fname=$(ls . | grep "lantern.*\.zip")
          echo "fname=$fname" >> $GITHUB_OUTPUT
        shell: bash

      - id: artifact
        if: ${{ github.workflow == 'Test' }}
        uses: actions/upload-artifact@v5
        with:
          name: ${{ steps.build.outputs.fname }}
          path: 'src/lantern/build/${{ steps.build.outputs.fname }}'
      
      - id: 's3'
        if: ${{ github.workflow != 'Test' || github.event_name != 'pull_request'}}
        uses: ./.github/actions/upload-s3
        with:
          fname: ${{ steps.build.outputs.fname }}
          aws_role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws_region: ${{ secrets.AWS_REGION }}

      
