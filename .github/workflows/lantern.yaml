name: Lantern

on:
  push:
    branches:
      - master
      - 'cran/**'
      - cuda9.2-md5hash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-10.15]
        cuda: [0]
        include:
          - os: windows-2019
            cuda: 0
            library: lantern.dll
            test: "& './lanterntest.exe' "
            make: "& 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild' lantern.sln /t:Build /p:Configuration=Release"
            build: build/Release
            cmakevars:
            libext: .dll
            exeext: .exe
            fixlib:
            flavor: Release
            artifacts: lantern.dll
            upload: Windows
          - os: ubuntu-18.04
            cuda: 0
            library: liblantern.so
            test: ./lanterntest
            make: make
            build: build
            cmakevars:
            libext:
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' liblantern.so
            flavor: Release
            artifacts: liblantern.so
            upload: Linux
          - os: macos-10.15
            cuda: 0
            library: liblantern.dylib
            test: ./lanterntest
            make: make
            build: build
            cmakevars:
            libext: .dylib
            exeext:
            fixlib: install_name_tool -add_rpath @loader_path/. liblantern.dylib
            flavor: Release
            artifacts: liblantern.dylib
            upload: macOS
          - os: ubuntu-18.04
            cuda: 10.1
            library: liblantern.so
            test: ./lanterntest
            make: make
            build: build
            cmakevars:
            libext:
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' liblantern.so
            flavor: Release
            artifacts: liblantern.so
            upload: Linux-Cuda-101
          - os: ubuntu-18.04
            cuda: 10.2
            library: liblantern.so
            test: ./lanterntest
            make: make
            build: build
            cmakevars:
            libext:
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' liblantern.so
            flavor: Release
            artifacts: liblantern.so
            upload: Linux-Cuda-102
          - os: ubuntu-18.04
            cuda: 9.2
            library: liblantern.so
            test: ./lanterntest
            make: make
            build: build
            cmakevars:
            libext:
            exeext:
            fixlib: chrpath -r '$ORIGIN/.' liblantern.so
            flavor: Release
            artifacts: liblantern.so
            upload: Linux-Cuda-902
          - os: windows-2019
            cuda: 10.1
            library: lantern.dll
            test: "& './lanterntest.exe' "
            make: "& 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild' lantern.sln /t:Build /p:Configuration=Release"
            build: build/Release
            cmakevars: '-DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1"'
            libext: .dll
            exeext: .exe
            fixlib:
            flavor: Release
            artifacts: lantern.dll
            upload: Windows-Cuda-101
            cudatoolkit: 'https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.96_win10.exe'
            cudnn: 'https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.1-windows10-x64-v7.6.5.32.zip'
          - os: windows-2019
            cuda: 10.2
            library: lantern.dll
            test: "& './lanterntest.exe' "
            make: "& 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild' lantern.sln /t:Build /p:Configuration=Release"
            build: build/Release
            cmakevars: '-DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2"'
            libext: .dll
            exeext: .exe
            fixlib:
            flavor: Release
            artifacts: lantern.dll
            upload: Windows-Cuda-102
            cudatoolkit: 'http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe'
            cudnn: 'https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.2-windows10-x64-v7.6.5.32.zip'
    steps:
      - uses: actions/checkout@v2
      - name: Create environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Prep cmake cuda 9.2
        if: ${{ matrix.cuda == 9.2 && matrix.os == 'ubuntu-18.04' }}
        run: |
          wget --quiet https://developer.nvidia.com/compute/cuda/9.2/Prod2/local_installers/cuda_9.2.148_396.37_linux -O cuda_9.2.148_396.37_linux.run
          chmod +x cuda_9.2.148_396.37_linux.run
          sudo sh cuda_9.2.148_396.37_linux.run --silent --toolkit
          echo "CUDA=${{matrix.cuda}}" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda" >> $GITHUB_ENV
          dir /usr/local
          wget --quiet https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-9.2-linux-x64-v7.6.5.32.tgz
          tar -xzvf cudnn-9.2-linux-x64-v7.6.5.32.tgz
          sudo cp cuda/include/cudnn*.h /usr/local/cuda/include
          sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
          sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*
          echo "CUDNN_LIBRARY_PATH=/usr/local/cuda/lib64" >> $GITHUB_ENV
          echo "CUDNN_INCLUDE_PATH=/usr/local/cuda/include" >> $GITHUB_ENV
      - name: Prep cmake cuda 10.1
        if: ${{ matrix.cuda == 10.1 && matrix.os == 'ubuntu-18.04' }}
        run: |
          wget --quiet https://storage.googleapis.com/torch-lantern-builds/cuda/cuda_10.1.105_418.39_linux.run
          chmod +x cuda_10.1.105_418.39_linux.run
          sudo ./cuda_10.1.105_418.39_linux.run --silent --toolkit
          echo "CUDA=${{matrix.cuda}}" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda" >> $GITHUB_ENV
          dir /usr/local
          wget --quiet https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.1-linux-x64-v7.6.5.32.tgz
          tar -xzvf cudnn-10.1-linux-x64-v7.6.5.32.tgz
          sudo cp cuda/include/cudnn*.h /usr/local/cuda/include
          sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
          sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*
          echo "CUDNN_LIBRARY_PATH=/usr/local/cuda/lib64" >> $GITHUB_ENV
          echo "CUDNN_INCLUDE_PATH=/usr/local/cuda/include" >> $GITHUB_ENV
      - name: Prep cmake cuda 10.2
        if: ${{ matrix.cuda == 10.2 && matrix.os == 'ubuntu-18.04'}}
        run: |
          wget --quiet http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
          chmod +x cuda_10.2.89_440.33.01_linux.run
          sudo ./cuda_10.2.89_440.33.01_linux.run --silent --toolkit
          echo "CUDA=${{matrix.cuda}}" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda" >> $GITHUB_ENV
          dir /usr/local
          wget --quiet https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.2-linux-x64-v7.6.5.32.tgz
          tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz
          sudo cp cuda/include/cudnn*.h /usr/local/cuda/include
          sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
          sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*
          echo "CUDNN_LIBRARY_PATH=/usr/local/cuda/lib64" >> $GITHUB_ENV
          echo "CUDNN_INCLUDE_PATH=/usr/local/cuda/include" >> $GITHUB_ENV
      - name: Prep cuda (windows)
        if: ${{ (matrix.cuda == 10.1 || matrix.cuda == 10.2 ) && matrix.os == 'windows-2019'}}
        run: |
          curl ${{ matrix.cudatoolkit }} --output cuda.exe --silent --location
          Start-Process ./cuda.exe -argumentlist "-s" -wait
          echo "CUDA=${{ matrix.cuda }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "CUDA_TOOLKIT_ROOT_DIR=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          curl ${{ matrix.cudnn }} --output cudnn.zip --silent --location 
          Expand-Archive -Path cudnn.zip -DestinationPath "C:\cudnn"
          Get-ChildItem -Path "C:\cudnn"
          Get-ChildItem -Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}"
          Move-Item -Path "C:\cudnn\cuda\bin\cudnn*.dll" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\bin"
          Move-Item -Path "C:\cudnn\cuda\include\cudnn*.h" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\include"
          Move-Item -Path "C:\cudnn\cuda\lib\x64\cudnn*.lib" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\lib\x64"
          echo "CUDNN_INCLUDE_PATH=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\include""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_LIBRARY_PATH=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\lib\x64""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Get-Content -Path $env:GITHUB_ENV -TotalCount 5
          
      - name: Run cmake
        working-directory: ${{runner.workspace}}/build
        run: cmake -DCMAKE_BUILD_TYPE=${{matrix.flavor}} ${{ matrix.cmakevars }} ${{github.workspace}}/lantern
          
      - name: Run make
        working-directory: ${{runner.workspace}}/build
        run: ${{matrix.make}}
        
      - name: Fix library
        working-directory: ${{runner.workspace}}/build
        run: ${{matrix.fixlib}}
        
      - name: Install libs
        working-directory: ${{runner.workspace}}
        run: |
          mkdir install
          cp ${{matrix.build}}/lanterntest${{matrix.exeext}} install/
          cp ${{matrix.build}}/${{matrix.library}} install/${{matrix.library}}
          cp build/libtorch/lib/*${{matrix.libext}} install
          mkdir artifacts
          cp -R ${{matrix.build}}/${{matrix.artifacts}} artifacts
          rm -r build

      - name: Test library
        if: ${{ matrix.cuda == 0 }}
        working-directory: ${{runner.workspace}}/install
        run: ${{matrix.test}} ${{runner.workspace}}/install
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.upload}}
          path: ${{runner.workspace}}/artifacts

  upload:
    needs: build
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        name: [macOS, Linux, Windows, Cuda092, Cuda101, Cuda102, WindowsCuda101, WindowsCuda102]
        include:
          - name: macOS
            artifact: macOS
            upload: macOS
            hw: cpu
          - name: Linux
            artifact: Linux
            upload: Linux
            hw: cpu
          - name: Windows
            artifact: Windows
            upload: Windows
            hw: cpu
          - name: Cuda092
            artifact: Linux-Cuda-902
            upload: Linux
            hw: gpu
            version: -902
          - name: Cuda101
            artifact: Linux-Cuda-101
            upload: Linux
            hw: gpu
            version: -101
          - name: Cuda102
            artifact: Linux-Cuda-102
            upload: Linux
            hw: gpu
            version: -102
          - name: WindowsCuda101
            artifact: Windows-Cuda-101
            upload: Windows
            hw: gpu
            version: -101
          - name: WindowsCuda102
            artifact: Windows-Cuda-102
            upload: Windows
            hw: gpu
            version: -102
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.artifact }}
      - uses: montudor/action-zip@v0.1.0
        with:
          args: zip -j -qq -r ./${{ matrix.artifact }}.zip ./${{ matrix.artifact }}
      - name: Upload to lantern builds
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_APPLICATION_CREDENTIALS }}
          CLI: gsutil
        with:
          args: cp ${{ matrix.artifact }}.zip gs://torch-lantern-builds/${{ github.ref }}/${{ github.sha }}/${{ matrix.upload }}-${{ matrix.hw }}${{ matrix.version }}.zip
      - name: Upload to latest
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_APPLICATION_CREDENTIALS }}
          CLI: gsutil
        with:
          args: cp ${{ matrix.artifact }}.zip gs://torch-lantern-builds/${{ github.ref }}/latest/${{ matrix.upload }}-${{ matrix.hw }}${{ matrix.version }}.zip
  autogen:
    runs-on: ubuntu-16.04
    name: autogen (ubuntu-16.04)
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Create environment
        run: mkdir ${{runner.workspace}}/build
      - name: Run cmake
        working-directory: ${{runner.workspace}}/build
        run: cmake ${{github.workspace}}/lantern/headers
      - name: Run make
        working-directory: ${{runner.workspace}}/build
        run: make
      - name: Prepare autogen
        working-directory: ${{runner.workspace}}
        run: |
          mkdir output
          cp ${{github.workspace}}/lantern/src/lantern.cpp output/lantern.cpp
          cp ${{github.workspace}}/lantern/include/lantern/lantern.h output/lantern.h
      - name: Run autogen
        working-directory: ${{runner.workspace}}/build
        run: ./lanterngen ${{github.workspace}}/lantern/headers/declarations/declarations.yaml ${{runner.workspace}}/output/lantern.cpp ${{runner.workspace}}/output/lantern.h
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Autogen
          path: ${{runner.workspace}}/output
